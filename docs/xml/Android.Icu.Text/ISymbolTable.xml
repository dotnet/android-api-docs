<Type Name="ISymbolTable" FullName="Android.Icu.Text.ISymbolTable">
  <TypeSignature Language="C#" Value="public interface ISymbolTable : Android.Runtime.IJavaObject, IDisposable, Java.Interop.IJavaPeerable" />
  <TypeSignature Language="ILAsm" Value=".class public interface auto ansi abstract beforefieldinit ISymbolTable implements class Android.Runtime.IJavaObject, class Java.Interop.IJavaPeerable, class System.IDisposable" />
  <TypeSignature Language="DocId" Value="T:Android.Icu.Text.ISymbolTable" />
  <TypeSignature Language="F#" Value="type ISymbolTable = interface&#xA;    interface IJavaObject&#xA;    interface IDisposable&#xA;    interface IJavaPeerable" />
  <AssemblyInfo>
    <AssemblyName>Mono.Android</AssemblyName>
    <AssemblyVersion>0.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Interfaces>
    <Interface>
      <InterfaceName>Android.Runtime.IJavaObject</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>Java.Interop.IJavaPeerable</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.IDisposable</InterfaceName>
    </Interface>
  </Interfaces>
  <Attributes>
    <Attribute>
      <AttributeName Language="C#">[Android.Runtime.Register("android/icu/text/SymbolTable", "", "Android.Icu.Text.ISymbolTableInvoker", ApiSince=24)]</AttributeName>
      <AttributeName Language="F#">[&lt;Android.Runtime.Register("android/icu/text/SymbolTable", "", "Android.Icu.Text.ISymbolTableInvoker", ApiSince=24)&gt;]</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>An interface that defines both lookup protocol and parsing of
            symbolic names.</summary>
    <remarks>
      <para>An interface that defines both lookup protocol and parsing of
            symbolic names.</para>
      <para>This interface is used by UnicodeSet to resolve $Variable style
            references that appear in set patterns.  RBBI and Transliteration
            both independently implement this interface.</para>
      <para>A symbol table maintains two kinds of mappings.  The first is
            between symbolic names and their values.  For example, if the
            variable with the name "start" is set to the value "alpha"
            (perhaps, though not necessarily, through an expression such as
            "$start=alpha"), then the call lookup("start") will return the
            char[] array ['a', 'l', 'p', 'h', 'a'].</para>
      <para>The second kind of mapping is between character values and
            UnicodeMatcher objects.  This is used by RuleBasedTransliterator,
            which uses characters in the private use area to represent objects
            such as UnicodeSets.  If U+E015 is mapped to the UnicodeSet [a-z],
            then lookupMatcher(0xE015) will return the UnicodeSet [a-z].</para>
      <para>Finally, a symbol table defines parsing behavior for symbolic
            names.  All symbolic names start with the SYMBOL_REF character.
            When a parser encounters this character, it calls parseReference()
            with the position immediately following the SYMBOL_REF.  The symbol
            table parses the name, if there is one, and returns it.</para>
      <para>
        <format type="text/html">
          <a href="https://developer.android.com/reference/android/icu/text/SymbolTable" title="Reference documentation">Java documentation for <code>android.icu.text.SymbolTable</code>.</a>
        </format>
      </para>
      <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName="Lookup">
      <MemberSignature Language="C#" Value="public char[]? Lookup (string? s);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance char[] Lookup(string s) cil managed" />
      <MemberSignature Language="DocId" Value="M:Android.Icu.Text.ISymbolTable.Lookup(System.String)" />
      <MemberSignature Language="F#" Value="abstract member Lookup : string -&gt; char[]" Usage="iSymbolTable.Lookup s" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("lookup", "(Ljava/lang/String;)[C", "GetLookup_Ljava_lang_String_Handler:Android.Icu.Text.ISymbolTableInvoker, Mono.Android, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null", ApiSince=24)]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("lookup", "(Ljava/lang/String;)[C", "GetLookup_Ljava_lang_String_Handler:Android.Icu.Text.ISymbolTableInvoker, Mono.Android, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null", ApiSince=24)&gt;]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[System.Runtime.Versioning.SupportedOSPlatform("android24.0")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Runtime.Versioning.SupportedOSPlatform("android24.0")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Char[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="s" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="s">the symbolic name to lookup</param>
        <summary>Lookup the characters associated with this string and return it.</summary>
        <returns>a char array containing the name's value, or null if
            there is no mapping for s.</returns>
        <remarks>
          <para>Lookup the characters associated with this string and return it.
            Return <c>null</c> if no such name exists.  The resultant
            array may have length zero.</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/android/icu/text/SymbolTable#lookup(java.lang.String)" title="Reference documentation">Java documentation for <code>android.icu.text.SymbolTable.lookup(java.lang.String)</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="LookupMatcher">
      <MemberSignature Language="C#" Value="public Android.Icu.Text.IUnicodeMatcher? LookupMatcher (int ch);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Android.Icu.Text.IUnicodeMatcher LookupMatcher(int32 ch) cil managed" />
      <MemberSignature Language="DocId" Value="M:Android.Icu.Text.ISymbolTable.LookupMatcher(System.Int32)" />
      <MemberSignature Language="F#" Value="abstract member LookupMatcher : int -&gt; Android.Icu.Text.IUnicodeMatcher" Usage="iSymbolTable.LookupMatcher ch" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("lookupMatcher", "(I)Landroid/icu/text/UnicodeMatcher;", "GetLookupMatcher_IHandler:Android.Icu.Text.ISymbolTableInvoker, Mono.Android, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null", ApiSince=24)]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("lookupMatcher", "(I)Landroid/icu/text/UnicodeMatcher;", "GetLookupMatcher_IHandler:Android.Icu.Text.ISymbolTableInvoker, Mono.Android, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null", ApiSince=24)&gt;]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[System.Runtime.Versioning.SupportedOSPlatform("android24.0")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Runtime.Versioning.SupportedOSPlatform("android24.0")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Android.Icu.Text.IUnicodeMatcher</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="ch" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="ch">a 32-bit code point from 0 to 0x10FFFF inclusive.</param>
        <summary>Lookup the UnicodeMatcher associated with the given character, and
            return it.</summary>
        <returns>the UnicodeMatcher object represented by the given
            character, or null if there is no mapping for ch.</returns>
        <remarks>
          <para>Lookup the UnicodeMatcher associated with the given character, and
            return it.  Return <c>null</c> if not found.</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/android/icu/text/SymbolTable#lookupMatcher(int)" title="Reference documentation">Java documentation for <code>android.icu.text.SymbolTable.lookupMatcher(int)</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ParseReference">
      <MemberSignature Language="C#" Value="public string? ParseReference (string? text, Java.Text.ParsePosition? pos, int limit);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance string ParseReference(string text, class Java.Text.ParsePosition pos, int32 limit) cil managed" />
      <MemberSignature Language="DocId" Value="M:Android.Icu.Text.ISymbolTable.ParseReference(System.String,Java.Text.ParsePosition,System.Int32)" />
      <MemberSignature Language="F#" Value="abstract member ParseReference : string * Java.Text.ParsePosition * int -&gt; string" Usage="iSymbolTable.ParseReference (text, pos, limit)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("parseReference", "(Ljava/lang/String;Ljava/text/ParsePosition;I)Ljava/lang/String;", "GetParseReference_Ljava_lang_String_Ljava_text_ParsePosition_IHandler:Android.Icu.Text.ISymbolTableInvoker, Mono.Android, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null", ApiSince=24)]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("parseReference", "(Ljava/lang/String;Ljava/text/ParsePosition;I)Ljava/lang/String;", "GetParseReference_Ljava_lang_String_Ljava_text_ParsePosition_IHandler:Android.Icu.Text.ISymbolTableInvoker, Mono.Android, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null", ApiSince=24)&gt;]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[System.Runtime.Versioning.SupportedOSPlatform("android24.0")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Runtime.Versioning.SupportedOSPlatform("android24.0")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="text" Type="System.String" />
        <Parameter Name="pos" Type="Java.Text.ParsePosition" />
        <Parameter Name="limit" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="text">the text to parse for the name</param>
        <param name="pos">on entry, the index of the first character to parse.
            This is the character following the SYMBOL_REF character.  On
            exit, the index after the last parsed character.  If the parse
            failed, pos is unchanged on exit.</param>
        <param name="limit">the index after the last character to be parsed.</param>
        <summary>Parse a symbol reference name from the given string, starting
            at the given position.</summary>
        <returns>the parsed name, or null if there is no valid symbolic
            name at the given position.</returns>
        <remarks>
          <para>Parse a symbol reference name from the given string, starting
            at the given position.  If no valid symbol reference name is
            found, return null and leave pos unchanged.  That is, if the
            character at pos cannot start a name, or if pos is at or after
            text.length(), then return null.  This indicates an isolated
            SYMBOL_REF character.</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/android/icu/text/SymbolTable#parseReference(java.lang.String,%20java.text.ParsePosition,%20int)" title="Reference documentation">Java documentation for <code>android.icu.text.SymbolTable.parseReference(java.lang.String, java.text.ParsePosition, int)</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="SymbolRef">
      <MemberSignature Language="C#" Value="public const char SymbolRef;" />
      <MemberSignature Language="ILAsm" Value=".field public static literal char SymbolRef" />
      <MemberSignature Language="DocId" Value="F:Android.Icu.Text.ISymbolTable.SymbolRef" />
      <MemberSignature Language="F#" Value="val mutable SymbolRef : char" Usage="Android.Icu.Text.ISymbolTable.SymbolRef" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("SYMBOL_REF", ApiSince=24)]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("SYMBOL_REF", ApiSince=24)&gt;]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[System.Runtime.Versioning.SupportedOSPlatform("android24.0")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Runtime.Versioning.SupportedOSPlatform("android24.0")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Char</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>The character preceding a symbol reference name.</summary>
        <remarks>
          <para>The character preceding a symbol reference name.</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/android/icu/text/SymbolTable#SYMBOL_REF" title="Reference documentation">Java documentation for <code>android.icu.text.SymbolTable.SYMBOL_REF</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>
