<Type Name="Bidi" FullName="Android.Icu.Text.Bidi">
  <TypeSignature Language="C#" Value="public class Bidi : Java.Lang.Object" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit Bidi extends Java.Lang.Object" />
  <TypeSignature Language="DocId" Value="T:Android.Icu.Text.Bidi" />
  <TypeSignature Language="F#" Value="type Bidi = class&#xA;    inherit Object" />
  <AssemblyInfo>
    <AssemblyName>Mono.Android</AssemblyName>
    <AssemblyVersion>0.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>Java.Lang.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName Language="C#">[Android.Runtime.Register("android/icu/text/Bidi", ApiSince=29, DoNotGenerateAcw=true)]</AttributeName>
      <AttributeName Language="F#">[&lt;Android.Runtime.Register("android/icu/text/Bidi", ApiSince=29, DoNotGenerateAcw=true)&gt;]</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName Language="C#">[System.Runtime.CompilerServices.Nullable(0)]</AttributeName>
      <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.Nullable(0)&gt;]</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName Language="C#">[System.Runtime.Versioning.SupportedOSPlatform("android29.0")]</AttributeName>
      <AttributeName Language="F#">[&lt;System.Runtime.Versioning.SupportedOSPlatform("android29.0")&gt;]</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>&lt;h2&gt;Bidi algorithm for ICU&lt;/h2&gt;
            
            This is an implementation of the Unicode Bidirectional Algorithm.</summary>
    <remarks>
      <para>&lt;h2&gt;Bidi algorithm for ICU&lt;/h2&gt;
            
            This is an implementation of the Unicode Bidirectional Algorithm. The
            algorithm is defined in the <see href="https://www.unicode.org/reports/tr9/">Unicode Standard Annex #9</see>.</para>
      <para>Note: Libraries that perform a bidirectional algorithm and reorder strings
            accordingly are sometimes called "Storage Layout Engines". ICU's Bidi and
            shaping (ArabicShaping) classes can be used at the core of such "Storage
            Layout Engines".
            
            &lt;h3&gt;General remarks about the API:&lt;/h3&gt;
            
            The &amp;quot;limit&amp;quot; of a sequence of characters is the position just after
            their last character, i.e., one more than that position.</para>
      <para>Some of the API methods provide access to &amp;quot;runs&amp;quot;. Such a
            &amp;quot;run&amp;quot; is defined as a sequence of characters that are at the same
            embedding level after performing the Bidi algorithm.
            
            &lt;h3&gt;Basic concept: paragraph&lt;/h3&gt;
            A piece of text can be divided into several paragraphs by characters
            with the Bidi class <c>Block Separator</c>. For handling of
            paragraphs, see:
            &lt;ul&gt;
            &lt;li&gt;<c>#countParagraphs</c>&lt;li&gt;<c>#getParaLevel</c>&lt;li&gt;<c>#getParagraph</c>&lt;li&gt;<c>#getParagraphByIndex</c>&lt;/ul&gt;
            
            &lt;h3&gt;Basic concept: text direction&lt;/h3&gt;
            The direction of a piece of text may be:
            &lt;ul&gt;
            &lt;li&gt;<c>#LTR</c>&lt;li&gt;<c>#RTL</c>&lt;li&gt;<c>#MIXED</c>&lt;li&gt;<c>#NEUTRAL</c>&lt;/ul&gt;
            
            &lt;h3&gt;Basic concept: levels&lt;/h3&gt;
            
            Levels in this API represent embedding levels according to the Unicode
            Bidirectional Algorithm.
            Their low-order bit (even/odd value) indicates the visual direction.</para>
      <para>Levels can be abstract values when used for the
            <c>paraLevel</c> and <c>embeddingLevels</c>
            arguments of <c>setPara()</c>; there:
            &lt;ul&gt;
            &lt;li&gt;the high-order bit of an <c>embeddingLevels[]</c>
            value indicates whether the using application is
            specifying the level of a character to <i>override</i> whatever the
            Bidi implementation would resolve it to.&lt;/li&gt;
            &lt;li&gt;<c>paraLevel</c> can be set to the
            pseudo-level values <c>LEVEL_DEFAULT_LTR</c>
            and <c>LEVEL_DEFAULT_RTL</c>.&lt;/li&gt;
            &lt;/ul&gt;</para>
      <para>The related constants are not real, valid level values.
            <c>DEFAULT_XXX</c> can be used to specify
            a default for the paragraph level for
            when the <c>setPara()</c> method
            shall determine it but there is no
            strongly typed character in the input.</para>
      <para>Note that the value for <c>LEVEL_DEFAULT_LTR</c> is even
            and the one for <c>LEVEL_DEFAULT_RTL</c> is odd,
            just like with normal LTR and RTL level values -
            these special values are designed that way. Also, the implementation
            assumes that MAX_EXPLICIT_LEVEL is odd.</para>
      <para>Note: The numeric values of the related constants will not change:
            They are tied to the use of 7-bit byte values (plus the override bit)
            and of the byte data type in this API.</para>
      <para>&lt;b&gt;See Also:&lt;/b&gt;
            &lt;ul&gt;
            &lt;li&gt;<c>#LEVEL_DEFAULT_LTR</c>&lt;li&gt;<c>#LEVEL_DEFAULT_RTL</c>&lt;li&gt;<c>#LEVEL_OVERRIDE</c>&lt;li&gt;<c>#MAX_EXPLICIT_LEVEL</c>&lt;li&gt;<c>#setPara</c>&lt;/ul&gt;
            
            &lt;h3&gt;Basic concept: Reordering Mode&lt;/h3&gt;
            Reordering mode values indicate which variant of the Bidi algorithm to
            use.
            
            &lt;b&gt;See Also:&lt;/b&gt;
            &lt;ul&gt;
            &lt;li&gt;<c>#setReorderingMode</c>&lt;li&gt;<c>#REORDER_DEFAULT</c>&lt;li&gt;<c>#REORDER_NUMBERS_SPECIAL</c>&lt;li&gt;<c>#REORDER_GROUP_NUMBERS_WITH_R</c>&lt;li&gt;<c>#REORDER_RUNS_ONLY</c>&lt;li&gt;<c>#REORDER_INVERSE_NUMBERS_AS_L</c>&lt;li&gt;<c>#REORDER_INVERSE_LIKE_DIRECT</c>&lt;li&gt;<c>#REORDER_INVERSE_FOR_NUMBERS_SPECIAL</c>&lt;/ul&gt;
            
            &lt;h3&gt;Basic concept: Reordering Options&lt;/h3&gt;
            Reordering options can be applied during Bidi text transformations.
            
            &lt;b&gt;See Also:&lt;/b&gt;
            &lt;ul&gt;
            &lt;li&gt;<c>#setReorderingOptions</c>&lt;li&gt;<c>#OPTION_DEFAULT</c>&lt;li&gt;<c>#OPTION_INSERT_MARKS</c>&lt;li&gt;<c>#OPTION_REMOVE_CONTROLS</c>&lt;li&gt;<c>#OPTION_STREAMING</c>&lt;/ul&gt;
            
            &lt;h4&gt; Sample code for the ICU Bidi API &lt;/h4&gt;
            
            &lt;h5&gt;Rendering a paragraph with the ICU Bidi API&lt;/h5&gt;
            
            This is (hypothetical) sample code that illustrates how the ICU Bidi API
            could be used to render a paragraph of text. Rendering code depends highly on
            the graphics system, therefore this sample code must make a lot of
            assumptions, which may or may not match any existing graphics system's
            properties.</para>
      <para>The basic assumptions are:
            
            &lt;ul&gt;
            &lt;li&gt;Rendering is done from left to right on a horizontal line.&lt;/li&gt;
            &lt;li&gt;A run of single-style, unidirectional text can be rendered at once.
            &lt;/li&gt;
            &lt;li&gt;Such a run of text is passed to the graphics system with characters
            (code units) in logical order.&lt;/li&gt;
            &lt;li&gt;The line-breaking algorithm is very complicated and Locale-dependent -
            and therefore its implementation omitted from this sample code.&lt;/li&gt;
            &lt;/ul&gt;</para>
      <code lang="text/java">package android.icu.dev.test.bidi;
            
             import android.icu.text.Bidi;
             import android.icu.text.BidiRun;
            
             public class Sample {
            
                 static final int styleNormal = 0;
                 static final int styleSelected = 1;
                 static final int styleBold = 2;
                 static final int styleItalics = 4;
                 static final int styleSuper=8;
                 static final int styleSub = 16;
            
                 static class StyleRun {
                     int limit;
                     int style;
            
                     public StyleRun(int limit, int style) {
                         this.limit = limit;
                         this.style = style;
                     }
                 }
            
                 static class Bounds {
                     int start;
                     int limit;
            
                     public Bounds(int start, int limit) {
                         this.start = start;
                         this.limit = limit;
                     }
                 }
            
                 static int getTextWidth(String text, int start, int limit,
                                         StyleRun[] styleRuns, int styleRunCount) {
                     // simplistic way to compute the width
                     return limit - start;
                 }
            
                 // set limit and StyleRun limit for a line
                 // from text[start] and from styleRuns[styleRunStart]
                 // using Bidi.getLogicalRun(...)
                 // returns line width
                 static int getLineBreak(String text, Bounds line, Bidi para,
                                         StyleRun styleRuns[], Bounds styleRun) {
                     // dummy return
                     return 0;
                 }
            
                 // render runs on a line sequentially, always from left to right
            
                 // prepare rendering a new line
                 static void startLine(byte textDirection, int lineWidth) {
                     System.out.println();
                 }
            
                 // render a run of text and advance to the right by the run width
                 // the text[start..limit-1] is always in logical order
                 static void renderRun(String text, int start, int limit,
                                       byte textDirection, int style) {
                 }
            
                 // We could compute a cross-product
                 // from the style runs with the directional runs
                 // and then reorder it.
                 // Instead, here we iterate over each run type
                 // and render the intersections -
                 // with shortcuts in simple (and common) cases.
                 // renderParagraph() is the main function.
            
                 // render a directional run with
                 // (possibly) multiple style runs intersecting with it
                 static void renderDirectionalRun(String text, int start, int limit,
                                                  byte direction, StyleRun styleRuns[],
                                                  int styleRunCount) {
                     int i;
            
                     // iterate over style runs
                     if (direction == Bidi.LTR) {
                         int styleLimit;
                         for (i = 0; i &amp;lt; styleRunCount; ++i) {
                             styleLimit = styleRuns[i].limit;
                             if (start &amp;lt; styleLimit) {
                                 if (styleLimit &amp;gt; limit) {
                                     styleLimit = limit;
                                 }
                                 renderRun(text, start, styleLimit,
                                           direction, styleRuns[i].style);
                                 if (styleLimit == limit) {
                                     break;
                                 }
                                 start = styleLimit;
                             }
                         }
                     } else {
                         int styleStart;
            
                         for (i = styleRunCount-1; i &amp;gt;= 0; --i) {
                             if (i &amp;gt; 0) {
                                 styleStart = styleRuns[i-1].limit;
                             } else {
                                 styleStart = 0;
                             }
                             if (limit &amp;gt;= styleStart) {
                                 if (styleStart &amp;lt; start) {
                                     styleStart = start;
                                 }
                                 renderRun(text, styleStart, limit, direction,
                                           styleRuns[i].style);
                                 if (styleStart == start) {
                                     break;
                                 }
                                 limit = styleStart;
                             }
                         }
                     }
                 }
            
                 // the line object represents text[start..limit-1]
                 static void renderLine(Bidi line, String text, int start, int limit,
                                        StyleRun styleRuns[], int styleRunCount) {
                     byte direction = line.getDirection();
                     if (direction != Bidi.MIXED) {
                         // unidirectional
                         if (styleRunCount &amp;lt;= 1) {
                             renderRun(text, start, limit, direction, styleRuns[0].style);
                         } else {
                             renderDirectionalRun(text, start, limit, direction,
                                                  styleRuns, styleRunCount);
                         }
                     } else {
                         // mixed-directional
                         int count, i;
                         BidiRun run;
            
                         try {
                             count = line.countRuns();
                         } catch (IllegalStateException e) {
                             e.printStackTrace();
                             return;
                         }
                         if (styleRunCount &amp;lt;= 1) {
                             int style = styleRuns[0].style;
            
                             // iterate over directional runs
                             for (i = 0; i &amp;lt; count; ++i) {
                                 run = line.getVisualRun(i);
                                 renderRun(text, run.getStart(), run.getLimit(),
                                           run.getDirection(), style);
                             }
                         } else {
                             // iterate over both directional and style runs
                             for (i = 0; i &amp;lt; count; ++i) {
                                 run = line.getVisualRun(i);
                                 renderDirectionalRun(text, run.getStart(),
                                                      run.getLimit(), run.getDirection(),
                                                      styleRuns, styleRunCount);
                             }
                         }
                     }
                 }
            
                 static void renderParagraph(String text, byte textDirection,
                                             StyleRun styleRuns[], int styleRunCount,
                                             int lineWidth) {
                     int length = text.length();
                     Bidi para = new Bidi();
                     try {
                         para.setPara(text,
                                      textDirection != 0 ? Bidi.LEVEL_DEFAULT_RTL
                                                         : Bidi.LEVEL_DEFAULT_LTR,
                                      null);
                     } catch (Exception e) {
                         e.printStackTrace();
                         return;
                     }
                     byte paraLevel = (byte)(1 &amp;amp; para.getParaLevel());
                     StyleRun styleRun = new StyleRun(length, styleNormal);
            
                     if (styleRuns == null || styleRunCount &amp;lt;= 0) {
                         styleRuns = new StyleRun[1];
                         styleRunCount = 1;
                         styleRuns[0] = styleRun;
                     }
                     // assume styleRuns[styleRunCount-1].limit&amp;gt;=length
            
                     int width = getTextWidth(text, 0, length, styleRuns, styleRunCount);
                     if (width &amp;lt;= lineWidth) {
                         // everything fits onto one line
            
                         // prepare rendering a new line from either left or right
                         startLine(paraLevel, width);
            
                         renderLine(para, text, 0, length, styleRuns, styleRunCount);
                     } else {
                         // we need to render several lines
                         Bidi line = new Bidi(length, 0);
                         int start = 0, limit;
                         int styleRunStart = 0, styleRunLimit;
            
                         for (;;) {
                             limit = length;
                             styleRunLimit = styleRunCount;
                             width = getLineBreak(text, new Bounds(start, limit),
                                                  para, styleRuns,
                                                  new Bounds(styleRunStart, styleRunLimit));
                             try {
                                 line = para.setLine(start, limit);
                             } catch (Exception e) {
                                 e.printStackTrace();
                                 return;
                             }
                             // prepare rendering a new line
                             // from either left or right
                             startLine(paraLevel, width);
            
                             if (styleRunStart &amp;gt; 0) {
                                 int newRunCount = styleRuns.length - styleRunStart;
                                 StyleRun[] newRuns = new StyleRun[newRunCount];
                                 System.arraycopy(styleRuns, styleRunStart, newRuns, 0,
                                                  newRunCount);
                                 renderLine(line, text, start, limit, newRuns,
                                            styleRunLimit - styleRunStart);
                             } else {
                                 renderLine(line, text, start, limit, styleRuns,
                                            styleRunLimit - styleRunStart);
                             }
                             if (limit == length) {
                                 break;
                             }
                             start = limit;
                             styleRunStart = styleRunLimit - 1;
                             if (start &amp;gt;= styleRuns[styleRunStart].limit) {
                                 ++styleRunStart;
                             }
                         }
                     }
                 }
            
                 public static void main(String[] args)
                 {
                     renderParagraph("Some Latin text...", Bidi.LTR, null, 0, 80);
                     renderParagraph("Some Hebrew text...", Bidi.RTL, null, 0, 60);
                 }
             }
            
            </code>
      <para>
        <format type="text/html">
          <a href="https://developer.android.com/reference/android/icu/text/Bidi" title="Reference documentation">Java documentation for <code>android.icu.text.Bidi</code>.</a>
        </format>
      </para>
      <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public Bidi ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:Android.Icu.Text.Bidi.#ctor" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register(".ctor", "()V", "", ApiSince=29)]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register(".ctor", "()V", "", ApiSince=29)&gt;]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[System.Runtime.Versioning.SupportedOSPlatform("android29.0")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Runtime.Versioning.SupportedOSPlatform("android29.0")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters />
      <Docs>
        <summary>Allocate a <c>Bidi</c> object.</summary>
        <remarks>
          <para>Allocate a <c>Bidi</c> object.
            Such an object is initially empty. It is assigned
            the Bidi properties of a piece of text containing one or more paragraphs
            by <c>setPara()</c>
            or the Bidi properties of a line within a paragraph by
            <c>setLine()</c>.</para>
          <para>This object can be reused.</para>
          <para>
            <c>setPara()</c> and <c>setLine()</c> will allocate
            additional memory for internal structures as necessary.</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/android/icu/text/Bidi#Bidi()" title="Reference documentation">Java documentation for <code>android.icu.text.Bidi.Bidi()</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public Bidi (Java.Text.IAttributedCharacterIterator? paragraph);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class Java.Text.IAttributedCharacterIterator paragraph) cil managed" />
      <MemberSignature Language="DocId" Value="M:Android.Icu.Text.Bidi.#ctor(Java.Text.IAttributedCharacterIterator)" />
      <MemberSignature Language="F#" Value="new Android.Icu.Text.Bidi : Java.Text.IAttributedCharacterIterator -&gt; Android.Icu.Text.Bidi" Usage="new Android.Icu.Text.Bidi paragraph" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register(".ctor", "(Ljava/text/AttributedCharacterIterator;)V", "", ApiSince=29)]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register(".ctor", "(Ljava/text/AttributedCharacterIterator;)V", "", ApiSince=29)&gt;]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[System.Runtime.Versioning.SupportedOSPlatform("android29.0")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Runtime.Versioning.SupportedOSPlatform("android29.0")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="paragraph" Type="Java.Text.IAttributedCharacterIterator" />
      </Parameters>
      <Docs>
        <param name="paragraph">a paragraph of text with optional character and
                   paragraph attribute information</param>
        <summary>Create Bidi from the given paragraph of text.</summary>
        <remarks>
          <para>Create Bidi from the given paragraph of text.</para>
          <para>The RUN_DIRECTION attribute in the text, if present, determines the base
            direction (left-to-right or right-to-left). If not present, the base
            direction is computed using the Unicode Bidirectional Algorithm,
            defaulting to left-to-right if there are no strong directional characters
            in the text. This attribute, if present, must be applied to all the text
            in the paragraph.</para>
          <para>The BIDI_EMBEDDING attribute in the text, if present, represents
            embedding level information.
            Negative values indicate overrides at the absolute value of the level.
            Positive values indicate embeddings. (See <c>#MAX_EXPLICIT_LEVEL</c>.)
            Where values are zero or not defined, the base
            embedding level as determined by the base direction is assumed.</para>
          <para>The NUMERIC_SHAPING attribute in the text, if present, converts European
            digits to other decimal digits before running the bidi algorithm. This
            attribute, if present, must be applied to all the text in the paragraph.</para>
          <para>Note: this constructor calls setPara() internally.</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/android/icu/text/Bidi#Bidi(java.text.AttributedCharacterIterator)" title="Reference documentation">Java documentation for <code>android.icu.text.Bidi.Bidi(java.text.AttributedCharacterIterator)</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public Bidi (int maxLength, int maxRunCount);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(int32 maxLength, int32 maxRunCount) cil managed" />
      <MemberSignature Language="DocId" Value="M:Android.Icu.Text.Bidi.#ctor(System.Int32,System.Int32)" />
      <MemberSignature Language="F#" Value="new Android.Icu.Text.Bidi : int * int -&gt; Android.Icu.Text.Bidi" Usage="new Android.Icu.Text.Bidi (maxLength, maxRunCount)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register(".ctor", "(II)V", "", ApiSince=29)]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register(".ctor", "(II)V", "", ApiSince=29)&gt;]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[System.Runtime.Versioning.SupportedOSPlatform("android29.0")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Runtime.Versioning.SupportedOSPlatform("android29.0")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="maxLength" Type="System.Int32" />
        <Parameter Name="maxRunCount" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="maxLength">is the maximum text or line length that internal memory
                   will be preallocated for. An attempt to associate this object with a
                   longer text will fail, unless this value is 0, which leaves the allocation
                   up to the implementation.</param>
        <param name="maxRunCount">is the maximum anticipated number of same-level runs
                   that internal memory will be preallocated for. An attempt to access
                   visual runs on an object that was not preallocated for as many runs
                   as the text was actually resolved to will fail,
                   unless this value is 0, which leaves the allocation up to the implementation.&lt;br&gt;&lt;br&gt;
                   The number of runs depends on the actual text and maybe anywhere between
                   1 and <c>maxLength</c>. It is typically small.</param>
        <summary>Allocate a <c>Bidi</c> object with preallocated memory
            for internal structures.</summary>
        <remarks>
          <para>Allocate a <c>Bidi</c> object with preallocated memory
            for internal structures.
            This method provides a <c>Bidi</c> object like the default constructor
            but it also preallocates memory for internal structures
            according to the sizings supplied by the caller.</para>
          <para>The preallocation can be limited to some of the internal memory
            by setting some values to 0 here. That means that if, e.g.,
            <c>maxRunCount</c> cannot be reasonably predetermined and should not
            be set to <c>maxLength</c> (the only failproof value) to avoid
            wasting  memory, then <c>maxRunCount</c> could be set to 0 here
            and the internal structures that are associated with it will be allocated
            on demand, just like with the default constructor.</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/android/icu/text/Bidi#Bidi(int,%20int)" title="Reference documentation">Java documentation for <code>android.icu.text.Bidi.Bidi(int, int)</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected Bidi (IntPtr javaReference, Android.Runtime.JniHandleOwnership transfer);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor(native int javaReference, valuetype Android.Runtime.JniHandleOwnership transfer) cil managed" />
      <MemberSignature Language="DocId" Value="M:Android.Icu.Text.Bidi.#ctor(System.IntPtr,Android.Runtime.JniHandleOwnership)" />
      <MemberSignature Language="F#" Value="new Android.Icu.Text.Bidi : nativeint * Android.Runtime.JniHandleOwnership -&gt; Android.Icu.Text.Bidi" Usage="new Android.Icu.Text.Bidi (javaReference, transfer)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="javaReference" Type="System.IntPtr" />
        <Parameter Name="transfer" Type="Android.Runtime.JniHandleOwnership" />
      </Parameters>
      <Docs>
        <param name="javaReference">To be added.</param>
        <param name="transfer">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public Bidi (string? paragraph, Android.Icu.Text.BidiOptions flags);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string paragraph, valuetype Android.Icu.Text.BidiOptions flags) cil managed" />
      <MemberSignature Language="DocId" Value="M:Android.Icu.Text.Bidi.#ctor(System.String,Android.Icu.Text.BidiOptions)" />
      <MemberSignature Language="F#" Value="new Android.Icu.Text.Bidi : string * Android.Icu.Text.BidiOptions -&gt; Android.Icu.Text.Bidi" Usage="new Android.Icu.Text.Bidi (paragraph, flags)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register(".ctor", "(Ljava/lang/String;I)V", "", ApiSince=29)]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register(".ctor", "(Ljava/lang/String;I)V", "", ApiSince=29)&gt;]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[System.Runtime.Versioning.SupportedOSPlatform("android29.0")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Runtime.Versioning.SupportedOSPlatform("android29.0")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="paragraph" Type="System.String" />
        <Parameter Name="flags" Type="Android.Icu.Text.BidiOptions">
          <Attributes>
            <Attribute>
              <AttributeName Language="C#">[Android.Runtime.GeneratedEnum]</AttributeName>
              <AttributeName Language="F#">[&lt;Android.Runtime.GeneratedEnum&gt;]</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="paragraph">a paragraph of text</param>
        <param name="flags">a collection of flags that control the algorithm. The
                   algorithm understands the flags DIRECTION_LEFT_TO_RIGHT,
                   DIRECTION_RIGHT_TO_LEFT, DIRECTION_DEFAULT_LEFT_TO_RIGHT, and
                   DIRECTION_DEFAULT_RIGHT_TO_LEFT. Other values are reserved.</param>
        <summary>Create Bidi from the given paragraph of text and base direction.</summary>
        <remarks>
          <para>Create Bidi from the given paragraph of text and base direction.</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/android/icu/text/Bidi#Bidi(java.lang.String,%20int)" title="Reference documentation">Java documentation for <code>android.icu.text.Bidi.Bidi(java.lang.String, int)</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public Bidi (char[]? text, int textStart, byte[]? embeddings, int embStart, int paragraphLength, Android.Icu.Text.BidiOptions flags);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(char[] text, int32 textStart, unsigned int8[] embeddings, int32 embStart, int32 paragraphLength, valuetype Android.Icu.Text.BidiOptions flags) cil managed" />
      <MemberSignature Language="DocId" Value="M:Android.Icu.Text.Bidi.#ctor(System.Char[],System.Int32,System.Byte[],System.Int32,System.Int32,Android.Icu.Text.BidiOptions)" />
      <MemberSignature Language="F#" Value="new Android.Icu.Text.Bidi : char[] * int * byte[] * int * int * Android.Icu.Text.BidiOptions -&gt; Android.Icu.Text.Bidi" Usage="new Android.Icu.Text.Bidi (text, textStart, embeddings, embStart, paragraphLength, flags)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register(".ctor", "([CI[BIII)V", "", ApiSince=29)]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register(".ctor", "([CI[BIII)V", "", ApiSince=29)&gt;]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[System.Runtime.Versioning.SupportedOSPlatform("android29.0")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Runtime.Versioning.SupportedOSPlatform("android29.0")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="text" Type="System.Char[]" />
        <Parameter Name="textStart" Type="System.Int32" />
        <Parameter Name="embeddings" Type="System.Byte[]" />
        <Parameter Name="embStart" Type="System.Int32" />
        <Parameter Name="paragraphLength" Type="System.Int32" />
        <Parameter Name="flags" Type="Android.Icu.Text.BidiOptions">
          <Attributes>
            <Attribute>
              <AttributeName Language="C#">[Android.Runtime.GeneratedEnum]</AttributeName>
              <AttributeName Language="F#">[&lt;Android.Runtime.GeneratedEnum&gt;]</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="text">an array containing the paragraph of text to process.</param>
        <param name="textStart">the index into the text array of the start of the
                   paragraph.</param>
        <param name="embeddings">an array containing embedding values for each character
                   in the paragraph. This can be null, in which case it is assumed
                   that there is no external embedding information.</param>
        <param name="embStart">the index into the embedding array of the start of the
                   paragraph.</param>
        <param name="paragraphLength">the length of the paragraph in the text and
                   embeddings arrays.</param>
        <param name="flags">a collection of flags that control the algorithm. The
                   algorithm understands the flags DIRECTION_LEFT_TO_RIGHT,
                   DIRECTION_RIGHT_TO_LEFT, DIRECTION_DEFAULT_LEFT_TO_RIGHT, and
                   DIRECTION_DEFAULT_RIGHT_TO_LEFT. Other values are reserved.</param>
        <summary>Create Bidi from the given text, embedding, and direction information.</summary>
        <remarks>
          <para>Create Bidi from the given text, embedding, and direction information.</para>
          <para>The embeddings array may be null. If present, the values represent
            embedding level information.
            Negative values indicate overrides at the absolute value of the level.
            Positive values indicate embeddings. (See <c>#MAX_EXPLICIT_LEVEL</c>.)
            Where values are zero, the base embedding level
            as determined by the base direction is assumed,
            except for paragraph separators which remain at 0 to prevent reordering of paragraphs.</para>
          <para>Note: This constructor calls setPara() internally,
            after converting the java.text.Bidi-style embeddings with negative overrides
            into ICU-style embeddings with bit fields for <c>#LEVEL_OVERRIDE</c> and the level.</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/android/icu/text/Bidi#Bidi(char[],%20int,%20byte[],%20int,%20int,%20int)" title="Reference documentation">Java documentation for <code>android.icu.text.Bidi.Bidi(char[], int, byte[], int, int, int)</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="BaseIsLeftToRight">
      <MemberSignature Language="C#" Value="public virtual bool BaseIsLeftToRight ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool BaseIsLeftToRight() cil managed" />
      <MemberSignature Language="DocId" Value="M:Android.Icu.Text.Bidi.BaseIsLeftToRight" />
      <MemberSignature Language="F#" Value="abstract member BaseIsLeftToRight : unit -&gt; bool&#xA;override this.BaseIsLeftToRight : unit -&gt; bool" Usage="bidi.BaseIsLeftToRight " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("baseIsLeftToRight", "()Z", "GetBaseIsLeftToRightHandler", ApiSince=29)]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("baseIsLeftToRight", "()Z", "GetBaseIsLeftToRightHandler", ApiSince=29)&gt;]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[System.Runtime.Versioning.SupportedOSPlatform("android29.0")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Runtime.Versioning.SupportedOSPlatform("android29.0")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Return true if the base direction is left-to-right</summary>
        <returns>true if the base direction is left-to-right</returns>
        <remarks>
          <para>Return true if the base direction is left-to-right</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/android/icu/text/Bidi#baseIsLeftToRight()" title="Reference documentation">Java documentation for <code>android.icu.text.Bidi.baseIsLeftToRight()</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="BaseLevel">
      <MemberSignature Language="C#" Value="public virtual int BaseLevel { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 BaseLevel" />
      <MemberSignature Language="DocId" Value="P:Android.Icu.Text.Bidi.BaseLevel" />
      <MemberSignature Language="F#" Value="member this.BaseLevel : int" Usage="Android.Icu.Text.Bidi.BaseLevel" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[System.Runtime.Versioning.SupportedOSPlatform("android29.0")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Runtime.Versioning.SupportedOSPlatform("android29.0")&gt;]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[get: Android.Runtime.Register("getBaseLevel", "()I", "GetGetBaseLevelHandler", ApiSince=29)]</AttributeName>
          <AttributeName Language="F#">[&lt;get: Android.Runtime.Register("getBaseLevel", "()I", "GetGetBaseLevelHandler", ApiSince=29)&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Return the base level (0 if left-to-right, 1 if right-to-left).</summary>
        <value>the base level</value>
        <remarks>
          <para>Return the base level (0 if left-to-right, 1 if right-to-left).</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/android/icu/text/Bidi#getBaseLevel()" title="Reference documentation">Java documentation for <code>android.icu.text.Bidi.getBaseLevel()</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="CountParagraphs">
      <MemberSignature Language="C#" Value="public virtual int CountParagraphs ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance int32 CountParagraphs() cil managed" />
      <MemberSignature Language="DocId" Value="M:Android.Icu.Text.Bidi.CountParagraphs" />
      <MemberSignature Language="F#" Value="abstract member CountParagraphs : unit -&gt; int&#xA;override this.CountParagraphs : unit -&gt; int" Usage="bidi.CountParagraphs " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("countParagraphs", "()I", "GetCountParagraphsHandler", ApiSince=29)]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("countParagraphs", "()I", "GetCountParagraphsHandler", ApiSince=29)&gt;]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[System.Runtime.Versioning.SupportedOSPlatform("android29.0")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Runtime.Versioning.SupportedOSPlatform("android29.0")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Get the number of paragraphs.</summary>
        <returns>The number of paragraphs.</returns>
        <remarks>
          <para>Get the number of paragraphs.</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/android/icu/text/Bidi#countParagraphs()" title="Reference documentation">Java documentation for <code>android.icu.text.Bidi.countParagraphs()</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="CountRuns">
      <MemberSignature Language="C#" Value="public virtual int CountRuns ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance int32 CountRuns() cil managed" />
      <MemberSignature Language="DocId" Value="M:Android.Icu.Text.Bidi.CountRuns" />
      <MemberSignature Language="F#" Value="abstract member CountRuns : unit -&gt; int&#xA;override this.CountRuns : unit -&gt; int" Usage="bidi.CountRuns " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("countRuns", "()I", "GetCountRunsHandler", ApiSince=29)]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("countRuns", "()I", "GetCountRunsHandler", ApiSince=29)&gt;]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[System.Runtime.Versioning.SupportedOSPlatform("android29.0")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Runtime.Versioning.SupportedOSPlatform("android29.0")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Get the number of runs.</summary>
        <returns>The number of runs.</returns>
        <remarks>
          <para>Get the number of runs.
            This method may invoke the actual reordering on the
            <c>Bidi</c> object, after <c>setPara()</c>
            may have resolved only the levels of the text. Therefore,
            <c>countRuns()</c> may have to allocate memory,
            and may throw an exception if it fails to do so.</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/android/icu/text/Bidi#countRuns()" title="Reference documentation">Java documentation for <code>android.icu.text.Bidi.countRuns()</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="CreateLineBidi">
      <MemberSignature Language="C#" Value="public virtual Android.Icu.Text.Bidi? CreateLineBidi (int lineStart, int lineLimit);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Android.Icu.Text.Bidi CreateLineBidi(int32 lineStart, int32 lineLimit) cil managed" />
      <MemberSignature Language="DocId" Value="M:Android.Icu.Text.Bidi.CreateLineBidi(System.Int32,System.Int32)" />
      <MemberSignature Language="F#" Value="abstract member CreateLineBidi : int * int -&gt; Android.Icu.Text.Bidi&#xA;override this.CreateLineBidi : int * int -&gt; Android.Icu.Text.Bidi" Usage="bidi.CreateLineBidi (lineStart, lineLimit)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("createLineBidi", "(II)Landroid/icu/text/Bidi;", "GetCreateLineBidi_IIHandler", ApiSince=29)]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("createLineBidi", "(II)Landroid/icu/text/Bidi;", "GetCreateLineBidi_IIHandler", ApiSince=29)&gt;]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[System.Runtime.Versioning.SupportedOSPlatform("android29.0")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Runtime.Versioning.SupportedOSPlatform("android29.0")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Android.Icu.Text.Bidi</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="lineStart" Type="System.Int32" />
        <Parameter Name="lineLimit" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="lineStart">the offset from the start of the paragraph to the start
                   of the line.</param>
        <param name="lineLimit">the offset from the start of the paragraph to the limit
                   of the line.</param>
        <summary>Create a Bidi object representing the bidi information on a line of text
            within the paragraph represented by the current Bidi.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para>Create a Bidi object representing the bidi information on a line of text
            within the paragraph represented by the current Bidi. This call is not
            required if the entire paragraph fits on one line.</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/android/icu/text/Bidi#createLineBidi(int,%20int)" title="Reference documentation">Java documentation for <code>android.icu.text.Bidi.createLineBidi(int, int)</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="CustomClassifier">
      <MemberSignature Language="C#" Value="public virtual Android.Icu.Text.BidiClassifier? CustomClassifier { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Android.Icu.Text.BidiClassifier CustomClassifier" />
      <MemberSignature Language="DocId" Value="P:Android.Icu.Text.Bidi.CustomClassifier" />
      <MemberSignature Language="F#" Value="member this.CustomClassifier : Android.Icu.Text.BidiClassifier with get, set" Usage="Android.Icu.Text.Bidi.CustomClassifier" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[System.Runtime.Versioning.SupportedOSPlatform("android29.0")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Runtime.Versioning.SupportedOSPlatform("android29.0")&gt;]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[get: Android.Runtime.Register("getCustomClassifier", "()Landroid/icu/text/BidiClassifier;", "GetGetCustomClassifierHandler", ApiSince=29)]</AttributeName>
          <AttributeName Language="F#">[&lt;get: Android.Runtime.Register("getCustomClassifier", "()Landroid/icu/text/BidiClassifier;", "GetGetCustomClassifierHandler", ApiSince=29)&gt;]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[set: Android.Runtime.Register("setCustomClassifier", "(Landroid/icu/text/BidiClassifier;)V", "GetSetCustomClassifier_Landroid_icu_text_BidiClassifier_Handler", ApiSince=29)]</AttributeName>
          <AttributeName Language="F#">[&lt;set: Android.Runtime.Register("setCustomClassifier", "(Landroid/icu/text/BidiClassifier;)V", "GetSetCustomClassifier_Landroid_icu_text_BidiClassifier_Handler", ApiSince=29)&gt;]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[set: System.Runtime.Versioning.SupportedOSPlatform("android29.0")]</AttributeName>
          <AttributeName Language="F#">[&lt;set: System.Runtime.Versioning.SupportedOSPlatform("android29.0")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Android.Icu.Text.BidiClassifier</ReturnType>
      </ReturnValue>
      <Docs>
        <param name="classifier">A new custom classifier. This can be null.</param>
        <summary>Gets the current custom class classifier used for Bidi class
            determination. -or- Set a custom Bidi classifier used by the UBA implementation for Bidi
            class determination.</summary>
        <value>An instance of class <c>BidiClassifier</c></value>
        <remarks>
          <para>Property getter documentation:</para>
          <para>Gets the current custom class classifier used for Bidi class
            determination.</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/android/icu/text/Bidi#getCustomClassifier()" title="Reference documentation">Java documentation for <code>android.icu.text.Bidi.getCustomClassifier()</code>.</a>
            </format>
          </para>
          <para>Property setter documentation:</para>
          <para>Set a custom Bidi classifier used by the UBA implementation for Bidi
            class determination.</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/android/icu/text/Bidi#setCustomClassifier(android.icu.text.BidiClassifier)" title="Reference documentation">Java documentation for <code>android.icu.text.Bidi.setCustomClassifier(android.icu.text.BidiClassifier)</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Direction">
      <MemberSignature Language="C#" Value="public virtual sbyte Direction { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int8 Direction" />
      <MemberSignature Language="DocId" Value="P:Android.Icu.Text.Bidi.Direction" />
      <MemberSignature Language="F#" Value="member this.Direction : sbyte" Usage="Android.Icu.Text.Bidi.Direction" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[System.Runtime.Versioning.SupportedOSPlatform("android29.0")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Runtime.Versioning.SupportedOSPlatform("android29.0")&gt;]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[get: Android.Runtime.Register("getDirection", "()B", "GetGetDirectionHandler", ApiSince=29)]</AttributeName>
          <AttributeName Language="F#">[&lt;get: Android.Runtime.Register("getDirection", "()B", "GetGetDirectionHandler", ApiSince=29)&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.SByte</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Get the directionality of the text.</summary>
        <value>a value of <c>LTR</c>, <c>RTL</c> or <c>MIXED</c>
                    that indicates if the entire text
                    represented by this object is unidirectional,
                    and which direction, or if it is mixed-directional.</value>
        <remarks>
          <para>Get the directionality of the text.</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/android/icu/text/Bidi#getDirection()" title="Reference documentation">Java documentation for <code>android.icu.text.Bidi.getDirection()</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="DirectionDefaultLeftToRight">
      <MemberSignature Language="C#" Value="public const Android.Icu.Text.BidiOptions DirectionDefaultLeftToRight = 126;" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype Android.Icu.Text.BidiOptions DirectionDefaultLeftToRight = (126)" />
      <MemberSignature Language="DocId" Value="F:Android.Icu.Text.Bidi.DirectionDefaultLeftToRight" />
      <MemberSignature Language="F#" Value="val mutable DirectionDefaultLeftToRight : Android.Icu.Text.BidiOptions" Usage="Android.Icu.Text.Bidi.DirectionDefaultLeftToRight" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("DIRECTION_DEFAULT_LEFT_TO_RIGHT", ApiSince=29)]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("DIRECTION_DEFAULT_LEFT_TO_RIGHT", ApiSince=29)&gt;]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[System.Obsolete("This constant will be removed in the future version. Use Android.Icu.Text.BidiOptions enum directly instead of this field.", true)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Obsolete("This constant will be removed in the future version. Use Android.Icu.Text.BidiOptions enum directly instead of this field.", true)&gt;]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[System.Runtime.Versioning.SupportedOSPlatform("android29.0")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Runtime.Versioning.SupportedOSPlatform("android29.0")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Android.Icu.Text.BidiOptions</ReturnType>
      </ReturnValue>
      <MemberValue>126</MemberValue>
      <Docs>
        <summary>Constant indicating that the base direction depends on the first strong
            directional character in the text according to the Unicode Bidirectional
            Algorithm.</summary>
        <remarks>
          <para>Constant indicating that the base direction depends on the first strong
            directional character in the text according to the Unicode Bidirectional
            Algorithm. If no strong directional character is present, the base
            direction is left-to-right.</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/android/icu/text/Bidi#DIRECTION_DEFAULT_LEFT_TO_RIGHT" title="Reference documentation">Java documentation for <code>android.icu.text.Bidi.DIRECTION_DEFAULT_LEFT_TO_RIGHT</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="DirectionDefaultRightToLeft">
      <MemberSignature Language="C#" Value="public const Android.Icu.Text.BidiOptions DirectionDefaultRightToLeft = 127;" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype Android.Icu.Text.BidiOptions DirectionDefaultRightToLeft = (127)" />
      <MemberSignature Language="DocId" Value="F:Android.Icu.Text.Bidi.DirectionDefaultRightToLeft" />
      <MemberSignature Language="F#" Value="val mutable DirectionDefaultRightToLeft : Android.Icu.Text.BidiOptions" Usage="Android.Icu.Text.Bidi.DirectionDefaultRightToLeft" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("DIRECTION_DEFAULT_RIGHT_TO_LEFT", ApiSince=29)]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("DIRECTION_DEFAULT_RIGHT_TO_LEFT", ApiSince=29)&gt;]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[System.Obsolete("This constant will be removed in the future version. Use Android.Icu.Text.BidiOptions enum directly instead of this field.", true)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Obsolete("This constant will be removed in the future version. Use Android.Icu.Text.BidiOptions enum directly instead of this field.", true)&gt;]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[System.Runtime.Versioning.SupportedOSPlatform("android29.0")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Runtime.Versioning.SupportedOSPlatform("android29.0")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Android.Icu.Text.BidiOptions</ReturnType>
      </ReturnValue>
      <MemberValue>127</MemberValue>
      <Docs>
        <summary>Constant indicating that the base direction depends on the first strong
            directional character in the text according to the Unicode Bidirectional
            Algorithm.</summary>
        <remarks>
          <para>Constant indicating that the base direction depends on the first strong
            directional character in the text according to the Unicode Bidirectional
            Algorithm. If no strong directional character is present, the base
            direction is right-to-left.</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/android/icu/text/Bidi#DIRECTION_DEFAULT_RIGHT_TO_LEFT" title="Reference documentation">Java documentation for <code>android.icu.text.Bidi.DIRECTION_DEFAULT_RIGHT_TO_LEFT</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="DirectionLeftToRight">
      <MemberSignature Language="C#" Value="public const Android.Icu.Text.BidiOptions DirectionLeftToRight = 0;" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype Android.Icu.Text.BidiOptions DirectionLeftToRight = (0)" />
      <MemberSignature Language="DocId" Value="F:Android.Icu.Text.Bidi.DirectionLeftToRight" />
      <MemberSignature Language="F#" Value="val mutable DirectionLeftToRight : Android.Icu.Text.BidiOptions" Usage="Android.Icu.Text.Bidi.DirectionLeftToRight" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("DIRECTION_LEFT_TO_RIGHT", ApiSince=29)]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("DIRECTION_LEFT_TO_RIGHT", ApiSince=29)&gt;]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[System.Obsolete("This constant will be removed in the future version. Use Android.Icu.Text.BidiOptions enum directly instead of this field.", true)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Obsolete("This constant will be removed in the future version. Use Android.Icu.Text.BidiOptions enum directly instead of this field.", true)&gt;]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[System.Runtime.Versioning.SupportedOSPlatform("android29.0")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Runtime.Versioning.SupportedOSPlatform("android29.0")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Android.Icu.Text.BidiOptions</ReturnType>
      </ReturnValue>
      <MemberValue>0</MemberValue>
      <Docs>
        <summary>Constant indicating base direction is left-to-right.</summary>
        <remarks>
          <para>Constant indicating base direction is left-to-right.</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/android/icu/text/Bidi#DIRECTION_LEFT_TO_RIGHT" title="Reference documentation">Java documentation for <code>android.icu.text.Bidi.DIRECTION_LEFT_TO_RIGHT</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="DirectionRightToLeft">
      <MemberSignature Language="C#" Value="public const Android.Icu.Text.BidiOptions DirectionRightToLeft = 1;" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype Android.Icu.Text.BidiOptions DirectionRightToLeft = (1)" />
      <MemberSignature Language="DocId" Value="F:Android.Icu.Text.Bidi.DirectionRightToLeft" />
      <MemberSignature Language="F#" Value="val mutable DirectionRightToLeft : Android.Icu.Text.BidiOptions" Usage="Android.Icu.Text.Bidi.DirectionRightToLeft" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("DIRECTION_RIGHT_TO_LEFT", ApiSince=29)]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("DIRECTION_RIGHT_TO_LEFT", ApiSince=29)&gt;]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[System.Obsolete("This constant will be removed in the future version. Use Android.Icu.Text.BidiOptions enum directly instead of this field.", true)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Obsolete("This constant will be removed in the future version. Use Android.Icu.Text.BidiOptions enum directly instead of this field.", true)&gt;]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[System.Runtime.Versioning.SupportedOSPlatform("android29.0")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Runtime.Versioning.SupportedOSPlatform("android29.0")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Android.Icu.Text.BidiOptions</ReturnType>
      </ReturnValue>
      <MemberValue>1</MemberValue>
      <Docs>
        <summary>Constant indicating base direction is right-to-left.</summary>
        <remarks>
          <para>Constant indicating base direction is right-to-left.</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/android/icu/text/Bidi#DIRECTION_RIGHT_TO_LEFT" title="Reference documentation">Java documentation for <code>android.icu.text.Bidi.DIRECTION_RIGHT_TO_LEFT</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="DoMirroring">
      <MemberSignature Language="C#" Value="public const short DoMirroring = 2;" />
      <MemberSignature Language="ILAsm" Value=".field public static literal int16 DoMirroring = (2)" />
      <MemberSignature Language="DocId" Value="F:Android.Icu.Text.Bidi.DoMirroring" />
      <MemberSignature Language="F#" Value="val mutable DoMirroring : int16" Usage="Android.Icu.Text.Bidi.DoMirroring" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("DO_MIRRORING", ApiSince=29)]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("DO_MIRRORING", ApiSince=29)&gt;]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[System.Runtime.Versioning.SupportedOSPlatform("android29.0")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Runtime.Versioning.SupportedOSPlatform("android29.0")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int16</ReturnType>
      </ReturnValue>
      <MemberValue>2</MemberValue>
      <Docs>
        <summary>option bit for writeReordered():
            replace characters with the "mirrored" property in RTL runs
            by their mirror-image mappings</summary>
        <remarks>
          <para>option bit for writeReordered():
            replace characters with the "mirrored" property in RTL runs
            by their mirror-image mappings</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/android/icu/text/Bidi#DO_MIRRORING" title="Reference documentation">Java documentation for <code>android.icu.text.Bidi.DO_MIRRORING</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetBaseDirection">
      <MemberSignature Language="C#" Value="public static sbyte GetBaseDirection (Java.Lang.ICharSequence? paragraph);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int8 GetBaseDirection(class Java.Lang.ICharSequence paragraph) cil managed" />
      <MemberSignature Language="DocId" Value="M:Android.Icu.Text.Bidi.GetBaseDirection(Java.Lang.ICharSequence)" />
      <MemberSignature Language="F#" Value="static member GetBaseDirection : Java.Lang.ICharSequence -&gt; sbyte" Usage="Android.Icu.Text.Bidi.GetBaseDirection paragraph" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("getBaseDirection", "(Ljava/lang/CharSequence;)B", "", ApiSince=29)]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("getBaseDirection", "(Ljava/lang/CharSequence;)B", "", ApiSince=29)&gt;]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[System.Runtime.Versioning.SupportedOSPlatform("android29.0")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Runtime.Versioning.SupportedOSPlatform("android29.0")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.SByte</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="paragraph" Type="Java.Lang.ICharSequence" />
      </Parameters>
      <Docs>
        <param name="paragraph">the text whose paragraph level direction is needed.</param>
        <summary>Get the base direction of the text provided according to the Unicode
            Bidirectional Algorithm.</summary>
        <returns>LTR, RTL, NEUTRAL</returns>
        <remarks>
          <para>Get the base direction of the text provided according to the Unicode
            Bidirectional Algorithm. The base direction is derived from the first
            character in the string with bidirectional character type L, R, or AL.
            If the first such character has type L, LTR is returned. If the first
            such character has type R or AL, RTL is returned. If the string does
            not contain any character of these types, then NEUTRAL is returned.
            This is a lightweight function for use when only the base direction is
            needed and no further bidi processing of the text is needed.</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/android/icu/text/Bidi#getBaseDirection(java.lang.CharSequence)" title="Reference documentation">Java documentation for <code>android.icu.text.Bidi.getBaseDirection(java.lang.CharSequence)</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetBaseDirection">
      <MemberSignature Language="C#" Value="public static sbyte GetBaseDirection (string? paragraph);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int8 GetBaseDirection(string paragraph) cil managed" />
      <MemberSignature Language="DocId" Value="M:Android.Icu.Text.Bidi.GetBaseDirection(System.String)" />
      <MemberSignature Language="F#" Value="static member GetBaseDirection : string -&gt; sbyte" Usage="Android.Icu.Text.Bidi.GetBaseDirection paragraph" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[System.Runtime.Versioning.SupportedOSPlatform("android29.0")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Runtime.Versioning.SupportedOSPlatform("android29.0")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.SByte</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="paragraph" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="paragraph">the text whose paragraph level direction is needed.</param>
        <summary>Get the base direction of the text provided according to the Unicode
            Bidirectional Algorithm.</summary>
        <returns>LTR, RTL, NEUTRAL</returns>
        <remarks>
          <para>Get the base direction of the text provided according to the Unicode
            Bidirectional Algorithm. The base direction is derived from the first
            character in the string with bidirectional character type L, R, or AL.
            If the first such character has type L, LTR is returned. If the first
            such character has type R or AL, RTL is returned. If the string does
            not contain any character of these types, then NEUTRAL is returned.
            This is a lightweight function for use when only the base direction is
            needed and no further bidi processing of the text is needed.</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/android/icu/text/Bidi#getBaseDirection(java.lang.CharSequence)" title="Reference documentation">Java documentation for <code>android.icu.text.Bidi.getBaseDirection(java.lang.CharSequence)</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetCustomizedClass">
      <MemberSignature Language="C#" Value="public virtual int GetCustomizedClass (int c);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance int32 GetCustomizedClass(int32 c) cil managed" />
      <MemberSignature Language="DocId" Value="M:Android.Icu.Text.Bidi.GetCustomizedClass(System.Int32)" />
      <MemberSignature Language="F#" Value="abstract member GetCustomizedClass : int -&gt; int&#xA;override this.GetCustomizedClass : int -&gt; int" Usage="bidi.GetCustomizedClass c" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("getCustomizedClass", "(I)I", "GetGetCustomizedClass_IHandler", ApiSince=29)]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("getCustomizedClass", "(I)I", "GetGetCustomizedClass_IHandler", ApiSince=29)&gt;]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[System.Runtime.Versioning.SupportedOSPlatform("android29.0")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Runtime.Versioning.SupportedOSPlatform("android29.0")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="c" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="c">The code point to get a Bidi class for.</param>
        <summary>Retrieves the Bidi class for a given code point.</summary>
        <returns>The Bidi class for the character <c>c</c> that is in effect
                    for this <c>Bidi</c> instance.</returns>
        <remarks>
          <para>Retrieves the Bidi class for a given code point.</para>
          <para>If a <c>BidiClassifier</c> is defined and returns a value
            other than <c>UCharacter.getIntPropertyMaxValue(UProperty.BIDI_CLASS)+1</c>,
            that value is used; otherwise the default class determination mechanism is invoked.</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/android/icu/text/Bidi#getCustomizedClass(int)" title="Reference documentation">Java documentation for <code>android.icu.text.Bidi.getCustomizedClass(int)</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetLevelAt">
      <MemberSignature Language="C#" Value="public virtual sbyte GetLevelAt (int charIndex);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance int8 GetLevelAt(int32 charIndex) cil managed" />
      <MemberSignature Language="DocId" Value="M:Android.Icu.Text.Bidi.GetLevelAt(System.Int32)" />
      <MemberSignature Language="F#" Value="abstract member GetLevelAt : int -&gt; sbyte&#xA;override this.GetLevelAt : int -&gt; sbyte" Usage="bidi.GetLevelAt charIndex" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("getLevelAt", "(I)B", "GetGetLevelAt_IHandler", ApiSince=29)]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("getLevelAt", "(I)B", "GetGetLevelAt_IHandler", ApiSince=29)&gt;]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[System.Runtime.Versioning.SupportedOSPlatform("android29.0")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Runtime.Versioning.SupportedOSPlatform("android29.0")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.SByte</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="charIndex" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="charIndex">the index of a character.</param>
        <summary>Get the level for one character.</summary>
        <returns>The level for the character at <c>charIndex</c>.</returns>
        <remarks>
          <para>Get the level for one character.</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/android/icu/text/Bidi#getLevelAt(int)" title="Reference documentation">Java documentation for <code>android.icu.text.Bidi.getLevelAt(int)</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetLevels">
      <MemberSignature Language="C#" Value="public virtual byte[]? GetLevels ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance unsigned int8[] GetLevels() cil managed" />
      <MemberSignature Language="DocId" Value="M:Android.Icu.Text.Bidi.GetLevels" />
      <MemberSignature Language="F#" Value="abstract member GetLevels : unit -&gt; byte[]&#xA;override this.GetLevels : unit -&gt; byte[]" Usage="bidi.GetLevels " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("getLevels", "()[B", "GetGetLevelsHandler", ApiSince=29)]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("getLevels", "()[B", "GetGetLevelsHandler", ApiSince=29)&gt;]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[System.Runtime.Versioning.SupportedOSPlatform("android29.0")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Runtime.Versioning.SupportedOSPlatform("android29.0")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Byte[]</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Get an array of levels for each character.</summary>
        <returns>The levels array for the text,
                    or <c>null</c> if an error occurs.</returns>
        <remarks>
          <para>Get an array of levels for each character.</para>
          <para>Note that this method may allocate memory under some
            circumstances, unlike <c>getLevelAt()</c>.</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/android/icu/text/Bidi#getLevels()" title="Reference documentation">Java documentation for <code>android.icu.text.Bidi.getLevels()</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetLogicalIndex">
      <MemberSignature Language="C#" Value="public virtual int GetLogicalIndex (int visualIndex);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance int32 GetLogicalIndex(int32 visualIndex) cil managed" />
      <MemberSignature Language="DocId" Value="M:Android.Icu.Text.Bidi.GetLogicalIndex(System.Int32)" />
      <MemberSignature Language="F#" Value="abstract member GetLogicalIndex : int -&gt; int&#xA;override this.GetLogicalIndex : int -&gt; int" Usage="bidi.GetLogicalIndex visualIndex" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("getLogicalIndex", "(I)I", "GetGetLogicalIndex_IHandler", ApiSince=29)]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("getLogicalIndex", "(I)I", "GetGetLogicalIndex_IHandler", ApiSince=29)&gt;]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[System.Runtime.Versioning.SupportedOSPlatform("android29.0")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Runtime.Versioning.SupportedOSPlatform("android29.0")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="visualIndex" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="visualIndex">is the visual position of a character.</param>
        <summary>Get the logical text position from a visual position.</summary>
        <returns>The index of this character in the text.</returns>
        <remarks>
          <para>Get the logical text position from a visual position.
            If such a mapping is used many times on the same
            <c>Bidi</c> object, then calling
            <c>getVisualMap()</c> is more efficient.</para>
          <para>The value returned may be <c>MAP_NOWHERE</c> if there is no
            logical position because the corresponding text character is a Bidi
            mark inserted in the output by option
            <c>OPTION_INSERT_MARKS</c>.</para>
          <para>This is the inverse method to <c>getVisualIndex()</c>.</para>
          <para>When the visual output is altered by using options of
            <c>writeReordered()</c> such as <c>INSERT_LRM_FOR_NUMERIC</c>,
            <c>KEEP_BASE_COMBINING</c>, <c>OUTPUT_REVERSE</c>,
            <c>REMOVE_BIDI_CONTROLS</c>, the logical position returned may not
            be correct. It is advised to use, when possible, reordering options
            such as <c>#OPTION_INSERT_MARKS</c> and <c>#OPTION_REMOVE_CONTROLS</c>.</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/android/icu/text/Bidi#getLogicalIndex(int)" title="Reference documentation">Java documentation for <code>android.icu.text.Bidi.getLogicalIndex(int)</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetLogicalMap">
      <MemberSignature Language="C#" Value="public virtual int[]? GetLogicalMap ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance int32[] GetLogicalMap() cil managed" />
      <MemberSignature Language="DocId" Value="M:Android.Icu.Text.Bidi.GetLogicalMap" />
      <MemberSignature Language="F#" Value="abstract member GetLogicalMap : unit -&gt; int[]&#xA;override this.GetLogicalMap : unit -&gt; int[]" Usage="bidi.GetLogicalMap " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("getLogicalMap", "()[I", "GetGetLogicalMapHandler", ApiSince=29)]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("getLogicalMap", "()[I", "GetGetLogicalMapHandler", ApiSince=29)&gt;]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[System.Runtime.Versioning.SupportedOSPlatform("android29.0")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Runtime.Versioning.SupportedOSPlatform("android29.0")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32[]</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Get a logical-to-visual index map (array) for the characters in the
            <c>Bidi</c> (paragraph or line) object.</summary>
        <returns>an array of <c>getProcessedLength()</c>
                   indexes which will reflect the reordering of the characters.&lt;br&gt;&lt;br&gt;
                   The index map will result in
                   <c>indexMap[logicalIndex]==visualIndex</c>, where
                   <c>indexMap</c> represents the returned array.</returns>
        <remarks>
          <para>Get a logical-to-visual index map (array) for the characters in the
            <c>Bidi</c> (paragraph or line) object.</para>
          <para>Some values in the map may be <c>MAP_NOWHERE</c> if the
            corresponding text characters are Bidi controls removed from the visual
            output by the option <c>OPTION_REMOVE_CONTROLS</c>.</para>
          <para>When the visual output is altered by using options of
            <c>writeReordered()</c> such as <c>INSERT_LRM_FOR_NUMERIC</c>,
            <c>KEEP_BASE_COMBINING</c>, <c>OUTPUT_REVERSE</c>,
            <c>REMOVE_BIDI_CONTROLS</c>, the visual positions returned may not
            be correct. It is advised to use, when possible, reordering options
            such as <c>#OPTION_INSERT_MARKS</c> and <c>#OPTION_REMOVE_CONTROLS</c>.</para>
          <para>Note that in right-to-left runs, this mapping places
            second surrogates before first ones (which is generally a bad idea)
            and combining characters before base characters.
            Use of <c>{@link #writeReordered}</c>, optionally with the
            <c>{@link #KEEP_BASE_COMBINING}</c> option can be considered instead
            of using the mapping, in order to avoid these issues.</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/android/icu/text/Bidi#getLogicalMap()" title="Reference documentation">Java documentation for <code>android.icu.text.Bidi.getLogicalMap()</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetLogicalRun">
      <MemberSignature Language="C#" Value="public virtual Android.Icu.Text.BidiRun? GetLogicalRun (int logicalPosition);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Android.Icu.Text.BidiRun GetLogicalRun(int32 logicalPosition) cil managed" />
      <MemberSignature Language="DocId" Value="M:Android.Icu.Text.Bidi.GetLogicalRun(System.Int32)" />
      <MemberSignature Language="F#" Value="abstract member GetLogicalRun : int -&gt; Android.Icu.Text.BidiRun&#xA;override this.GetLogicalRun : int -&gt; Android.Icu.Text.BidiRun" Usage="bidi.GetLogicalRun logicalPosition" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("getLogicalRun", "(I)Landroid/icu/text/BidiRun;", "GetGetLogicalRun_IHandler", ApiSince=29)]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("getLogicalRun", "(I)Landroid/icu/text/BidiRun;", "GetGetLogicalRun_IHandler", ApiSince=29)&gt;]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[System.Runtime.Versioning.SupportedOSPlatform("android29.0")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Runtime.Versioning.SupportedOSPlatform("android29.0")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Android.Icu.Text.BidiRun</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="logicalPosition" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="logicalPosition">is a logical position within the source text.</param>
        <summary>Get a logical run.</summary>
        <returns>a BidiRun object filled with <c>start</c> containing
                   the first character of the run, <c>limit</c> containing
                   the limit of the run, and <c>embeddingLevel</c> containing
                   the level of the run.</returns>
        <remarks>
          <para>Get a logical run.
            This method returns information about a run and is used
            to retrieve runs in logical order.</para>
          <para>This is especially useful for line-breaking on a paragraph.</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/android/icu/text/Bidi#getLogicalRun(int)" title="Reference documentation">Java documentation for <code>android.icu.text.Bidi.getLogicalRun(int)</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetParagraph">
      <MemberSignature Language="C#" Value="public virtual Android.Icu.Text.BidiRun? GetParagraph (int charIndex);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Android.Icu.Text.BidiRun GetParagraph(int32 charIndex) cil managed" />
      <MemberSignature Language="DocId" Value="M:Android.Icu.Text.Bidi.GetParagraph(System.Int32)" />
      <MemberSignature Language="F#" Value="abstract member GetParagraph : int -&gt; Android.Icu.Text.BidiRun&#xA;override this.GetParagraph : int -&gt; Android.Icu.Text.BidiRun" Usage="bidi.GetParagraph charIndex" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("getParagraph", "(I)Landroid/icu/text/BidiRun;", "GetGetParagraph_IHandler", ApiSince=29)]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("getParagraph", "(I)Landroid/icu/text/BidiRun;", "GetGetParagraph_IHandler", ApiSince=29)&gt;]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[System.Runtime.Versioning.SupportedOSPlatform("android29.0")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Runtime.Versioning.SupportedOSPlatform("android29.0")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Android.Icu.Text.BidiRun</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="charIndex" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="charIndex">is the index of a character within the text, in the
                   range <c>[0..getProcessedLength()-1]</c>.</param>
        <summary>Get a paragraph, given a position within the text.</summary>
        <returns>a BidiRun object with the details of the paragraph:&lt;br&gt;
                   <c>start</c> will receive the index of the first character
                   of the paragraph in the text.&lt;br&gt;
                   <c>limit</c> will receive the limit of the paragraph.&lt;br&gt;
                   <c>embeddingLevel</c> will receive the level of the paragraph.</returns>
        <remarks>
          <para>Get a paragraph, given a position within the text.
            This method returns information about a paragraph.&lt;br&gt;
            Note: if the paragraph index is known, it is more efficient to
            retrieve the paragraph information using getParagraphByIndex().</para>
          <para />
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/android/icu/text/Bidi#getParagraph(int)" title="Reference documentation">Java documentation for <code>android.icu.text.Bidi.getParagraph(int)</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetParagraphByIndex">
      <MemberSignature Language="C#" Value="public virtual Android.Icu.Text.BidiRun? GetParagraphByIndex (int paraIndex);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Android.Icu.Text.BidiRun GetParagraphByIndex(int32 paraIndex) cil managed" />
      <MemberSignature Language="DocId" Value="M:Android.Icu.Text.Bidi.GetParagraphByIndex(System.Int32)" />
      <MemberSignature Language="F#" Value="abstract member GetParagraphByIndex : int -&gt; Android.Icu.Text.BidiRun&#xA;override this.GetParagraphByIndex : int -&gt; Android.Icu.Text.BidiRun" Usage="bidi.GetParagraphByIndex paraIndex" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("getParagraphByIndex", "(I)Landroid/icu/text/BidiRun;", "GetGetParagraphByIndex_IHandler", ApiSince=29)]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("getParagraphByIndex", "(I)Landroid/icu/text/BidiRun;", "GetGetParagraphByIndex_IHandler", ApiSince=29)&gt;]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[System.Runtime.Versioning.SupportedOSPlatform("android29.0")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Runtime.Versioning.SupportedOSPlatform("android29.0")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Android.Icu.Text.BidiRun</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="paraIndex" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="paraIndex">is the number of the paragraph, in the
                   range <c>[0..countParagraphs()-1]</c>.</param>
        <summary>Get a paragraph, given the index of this paragraph.</summary>
        <returns>a BidiRun object with the details of the paragraph:&lt;br&gt;
                   <c>start</c> will receive the index of the first character
                   of the paragraph in the text.&lt;br&gt;
                   <c>limit</c> will receive the limit of the paragraph.&lt;br&gt;
                   <c>embeddingLevel</c> will receive the level of the paragraph.</returns>
        <remarks>
          <para>Get a paragraph, given the index of this paragraph.</para>
          <para>This method returns information about a paragraph.</para>
          <para />
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/android/icu/text/Bidi#getParagraphByIndex(int)" title="Reference documentation">Java documentation for <code>android.icu.text.Bidi.getParagraphByIndex(int)</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetParagraphIndex">
      <MemberSignature Language="C#" Value="public virtual int GetParagraphIndex (int charIndex);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance int32 GetParagraphIndex(int32 charIndex) cil managed" />
      <MemberSignature Language="DocId" Value="M:Android.Icu.Text.Bidi.GetParagraphIndex(System.Int32)" />
      <MemberSignature Language="F#" Value="abstract member GetParagraphIndex : int -&gt; int&#xA;override this.GetParagraphIndex : int -&gt; int" Usage="bidi.GetParagraphIndex charIndex" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("getParagraphIndex", "(I)I", "GetGetParagraphIndex_IHandler", ApiSince=29)]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("getParagraphIndex", "(I)I", "GetGetParagraphIndex_IHandler", ApiSince=29)&gt;]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[System.Runtime.Versioning.SupportedOSPlatform("android29.0")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Runtime.Versioning.SupportedOSPlatform("android29.0")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="charIndex" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="charIndex">is the index of a character within the text, in the
                   range <c>[0..getProcessedLength()-1]</c>.</param>
        <summary>Get the index of a paragraph, given a position within the text.</summary>
        <returns>The index of the paragraph containing the specified position,
                    starting from 0.</returns>
        <remarks>
          <para>Get the index of a paragraph, given a position within the text.</para>
          <para />
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/android/icu/text/Bidi#getParagraphIndex(int)" title="Reference documentation">Java documentation for <code>android.icu.text.Bidi.getParagraphIndex(int)</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetRunLevel">
      <MemberSignature Language="C#" Value="public virtual int GetRunLevel (int run);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance int32 GetRunLevel(int32 run) cil managed" />
      <MemberSignature Language="DocId" Value="M:Android.Icu.Text.Bidi.GetRunLevel(System.Int32)" />
      <MemberSignature Language="F#" Value="abstract member GetRunLevel : int -&gt; int&#xA;override this.GetRunLevel : int -&gt; int" Usage="bidi.GetRunLevel run" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("getRunLevel", "(I)I", "GetGetRunLevel_IHandler", ApiSince=29)]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("getRunLevel", "(I)I", "GetGetRunLevel_IHandler", ApiSince=29)&gt;]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[System.Runtime.Versioning.SupportedOSPlatform("android29.0")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Runtime.Versioning.SupportedOSPlatform("android29.0")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="run" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="run">the index of the run, between 0 and <c>countRuns()-1</c></param>
        <summary>Return the level of the nth logical run in this line.</summary>
        <returns>the level of the run</returns>
        <remarks>
          <para>Return the level of the nth logical run in this line.</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/android/icu/text/Bidi#getRunLevel(int)" title="Reference documentation">Java documentation for <code>android.icu.text.Bidi.getRunLevel(int)</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetRunLimit">
      <MemberSignature Language="C#" Value="public virtual int GetRunLimit (int run);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance int32 GetRunLimit(int32 run) cil managed" />
      <MemberSignature Language="DocId" Value="M:Android.Icu.Text.Bidi.GetRunLimit(System.Int32)" />
      <MemberSignature Language="F#" Value="abstract member GetRunLimit : int -&gt; int&#xA;override this.GetRunLimit : int -&gt; int" Usage="bidi.GetRunLimit run" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("getRunLimit", "(I)I", "GetGetRunLimit_IHandler", ApiSince=29)]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("getRunLimit", "(I)I", "GetGetRunLimit_IHandler", ApiSince=29)&gt;]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[System.Runtime.Versioning.SupportedOSPlatform("android29.0")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Runtime.Versioning.SupportedOSPlatform("android29.0")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="run" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="run">the index of the run, between 0 and <c>countRuns()</c></param>
        <summary>Return the index of the character past the end of the nth logical run in
            this line, as an offset from the start of the line.</summary>
        <returns>the limit of the run</returns>
        <remarks>
          <para>Return the index of the character past the end of the nth logical run in
            this line, as an offset from the start of the line. For example, this
            will return the length of the line for the last run on the line.</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/android/icu/text/Bidi#getRunLimit(int)" title="Reference documentation">Java documentation for <code>android.icu.text.Bidi.getRunLimit(int)</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetRunStart">
      <MemberSignature Language="C#" Value="public virtual int GetRunStart (int run);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance int32 GetRunStart(int32 run) cil managed" />
      <MemberSignature Language="DocId" Value="M:Android.Icu.Text.Bidi.GetRunStart(System.Int32)" />
      <MemberSignature Language="F#" Value="abstract member GetRunStart : int -&gt; int&#xA;override this.GetRunStart : int -&gt; int" Usage="bidi.GetRunStart run" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("getRunStart", "(I)I", "GetGetRunStart_IHandler", ApiSince=29)]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("getRunStart", "(I)I", "GetGetRunStart_IHandler", ApiSince=29)&gt;]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[System.Runtime.Versioning.SupportedOSPlatform("android29.0")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Runtime.Versioning.SupportedOSPlatform("android29.0")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="run" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="run">the index of the run, between 0 and <c>countRuns()</c></param>
        <summary>Return the index of the character at the start of the nth logical run in
            this line, as an offset from the start of the line.</summary>
        <returns>the start of the run</returns>
        <remarks>
          <para>Return the index of the character at the start of the nth logical run in
            this line, as an offset from the start of the line.</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/android/icu/text/Bidi#getRunStart(int)" title="Reference documentation">Java documentation for <code>android.icu.text.Bidi.getRunStart(int)</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetText">
      <MemberSignature Language="C#" Value="public virtual char[]? GetText ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance char[] GetText() cil managed" />
      <MemberSignature Language="DocId" Value="M:Android.Icu.Text.Bidi.GetText" />
      <MemberSignature Language="F#" Value="abstract member GetText : unit -&gt; char[]&#xA;override this.GetText : unit -&gt; char[]" Usage="bidi.GetText " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("getText", "()[C", "GetGetTextHandler", ApiSince=29)]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("getText", "()[C", "GetGetTextHandler", ApiSince=29)&gt;]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[System.Runtime.Versioning.SupportedOSPlatform("android29.0")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Runtime.Versioning.SupportedOSPlatform("android29.0")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Char[]</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Get the text.</summary>
        <returns>A <c>char</c> array containing the text that the
                    <c>Bidi</c> object was created for.</returns>
        <remarks>
          <para>Get the text.</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/android/icu/text/Bidi#getText()" title="Reference documentation">Java documentation for <code>android.icu.text.Bidi.getText()</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetVisualIndex">
      <MemberSignature Language="C#" Value="public virtual int GetVisualIndex (int logicalIndex);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance int32 GetVisualIndex(int32 logicalIndex) cil managed" />
      <MemberSignature Language="DocId" Value="M:Android.Icu.Text.Bidi.GetVisualIndex(System.Int32)" />
      <MemberSignature Language="F#" Value="abstract member GetVisualIndex : int -&gt; int&#xA;override this.GetVisualIndex : int -&gt; int" Usage="bidi.GetVisualIndex logicalIndex" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("getVisualIndex", "(I)I", "GetGetVisualIndex_IHandler", ApiSince=29)]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("getVisualIndex", "(I)I", "GetGetVisualIndex_IHandler", ApiSince=29)&gt;]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[System.Runtime.Versioning.SupportedOSPlatform("android29.0")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Runtime.Versioning.SupportedOSPlatform("android29.0")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="logicalIndex" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="logicalIndex">is the index of a character in the text.</param>
        <summary>Get the visual position from a logical text position.</summary>
        <returns>The visual position of this character.</returns>
        <remarks>
          <para>Get the visual position from a logical text position.
            If such a mapping is used many times on the same
            <c>Bidi</c> object, then calling
            <c>getLogicalMap()</c> is more efficient.</para>
          <para>The value returned may be <c>MAP_NOWHERE</c> if there is no
            visual position because the corresponding text character is a Bidi
            control removed from output by the option
            <c>OPTION_REMOVE_CONTROLS</c>.</para>
          <para>When the visual output is altered by using options of
            <c>writeReordered()</c> such as <c>INSERT_LRM_FOR_NUMERIC</c>,
            <c>KEEP_BASE_COMBINING</c>, <c>OUTPUT_REVERSE</c>,
            <c>REMOVE_BIDI_CONTROLS</c>, the visual position returned may not
            be correct. It is advised to use, when possible, reordering options
            such as <c>#OPTION_INSERT_MARKS</c> and <c>#OPTION_REMOVE_CONTROLS</c>.</para>
          <para>Note that in right-to-left runs, this mapping places
            second surrogates before first ones (which is generally a bad idea)
            and combining characters before base characters.
            Use of <c>{@link #writeReordered}</c>, optionally with the
            <c>{@link #KEEP_BASE_COMBINING}</c> option can be considered instead
            of using the mapping, in order to avoid these issues.</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/android/icu/text/Bidi#getVisualIndex(int)" title="Reference documentation">Java documentation for <code>android.icu.text.Bidi.getVisualIndex(int)</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetVisualMap">
      <MemberSignature Language="C#" Value="public virtual int[]? GetVisualMap ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance int32[] GetVisualMap() cil managed" />
      <MemberSignature Language="DocId" Value="M:Android.Icu.Text.Bidi.GetVisualMap" />
      <MemberSignature Language="F#" Value="abstract member GetVisualMap : unit -&gt; int[]&#xA;override this.GetVisualMap : unit -&gt; int[]" Usage="bidi.GetVisualMap " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("getVisualMap", "()[I", "GetGetVisualMapHandler", ApiSince=29)]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("getVisualMap", "()[I", "GetGetVisualMapHandler", ApiSince=29)&gt;]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[System.Runtime.Versioning.SupportedOSPlatform("android29.0")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Runtime.Versioning.SupportedOSPlatform("android29.0")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32[]</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Get a visual-to-logical index map (array) for the characters in the
            <c>Bidi</c> (paragraph or line) object.</summary>
        <returns>an array of <c>getResultLength()</c>
                   indexes which will reflect the reordering of the characters.&lt;br&gt;&lt;br&gt;
                   The index map will result in
                   <c>indexMap[visualIndex]==logicalIndex</c>, where
                   <c>indexMap</c> represents the returned array.</returns>
        <remarks>
          <para>Get a visual-to-logical index map (array) for the characters in the
            <c>Bidi</c> (paragraph or line) object.</para>
          <para>Some values in the map may be <c>MAP_NOWHERE</c> if the
            corresponding text characters are Bidi marks inserted in the visual
            output by the option <c>OPTION_INSERT_MARKS</c>.</para>
          <para>When the visual output is altered by using options of
            <c>writeReordered()</c> such as <c>INSERT_LRM_FOR_NUMERIC</c>,
            <c>KEEP_BASE_COMBINING</c>, <c>OUTPUT_REVERSE</c>,
            <c>REMOVE_BIDI_CONTROLS</c>, the logical positions returned may not
            be correct. It is advised to use, when possible, reordering options
            such as <c>#OPTION_INSERT_MARKS</c> and <c>#OPTION_REMOVE_CONTROLS</c>.</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/android/icu/text/Bidi#getVisualMap()" title="Reference documentation">Java documentation for <code>android.icu.text.Bidi.getVisualMap()</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetVisualRun">
      <MemberSignature Language="C#" Value="public virtual Android.Icu.Text.BidiRun? GetVisualRun (int runIndex);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Android.Icu.Text.BidiRun GetVisualRun(int32 runIndex) cil managed" />
      <MemberSignature Language="DocId" Value="M:Android.Icu.Text.Bidi.GetVisualRun(System.Int32)" />
      <MemberSignature Language="F#" Value="abstract member GetVisualRun : int -&gt; Android.Icu.Text.BidiRun&#xA;override this.GetVisualRun : int -&gt; Android.Icu.Text.BidiRun" Usage="bidi.GetVisualRun runIndex" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("getVisualRun", "(I)Landroid/icu/text/BidiRun;", "GetGetVisualRun_IHandler", ApiSince=29)]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("getVisualRun", "(I)Landroid/icu/text/BidiRun;", "GetGetVisualRun_IHandler", ApiSince=29)&gt;]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[System.Runtime.Versioning.SupportedOSPlatform("android29.0")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Runtime.Versioning.SupportedOSPlatform("android29.0")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Android.Icu.Text.BidiRun</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="runIndex" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="runIndex">is the number of the run in visual order, in the
                   range <c>[0..countRuns()-1]</c>.</param>
        <summary>Get a <c>BidiRun</c> object according to its index.</summary>
        <returns>a BidiRun object containing the details of the run. The
                    directionality of the run is
                    <c>LTR==0</c> or <c>RTL==1</c>,
                    never <c>MIXED</c>.</returns>
        <remarks>
          <para>Get a <c>BidiRun</c> object according to its index. BidiRun methods
            may be used to retrieve the run's logical start, length and level,
            which can be even for an LTR run or odd for an RTL run.
            In an RTL run, the character at the logical start is
            visually on the right of the displayed run.
            The length is the number of characters in the run.</para>
          <para>
            <c>countRuns()</c> is normally called
            before the runs are retrieved.</para>
          <para>Example:</para>
          <code lang="text/java">Bidi bidi = new Bidi();
             String text = "abc 123 DEFG xyz";
             bidi.setPara(text, Bidi.RTL, null);
             int i, count=bidi.countRuns(), logicalStart, visualIndex=0, length;
             BidiRun run;
             for (i = 0; i &amp;lt; count; ++i) {
                 run = bidi.getVisualRun(i);
                 logicalStart = run.getStart();
                 length = run.getLength();
                 if (Bidi.LTR == run.getEmbeddingLevel()) {
                     do { // LTR
                         show_char(text.charAt(logicalStart++), visualIndex++);
                     } while (--length &amp;gt; 0);
                 } else {
                     logicalStart += length;  // logicalLimit
                     do { // RTL
                         show_char(text.charAt(--logicalStart), visualIndex++);
                     } while (--length &amp;gt; 0);
                 }
             }
            </code>
          <para>Note that in right-to-left runs, code like this places
            second surrogates before first ones (which is generally a bad idea)
            and combining characters before base characters.</para>
          <para>Use of <c>{@link #writeReordered}</c>, optionally with the
            <c>{@link #KEEP_BASE_COMBINING}</c> option, can be considered in
            order to avoid these issues.</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/android/icu/text/Bidi#getVisualRun(int)" title="Reference documentation">Java documentation for <code>android.icu.text.Bidi.getVisualRun(int)</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="InsertLrmForNumeric">
      <MemberSignature Language="C#" Value="public const short InsertLrmForNumeric = 4;" />
      <MemberSignature Language="ILAsm" Value=".field public static literal int16 InsertLrmForNumeric = (4)" />
      <MemberSignature Language="DocId" Value="F:Android.Icu.Text.Bidi.InsertLrmForNumeric" />
      <MemberSignature Language="F#" Value="val mutable InsertLrmForNumeric : int16" Usage="Android.Icu.Text.Bidi.InsertLrmForNumeric" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("INSERT_LRM_FOR_NUMERIC", ApiSince=29)]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("INSERT_LRM_FOR_NUMERIC", ApiSince=29)&gt;]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[System.Runtime.Versioning.SupportedOSPlatform("android29.0")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Runtime.Versioning.SupportedOSPlatform("android29.0")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int16</ReturnType>
      </ReturnValue>
      <MemberValue>4</MemberValue>
      <Docs>
        <summary>option bit for writeReordered():
            surround the run with LRMs if necessary;
            this is part of the approximate "inverse Bidi" algorithm</summary>
        <remarks>
          <para>option bit for writeReordered():
            surround the run with LRMs if necessary;
            this is part of the approximate "inverse Bidi" algorithm</para>
          <para>This option does not imply corresponding adjustment of the index
            mappings.</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/android/icu/text/Bidi#INSERT_LRM_FOR_NUMERIC" title="Reference documentation">Java documentation for <code>android.icu.text.Bidi.INSERT_LRM_FOR_NUMERIC</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Inverse">
      <MemberSignature Language="C#" Value="public virtual bool Inverse { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool Inverse" />
      <MemberSignature Language="DocId" Value="P:Android.Icu.Text.Bidi.Inverse" />
      <MemberSignature Language="F#" Value="member this.Inverse : bool with get, set" Usage="Android.Icu.Text.Bidi.Inverse" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[System.Runtime.Versioning.SupportedOSPlatform("android29.0")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Runtime.Versioning.SupportedOSPlatform("android29.0")&gt;]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[get: Android.Runtime.Register("isInverse", "()Z", "GetIsInverseHandler", ApiSince=29)]</AttributeName>
          <AttributeName Language="F#">[&lt;get: Android.Runtime.Register("isInverse", "()Z", "GetIsInverseHandler", ApiSince=29)&gt;]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[set: Android.Runtime.Register("setInverse", "(Z)V", "GetSetInverse_ZHandler", ApiSince=29)]</AttributeName>
          <AttributeName Language="F#">[&lt;set: Android.Runtime.Register("setInverse", "(Z)V", "GetSetInverse_ZHandler", ApiSince=29)&gt;]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[set: System.Runtime.Versioning.SupportedOSPlatform("android29.0")]</AttributeName>
          <AttributeName Language="F#">[&lt;set: System.Runtime.Versioning.SupportedOSPlatform("android29.0")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <param name="isInverse">specifies "forward" or "inverse" Bidi operation.</param>
        <summary>Is this <c>Bidi</c> object set to perform the inverse Bidi
            algorithm? -or- Modify the operation of the Bidi algorithm such that it
            approximates an "inverse Bidi" algorithm.</summary>
        <value>
          <c>true</c> if the <c>Bidi</c> object is set to
            perform the inverse Bidi algorithm by handling numbers as L.</value>
        <remarks>
          <para>Property getter documentation:</para>
          <para>Is this <c>Bidi</c> object set to perform the inverse Bidi
            algorithm?</para>
          <para>Note: calling this method after setting the reordering mode with
            <c>setReorderingMode</c> will return <c>true</c> if the
            reordering mode was set to
            <c>REORDER_INVERSE_NUMBERS_AS_L</c>, <c>false</c>
            for all other values.</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/android/icu/text/Bidi#isInverse()" title="Reference documentation">Java documentation for <code>android.icu.text.Bidi.isInverse()</code>.</a>
            </format>
          </para>
          <para>Property setter documentation:</para>
          <para>Modify the operation of the Bidi algorithm such that it
            approximates an "inverse Bidi" algorithm. This method
            must be called before <c>setPara()</c>.</para>
          <para>The normal operation of the Bidi algorithm as described
            in the Unicode Technical Report is to take text stored in logical
            (keyboard, typing) order and to determine the reordering of it for visual
            rendering.
            Some legacy systems store text in visual order, and for operations
            with standard, Unicode-based algorithms, the text needs to be transformed
            to logical order. This is effectively the inverse algorithm of the
            described Bidi algorithm. Note that there is no standard algorithm for
            this "inverse Bidi" and that the current implementation provides only an
            approximation of "inverse Bidi".</para>
          <para>With <c>isInversed</c> set to <c>true</c>,
            this method changes the behavior of some of the subsequent methods
            in a way that they can be used for the inverse Bidi algorithm.
            Specifically, runs of text with numeric characters will be treated in a
            special way and may need to be surrounded with LRM characters when they are
            written in reordered sequence.</para>
          <para>Output runs should be retrieved using <c>getVisualRun()</c>.
            Since the actual input for "inverse Bidi" is visually ordered text and
            <c>getVisualRun()</c> gets the reordered runs, these are actually
            the runs of the logically ordered output.</para>
          <para>Calling this method with argument <c>isInverse</c> set to
            <c>true</c> is equivalent to calling <c>setReorderingMode</c>
            with argument <c>reorderingMode</c>
            set to <c>REORDER_INVERSE_NUMBERS_AS_L</c>.&lt;br&gt;
            Calling this method with argument <c>isInverse</c> set to
            <c>false</c> is equivalent to calling <c>setReorderingMode</c>
            with argument <c>reorderingMode</c>
            set to <c>REORDER_DEFAULT</c>.</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/android/icu/text/Bidi#setInverse(boolean)" title="Reference documentation">Java documentation for <code>android.icu.text.Bidi.setInverse(boolean)</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="InvertMap">
      <MemberSignature Language="C#" Value="public static int[]? InvertMap (int[]? srcMap);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int32[] InvertMap(int32[] srcMap) cil managed" />
      <MemberSignature Language="DocId" Value="M:Android.Icu.Text.Bidi.InvertMap(System.Int32[])" />
      <MemberSignature Language="F#" Value="static member InvertMap : int[] -&gt; int[]" Usage="Android.Icu.Text.Bidi.InvertMap srcMap" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("invertMap", "([I)[I", "", ApiSince=29)]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("invertMap", "([I)[I", "", ApiSince=29)&gt;]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[System.Runtime.Versioning.SupportedOSPlatform("android29.0")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Runtime.Versioning.SupportedOSPlatform("android29.0")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="srcMap" Type="System.Int32[]" />
      </Parameters>
      <Docs>
        <param name="srcMap">is an array whose elements define the original mapping
            from a source array to a destination array.
            Some elements of the source array may have no mapping in the
            destination array. In that case, their value will be
            the special value <c>MAP_NOWHERE</c>.
            All elements must be &amp;gt;=0 or equal to <c>MAP_NOWHERE</c>.
            Some elements in the source map may have a value greater than the
            srcMap.length if the destination array has more elements than the
            source array.
            There must be no duplicate indexes (two or more elements with the
            same value except <c>MAP_NOWHERE</c>).</param>
        <summary>Invert an index map.</summary>
        <returns>an array representing the inverse map.
                    This array has a number of elements equal to 1 + the highest
                    value in <c>srcMap</c>.
                    For elements of the result array which have no matching elements
                    in the source array, the corresponding elements in the inverse
                    map will receive a value equal to <c>MAP_NOWHERE</c>.
                    If element with index i in <c>srcMap</c> has a value k different
                    from <c>MAP_NOWHERE</c>, this means that element i of
                    the source array maps to element k in the destination array.
                    The inverse map will have value i in its k-th element.
                    For all elements of the destination array which do not map to
                    an element in the source array, the corresponding element in the
                    inverse map will have a value equal to <c>MAP_NOWHERE</c>.</returns>
        <remarks>
          <para>Invert an index map.
            The index mapping of the argument map is inverted and returned as
            an array of indexes that we will call the inverse map.</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/android/icu/text/Bidi#invertMap(int[])" title="Reference documentation">Java documentation for <code>android.icu.text.Bidi.invertMap(int[])</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsLeftToRight">
      <MemberSignature Language="C#" Value="public virtual bool IsLeftToRight { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsLeftToRight" />
      <MemberSignature Language="DocId" Value="P:Android.Icu.Text.Bidi.IsLeftToRight" />
      <MemberSignature Language="F#" Value="member this.IsLeftToRight : bool" Usage="Android.Icu.Text.Bidi.IsLeftToRight" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[System.Runtime.Versioning.SupportedOSPlatform("android29.0")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Runtime.Versioning.SupportedOSPlatform("android29.0")&gt;]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[get: Android.Runtime.Register("isLeftToRight", "()Z", "GetIsLeftToRightHandler", ApiSince=29)]</AttributeName>
          <AttributeName Language="F#">[&lt;get: Android.Runtime.Register("isLeftToRight", "()Z", "GetIsLeftToRightHandler", ApiSince=29)&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Return true if the line is all left-to-right text and the base direction
            is left-to-right.</summary>
        <value>true if the line is all left-to-right text and the base direction
                    is left-to-right.</value>
        <remarks>
          <para>Return true if the line is all left-to-right text and the base direction
            is left-to-right.</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/android/icu/text/Bidi#isLeftToRight()" title="Reference documentation">Java documentation for <code>android.icu.text.Bidi.isLeftToRight()</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsMixed">
      <MemberSignature Language="C#" Value="public virtual bool IsMixed { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsMixed" />
      <MemberSignature Language="DocId" Value="P:Android.Icu.Text.Bidi.IsMixed" />
      <MemberSignature Language="F#" Value="member this.IsMixed : bool" Usage="Android.Icu.Text.Bidi.IsMixed" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[System.Runtime.Versioning.SupportedOSPlatform("android29.0")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Runtime.Versioning.SupportedOSPlatform("android29.0")&gt;]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[get: Android.Runtime.Register("isMixed", "()Z", "GetIsMixedHandler", ApiSince=29)]</AttributeName>
          <AttributeName Language="F#">[&lt;get: Android.Runtime.Register("isMixed", "()Z", "GetIsMixedHandler", ApiSince=29)&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Return true if the line is not left-to-right or right-to-left.</summary>
        <value>true if the line is not left-to-right or right-to-left.</value>
        <remarks>
          <para>Return true if the line is not left-to-right or right-to-left. This means
            it either has mixed runs of left-to-right and right-to-left text, or the
            base direction differs from the direction of the only run of text.</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/android/icu/text/Bidi#isMixed()" title="Reference documentation">Java documentation for <code>android.icu.text.Bidi.isMixed()</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsOrderParagraphsLTR">
      <MemberSignature Language="C#" Value="public virtual bool IsOrderParagraphsLTR { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsOrderParagraphsLTR" />
      <MemberSignature Language="DocId" Value="P:Android.Icu.Text.Bidi.IsOrderParagraphsLTR" />
      <MemberSignature Language="F#" Value="member this.IsOrderParagraphsLTR : bool" Usage="Android.Icu.Text.Bidi.IsOrderParagraphsLTR" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[System.Runtime.Versioning.SupportedOSPlatform("android29.0")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Runtime.Versioning.SupportedOSPlatform("android29.0")&gt;]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[get: Android.Runtime.Register("isOrderParagraphsLTR", "()Z", "GetIsOrderParagraphsLTRHandler", ApiSince=29)]</AttributeName>
          <AttributeName Language="F#">[&lt;get: Android.Runtime.Register("isOrderParagraphsLTR", "()Z", "GetIsOrderParagraphsLTRHandler", ApiSince=29)&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Is this <c>Bidi</c> object set to allocate level 0 to block
            separators so that successive paragraphs progress from left to right?</summary>
        <value>
          <c>true</c> if the <c>Bidi</c> object is set to
                    allocate level 0 to block separators.</value>
        <remarks>
          <para>Is this <c>Bidi</c> object set to allocate level 0 to block
            separators so that successive paragraphs progress from left to right?</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/android/icu/text/Bidi#isOrderParagraphsLTR()" title="Reference documentation">Java documentation for <code>android.icu.text.Bidi.isOrderParagraphsLTR()</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsRightToLeft">
      <MemberSignature Language="C#" Value="public virtual bool IsRightToLeft { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsRightToLeft" />
      <MemberSignature Language="DocId" Value="P:Android.Icu.Text.Bidi.IsRightToLeft" />
      <MemberSignature Language="F#" Value="member this.IsRightToLeft : bool" Usage="Android.Icu.Text.Bidi.IsRightToLeft" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[System.Runtime.Versioning.SupportedOSPlatform("android29.0")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Runtime.Versioning.SupportedOSPlatform("android29.0")&gt;]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[get: Android.Runtime.Register("isRightToLeft", "()Z", "GetIsRightToLeftHandler", ApiSince=29)]</AttributeName>
          <AttributeName Language="F#">[&lt;get: Android.Runtime.Register("isRightToLeft", "()Z", "GetIsRightToLeftHandler", ApiSince=29)&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Return true if the line is all right-to-left text, and the base direction
            is right-to-left</summary>
        <value>true if the line is all right-to-left text, and the base
                    direction is right-to-left</value>
        <remarks>
          <para>Return true if the line is all right-to-left text, and the base direction
            is right-to-left</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/android/icu/text/Bidi#isRightToLeft()" title="Reference documentation">Java documentation for <code>android.icu.text.Bidi.isRightToLeft()</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="JniPeerMembers">
      <MemberSignature Language="C#" Value="public override Java.Interop.JniPeerMembers JniPeerMembers { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Java.Interop.JniPeerMembers JniPeerMembers" />
      <MemberSignature Language="DocId" Value="P:Android.Icu.Text.Bidi.JniPeerMembers" />
      <MemberSignature Language="F#" Value="member this.JniPeerMembers : Java.Interop.JniPeerMembers" Usage="Android.Icu.Text.Bidi.JniPeerMembers" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)&gt;]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[System.Diagnostics.DebuggerBrowsable(System.Diagnostics.DebuggerBrowsableState.Never)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Diagnostics.DebuggerBrowsable(System.Diagnostics.DebuggerBrowsableState.Never)&gt;]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[System.Runtime.CompilerServices.Nullable(1)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.Nullable(1)&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Java.Interop.JniPeerMembers</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="KeepBaseCombining">
      <MemberSignature Language="C#" Value="public const short KeepBaseCombining = 1;" />
      <MemberSignature Language="ILAsm" Value=".field public static literal int16 KeepBaseCombining = (1)" />
      <MemberSignature Language="DocId" Value="F:Android.Icu.Text.Bidi.KeepBaseCombining" />
      <MemberSignature Language="F#" Value="val mutable KeepBaseCombining : int16" Usage="Android.Icu.Text.Bidi.KeepBaseCombining" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("KEEP_BASE_COMBINING", ApiSince=29)]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("KEEP_BASE_COMBINING", ApiSince=29)&gt;]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[System.Runtime.Versioning.SupportedOSPlatform("android29.0")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Runtime.Versioning.SupportedOSPlatform("android29.0")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int16</ReturnType>
      </ReturnValue>
      <MemberValue>1</MemberValue>
      <Docs>
        <summary>option bit for writeReordered():
            keep combining characters after their base characters in RTL runs</summary>
        <remarks>
          <para>option bit for writeReordered():
            keep combining characters after their base characters in RTL runs</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/android/icu/text/Bidi#KEEP_BASE_COMBINING" title="Reference documentation">Java documentation for <code>android.icu.text.Bidi.KEEP_BASE_COMBINING</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Length">
      <MemberSignature Language="C#" Value="public virtual int Length { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 Length" />
      <MemberSignature Language="DocId" Value="P:Android.Icu.Text.Bidi.Length" />
      <MemberSignature Language="F#" Value="member this.Length : int" Usage="Android.Icu.Text.Bidi.Length" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[System.Runtime.Versioning.SupportedOSPlatform("android29.0")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Runtime.Versioning.SupportedOSPlatform("android29.0")&gt;]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[get: Android.Runtime.Register("getLength", "()I", "GetGetLengthHandler", ApiSince=29)]</AttributeName>
          <AttributeName Language="F#">[&lt;get: Android.Runtime.Register("getLength", "()I", "GetGetLengthHandler", ApiSince=29)&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Get the length of the text.</summary>
        <value>The length of the text that the <c>Bidi</c> object was
                    created for.</value>
        <remarks>
          <para>Get the length of the text.</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/android/icu/text/Bidi#getLength()" title="Reference documentation">Java documentation for <code>android.icu.text.Bidi.getLength()</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="LevelDefaultLtr">
      <MemberSignature Language="C#" Value="public const sbyte LevelDefaultLtr = 126;" />
      <MemberSignature Language="ILAsm" Value=".field public static literal int8 LevelDefaultLtr = (126)" />
      <MemberSignature Language="DocId" Value="F:Android.Icu.Text.Bidi.LevelDefaultLtr" />
      <MemberSignature Language="F#" Value="val mutable LevelDefaultLtr : sbyte" Usage="Android.Icu.Text.Bidi.LevelDefaultLtr" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("LEVEL_DEFAULT_LTR", ApiSince=29)]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("LEVEL_DEFAULT_LTR", ApiSince=29)&gt;]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[System.Runtime.Versioning.SupportedOSPlatform("android29.0")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Runtime.Versioning.SupportedOSPlatform("android29.0")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.SByte</ReturnType>
      </ReturnValue>
      <MemberValue>126</MemberValue>
      <Docs>
        <summary>Paragraph level setting</summary>
        <remarks>
          <para>Paragraph level setting</para>
          <para>Constant indicating that the base direction depends on the first strong
            directional character in the text according to the Unicode Bidirectional
            Algorithm. If no strong directional character is present,
            then set the paragraph level to 0 (left-to-right).</para>
          <para>If this value is used in conjunction with reordering modes
            <c>REORDER_INVERSE_LIKE_DIRECT</c> or
            <c>REORDER_INVERSE_FOR_NUMBERS_SPECIAL</c>, the text to reorder
            is assumed to be visual LTR, and the text after reordering is required
            to be the corresponding logical string with appropriate contextual
            direction. The direction of the result string will be RTL if either
            the rightmost or leftmost strong character of the source text is RTL
            or Arabic Letter, the direction will be LTR otherwise.</para>
          <para>If reordering option <c>OPTION_INSERT_MARKS</c> is set, an RLM may
            be added at the beginning of the result string to ensure round trip
            (that the result string, when reordered back to visual, will produce
            the original source text).</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/android/icu/text/Bidi#LEVEL_DEFAULT_LTR" title="Reference documentation">Java documentation for <code>android.icu.text.Bidi.LEVEL_DEFAULT_LTR</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="LevelDefaultRtl">
      <MemberSignature Language="C#" Value="public const sbyte LevelDefaultRtl = 127;" />
      <MemberSignature Language="ILAsm" Value=".field public static literal int8 LevelDefaultRtl = (127)" />
      <MemberSignature Language="DocId" Value="F:Android.Icu.Text.Bidi.LevelDefaultRtl" />
      <MemberSignature Language="F#" Value="val mutable LevelDefaultRtl : sbyte" Usage="Android.Icu.Text.Bidi.LevelDefaultRtl" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("LEVEL_DEFAULT_RTL", ApiSince=29)]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("LEVEL_DEFAULT_RTL", ApiSince=29)&gt;]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[System.Runtime.Versioning.SupportedOSPlatform("android29.0")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Runtime.Versioning.SupportedOSPlatform("android29.0")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.SByte</ReturnType>
      </ReturnValue>
      <MemberValue>127</MemberValue>
      <Docs>
        <summary>Paragraph level setting</summary>
        <remarks>
          <para>Paragraph level setting</para>
          <para>Constant indicating that the base direction depends on the first strong
            directional character in the text according to the Unicode Bidirectional
            Algorithm. If no strong directional character is present,
            then set the paragraph level to 1 (right-to-left).</para>
          <para>If this value is used in conjunction with reordering modes
            <c>REORDER_INVERSE_LIKE_DIRECT</c> or
            <c>REORDER_INVERSE_FOR_NUMBERS_SPECIAL</c>, the text to reorder
            is assumed to be visual LTR, and the text after reordering is required
            to be the corresponding logical string with appropriate contextual
            direction. The direction of the result string will be RTL if either
            the rightmost or leftmost strong character of the source text is RTL
            or Arabic Letter, or if the text contains no strong character;
            the direction will be LTR otherwise.</para>
          <para>If reordering option <c>OPTION_INSERT_MARKS</c> is set, an RLM may
            be added at the beginning of the result string to ensure round trip
            (that the result string, when reordered back to visual, will produce
            the original source text).</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/android/icu/text/Bidi#LEVEL_DEFAULT_RTL" title="Reference documentation">Java documentation for <code>android.icu.text.Bidi.LEVEL_DEFAULT_RTL</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="LevelOverride">
      <MemberSignature Language="C#" Value="public const sbyte LevelOverride = -128;" />
      <MemberSignature Language="ILAsm" Value=".field public static literal int8 LevelOverride = (-128)" />
      <MemberSignature Language="DocId" Value="F:Android.Icu.Text.Bidi.LevelOverride" />
      <MemberSignature Language="F#" Value="val mutable LevelOverride : sbyte" Usage="Android.Icu.Text.Bidi.LevelOverride" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("LEVEL_OVERRIDE", ApiSince=29)]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("LEVEL_OVERRIDE", ApiSince=29)&gt;]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[System.Runtime.Versioning.SupportedOSPlatform("android29.0")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Runtime.Versioning.SupportedOSPlatform("android29.0")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.SByte</ReturnType>
      </ReturnValue>
      <MemberValue>-128</MemberValue>
      <Docs>
        <summary>Bit flag for level input.</summary>
        <remarks>
          <para>Bit flag for level input.
            Overrides directional properties.</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/android/icu/text/Bidi#LEVEL_OVERRIDE" title="Reference documentation">Java documentation for <code>android.icu.text.Bidi.LEVEL_OVERRIDE</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Ltr">
      <MemberSignature Language="C#" Value="public const sbyte Ltr = 0;" />
      <MemberSignature Language="ILAsm" Value=".field public static literal int8 Ltr = (0)" />
      <MemberSignature Language="DocId" Value="F:Android.Icu.Text.Bidi.Ltr" />
      <MemberSignature Language="F#" Value="val mutable Ltr : sbyte" Usage="Android.Icu.Text.Bidi.Ltr" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("LTR", ApiSince=29)]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("LTR", ApiSince=29)&gt;]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[System.Runtime.Versioning.SupportedOSPlatform("android29.0")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Runtime.Versioning.SupportedOSPlatform("android29.0")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.SByte</ReturnType>
      </ReturnValue>
      <MemberValue>0</MemberValue>
      <Docs>
        <summary>Left-to-right text.</summary>
        <remarks>
          <para>Left-to-right text.
            &lt;ul&gt;
            &lt;li&gt;As return value for <c>getDirection()</c>, it means
                that the source string contains no right-to-left characters, or
                that the source string is empty and the paragraph level is even.
            &lt;li&gt;As return value for <c>getBaseDirection()</c>, it
                means that the first strong character of the source string has
                a left-to-right direction.
            &lt;/ul&gt;</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/android/icu/text/Bidi#LTR" title="Reference documentation">Java documentation for <code>android.icu.text.Bidi.LTR</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="MapNowhere">
      <MemberSignature Language="C#" Value="public const Android.Icu.Text.BidiOptions MapNowhere = -1;" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype Android.Icu.Text.BidiOptions MapNowhere = (-1)" />
      <MemberSignature Language="DocId" Value="F:Android.Icu.Text.Bidi.MapNowhere" />
      <MemberSignature Language="F#" Value="val mutable MapNowhere : Android.Icu.Text.BidiOptions" Usage="Android.Icu.Text.Bidi.MapNowhere" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("MAP_NOWHERE", ApiSince=29)]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("MAP_NOWHERE", ApiSince=29)&gt;]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[System.Obsolete("This constant will be removed in the future version. Use Android.Icu.Text.BidiOptions enum directly instead of this field.", true)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Obsolete("This constant will be removed in the future version. Use Android.Icu.Text.BidiOptions enum directly instead of this field.", true)&gt;]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[System.Runtime.Versioning.SupportedOSPlatform("android29.0")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Runtime.Versioning.SupportedOSPlatform("android29.0")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Android.Icu.Text.BidiOptions</ReturnType>
      </ReturnValue>
      <MemberValue>-1</MemberValue>
      <Docs>
        <summary>Special value which can be returned by the mapping methods when a
            logical index has no corresponding visual index or vice-versa.</summary>
        <remarks>
          <para>Special value which can be returned by the mapping methods when a
            logical index has no corresponding visual index or vice-versa. This may
            happen for the logical-to-visual mapping of a Bidi control when option
            <c>OPTION_REMOVE_CONTROLS</c> is
            specified. This can also happen for the visual-to-logical mapping of a
            Bidi mark (LRM or RLM) inserted by option
            <c>OPTION_INSERT_MARKS</c>.</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/android/icu/text/Bidi#MAP_NOWHERE" title="Reference documentation">Java documentation for <code>android.icu.text.Bidi.MAP_NOWHERE</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="MaxExplicitLevel">
      <MemberSignature Language="C#" Value="public const sbyte MaxExplicitLevel = 125;" />
      <MemberSignature Language="ILAsm" Value=".field public static literal int8 MaxExplicitLevel = (125)" />
      <MemberSignature Language="DocId" Value="F:Android.Icu.Text.Bidi.MaxExplicitLevel" />
      <MemberSignature Language="F#" Value="val mutable MaxExplicitLevel : sbyte" Usage="Android.Icu.Text.Bidi.MaxExplicitLevel" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("MAX_EXPLICIT_LEVEL", ApiSince=29)]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("MAX_EXPLICIT_LEVEL", ApiSince=29)&gt;]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[System.Runtime.Versioning.SupportedOSPlatform("android29.0")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Runtime.Versioning.SupportedOSPlatform("android29.0")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.SByte</ReturnType>
      </ReturnValue>
      <MemberValue>125</MemberValue>
      <Docs>
        <summary>Maximum explicit embedding level.</summary>
        <remarks>
          <para>Maximum explicit embedding level.
            Same as the max_depth value in the
            <see href="http://www.unicode.org/reports/tr9/#BD2">Unicode Bidirectional Algorithm</see>.
            (The maximum resolved level can be up to <c>MAX_EXPLICIT_LEVEL+1</c>).</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/android/icu/text/Bidi#MAX_EXPLICIT_LEVEL" title="Reference documentation">Java documentation for <code>android.icu.text.Bidi.MAX_EXPLICIT_LEVEL</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Mixed">
      <MemberSignature Language="C#" Value="public const sbyte Mixed = 2;" />
      <MemberSignature Language="ILAsm" Value=".field public static literal int8 Mixed = (2)" />
      <MemberSignature Language="DocId" Value="F:Android.Icu.Text.Bidi.Mixed" />
      <MemberSignature Language="F#" Value="val mutable Mixed : sbyte" Usage="Android.Icu.Text.Bidi.Mixed" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("MIXED", ApiSince=29)]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("MIXED", ApiSince=29)&gt;]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[System.Runtime.Versioning.SupportedOSPlatform("android29.0")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Runtime.Versioning.SupportedOSPlatform("android29.0")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.SByte</ReturnType>
      </ReturnValue>
      <MemberValue>2</MemberValue>
      <Docs>
        <summary>Mixed-directional text.</summary>
        <remarks>
          <para>Mixed-directional text.</para>
          <para>As return value for <c>getDirection()</c>, it means
               that the source string contains both left-to-right and
               right-to-left characters.</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/android/icu/text/Bidi#MIXED" title="Reference documentation">Java documentation for <code>android.icu.text.Bidi.MIXED</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Neutral">
      <MemberSignature Language="C#" Value="public const sbyte Neutral = 3;" />
      <MemberSignature Language="ILAsm" Value=".field public static literal int8 Neutral = (3)" />
      <MemberSignature Language="DocId" Value="F:Android.Icu.Text.Bidi.Neutral" />
      <MemberSignature Language="F#" Value="val mutable Neutral : sbyte" Usage="Android.Icu.Text.Bidi.Neutral" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("NEUTRAL", ApiSince=29)]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("NEUTRAL", ApiSince=29)&gt;]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[System.Runtime.Versioning.SupportedOSPlatform("android29.0")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Runtime.Versioning.SupportedOSPlatform("android29.0")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.SByte</ReturnType>
      </ReturnValue>
      <MemberValue>3</MemberValue>
      <Docs>
        <summary>No strongly directional text.</summary>
        <remarks>
          <para>No strongly directional text.</para>
          <para>As return value for <c>getBaseDirection()</c>, it means
               that the source string is missing or empty, or contains neither
               left-to-right nor right-to-left characters.</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/android/icu/text/Bidi#NEUTRAL" title="Reference documentation">Java documentation for <code>android.icu.text.Bidi.NEUTRAL</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="OptionDefault">
      <MemberSignature Language="C#" Value="public const Android.Icu.Text.BidiOptions OptionDefault = 0;" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype Android.Icu.Text.BidiOptions OptionDefault = (0)" />
      <MemberSignature Language="DocId" Value="F:Android.Icu.Text.Bidi.OptionDefault" />
      <MemberSignature Language="F#" Value="val mutable OptionDefault : Android.Icu.Text.BidiOptions" Usage="Android.Icu.Text.Bidi.OptionDefault" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("OPTION_DEFAULT", ApiSince=29)]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("OPTION_DEFAULT", ApiSince=29)&gt;]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[System.Obsolete("This constant will be removed in the future version. Use Android.Icu.Text.BidiOptions enum directly instead of this field.", true)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Obsolete("This constant will be removed in the future version. Use Android.Icu.Text.BidiOptions enum directly instead of this field.", true)&gt;]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[System.Runtime.Versioning.SupportedOSPlatform("android29.0")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Runtime.Versioning.SupportedOSPlatform("android29.0")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Android.Icu.Text.BidiOptions</ReturnType>
      </ReturnValue>
      <MemberValue>0</MemberValue>
      <Docs>
        <summary>Option value for <c>setReorderingOptions</c>:
            disable all the options which can be set with this method</summary>
        <remarks>
          <para>Option value for <c>setReorderingOptions</c>:
            disable all the options which can be set with this method</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/android/icu/text/Bidi#OPTION_DEFAULT" title="Reference documentation">Java documentation for <code>android.icu.text.Bidi.OPTION_DEFAULT</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="OptionInsertMarks">
      <MemberSignature Language="C#" Value="public const Android.Icu.Text.BidiOptions OptionInsertMarks = 1;" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype Android.Icu.Text.BidiOptions OptionInsertMarks = (1)" />
      <MemberSignature Language="DocId" Value="F:Android.Icu.Text.Bidi.OptionInsertMarks" />
      <MemberSignature Language="F#" Value="val mutable OptionInsertMarks : Android.Icu.Text.BidiOptions" Usage="Android.Icu.Text.Bidi.OptionInsertMarks" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("OPTION_INSERT_MARKS", ApiSince=29)]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("OPTION_INSERT_MARKS", ApiSince=29)&gt;]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[System.Obsolete("This constant will be removed in the future version. Use Android.Icu.Text.BidiOptions enum directly instead of this field.", true)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Obsolete("This constant will be removed in the future version. Use Android.Icu.Text.BidiOptions enum directly instead of this field.", true)&gt;]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[System.Runtime.Versioning.SupportedOSPlatform("android29.0")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Runtime.Versioning.SupportedOSPlatform("android29.0")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Android.Icu.Text.BidiOptions</ReturnType>
      </ReturnValue>
      <MemberValue>1</MemberValue>
      <Docs>
        <summary>Option bit for <c>setReorderingOptions</c>:
            insert Bidi marks (LRM or RLM) when needed to ensure correct result of
            a reordering to a Logical order</summary>
        <remarks>
          <para>Option bit for <c>setReorderingOptions</c>:
            insert Bidi marks (LRM or RLM) when needed to ensure correct result of
            a reordering to a Logical order</para>
          <para>This option must be set or reset before calling
            <c>setPara</c>.</para>
          <para>This option is significant only with reordering modes which generate
            a result with Logical order, specifically.
            &lt;ul&gt;
              &lt;li&gt;<c>REORDER_RUNS_ONLY</c>&lt;/li&gt;
              &lt;li&gt;<c>REORDER_INVERSE_NUMBERS_AS_L</c>&lt;/li&gt;
              &lt;li&gt;<c>REORDER_INVERSE_LIKE_DIRECT</c>&lt;/li&gt;
              &lt;li&gt;<c>REORDER_INVERSE_FOR_NUMBERS_SPECIAL</c>&lt;/li&gt;
            &lt;/ul&gt;</para>
          <para>If this option is set in conjunction with reordering mode
            <c>REORDER_INVERSE_NUMBERS_AS_L</c> or with calling
            <c>setInverse(true)</c>, it implies option
            <c>INSERT_LRM_FOR_NUMERIC</c> in calls to method
            <c>writeReordered()</c>.</para>
          <para>For other reordering modes, a minimum number of LRM or RLM characters
            will be added to the source text after reordering it so as to ensure
            round trip, i.e. when applying the inverse reordering mode on the
            resulting logical text with removal of Bidi marks
            (option <c>OPTION_REMOVE_CONTROLS</c> set before calling
            <c>setPara()</c> or option
            <c>REMOVE_BIDI_CONTROLS</c> in
            <c>writeReordered</c>), the result will be identical to the
            source text in the first transformation.</para>
          <para>This option will be ignored if specified together with option
            <c>OPTION_REMOVE_CONTROLS</c>. It inhibits option
            <c>REMOVE_BIDI_CONTROLS</c> in calls to method
            <c>writeReordered()</c> and it implies option
            <c>INSERT_LRM_FOR_NUMERIC</c> in calls to method
            <c>writeReordered()</c> if the reordering mode is
            <c>REORDER_INVERSE_NUMBERS_AS_L</c>.</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/android/icu/text/Bidi#OPTION_INSERT_MARKS" title="Reference documentation">Java documentation for <code>android.icu.text.Bidi.OPTION_INSERT_MARKS</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="OptionRemoveControls">
      <MemberSignature Language="C#" Value="public const Android.Icu.Text.BidiOptions OptionRemoveControls = 2;" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype Android.Icu.Text.BidiOptions OptionRemoveControls = (2)" />
      <MemberSignature Language="DocId" Value="F:Android.Icu.Text.Bidi.OptionRemoveControls" />
      <MemberSignature Language="F#" Value="val mutable OptionRemoveControls : Android.Icu.Text.BidiOptions" Usage="Android.Icu.Text.Bidi.OptionRemoveControls" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("OPTION_REMOVE_CONTROLS", ApiSince=29)]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("OPTION_REMOVE_CONTROLS", ApiSince=29)&gt;]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[System.Obsolete("This constant will be removed in the future version. Use Android.Icu.Text.BidiOptions enum directly instead of this field.", true)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Obsolete("This constant will be removed in the future version. Use Android.Icu.Text.BidiOptions enum directly instead of this field.", true)&gt;]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[System.Runtime.Versioning.SupportedOSPlatform("android29.0")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Runtime.Versioning.SupportedOSPlatform("android29.0")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Android.Icu.Text.BidiOptions</ReturnType>
      </ReturnValue>
      <MemberValue>2</MemberValue>
      <Docs>
        <summary>Option bit for <c>setReorderingOptions</c>:
            remove Bidi control characters</summary>
        <remarks>
          <para>Option bit for <c>setReorderingOptions</c>:
            remove Bidi control characters</para>
          <para>This option must be set or reset before calling
            <c>setPara</c>.</para>
          <para>This option nullifies option
            <c>OPTION_INSERT_MARKS</c>. It inhibits option
            <c>INSERT_LRM_FOR_NUMERIC</c> in calls to method
            <c>writeReordered()</c> and it implies option
            <c>REMOVE_BIDI_CONTROLS</c> in calls to that method.</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/android/icu/text/Bidi#OPTION_REMOVE_CONTROLS" title="Reference documentation">Java documentation for <code>android.icu.text.Bidi.OPTION_REMOVE_CONTROLS</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="OptionStreaming">
      <MemberSignature Language="C#" Value="public const Android.Icu.Text.BidiOptions OptionStreaming = 4;" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype Android.Icu.Text.BidiOptions OptionStreaming = (4)" />
      <MemberSignature Language="DocId" Value="F:Android.Icu.Text.Bidi.OptionStreaming" />
      <MemberSignature Language="F#" Value="val mutable OptionStreaming : Android.Icu.Text.BidiOptions" Usage="Android.Icu.Text.Bidi.OptionStreaming" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("OPTION_STREAMING", ApiSince=29)]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("OPTION_STREAMING", ApiSince=29)&gt;]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[System.Obsolete("This constant will be removed in the future version. Use Android.Icu.Text.BidiOptions enum directly instead of this field.", true)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Obsolete("This constant will be removed in the future version. Use Android.Icu.Text.BidiOptions enum directly instead of this field.", true)&gt;]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[System.Runtime.Versioning.SupportedOSPlatform("android29.0")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Runtime.Versioning.SupportedOSPlatform("android29.0")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Android.Icu.Text.BidiOptions</ReturnType>
      </ReturnValue>
      <MemberValue>4</MemberValue>
      <Docs>
        <summary>Option bit for <c>setReorderingOptions</c>:
            process the output as part of a stream to be continued</summary>
        <remarks>
          <para>Option bit for <c>setReorderingOptions</c>:
            process the output as part of a stream to be continued</para>
          <para>This option must be set or reset before calling
            <c>setPara</c>.</para>
          <para>This option specifies that the caller is interested in processing
            large text object in parts. The results of the successive calls are
            expected to be concatenated by the caller. Only the call for the last
            part will have this option bit off.</para>
          <para>When this option bit is on, <c>setPara()</c> may process
            less than the full source text in order to truncate the text at a
            meaningful boundary. The caller should call
            <c>getProcessedLength()</c> immediately after calling
            <c>setPara()</c> in order to determine how much of the source
            text has been processed. Source text beyond that length should be
            resubmitted in following calls to <c>setPara</c>. The
            processed length may be less than the length of the source text if a
            character preceding the last character of the source text constitutes a
            reasonable boundary (like a block separator) for text to be continued.&lt;br&gt;
            If the last character of the source text constitutes a reasonable
            boundary, the whole text will be processed at once.&lt;br&gt;
            If nowhere in the source text there exists
            such a reasonable boundary, the processed length will be zero.&lt;br&gt;
            The caller should check for such an occurrence and do one of the following:
            &lt;ul&gt;&lt;li&gt;submit a larger amount of text with a better chance to include
                    a reasonable boundary.&lt;/li&gt;
                &lt;li&gt;resubmit the same text after turning off option
                    <c>OPTION_STREAMING</c>.&lt;/li&gt;&lt;/ul&gt;
            In all cases, this option should be turned off before processing the last
            part of the text.</para>
          <para>When the <c>OPTION_STREAMING</c> option is used, it is
            recommended to call <c>orderParagraphsLTR(true)</c> before calling
            <c>setPara()</c> so that later paragraphs may be concatenated to
            previous paragraphs on the right.</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/android/icu/text/Bidi#OPTION_STREAMING" title="Reference documentation">Java documentation for <code>android.icu.text.Bidi.OPTION_STREAMING</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="OrderParagraphsLTR">
      <MemberSignature Language="C#" Value="public virtual void OrderParagraphsLTR (bool ordarParaLTR);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void OrderParagraphsLTR(bool ordarParaLTR) cil managed" />
      <MemberSignature Language="DocId" Value="M:Android.Icu.Text.Bidi.OrderParagraphsLTR(System.Boolean)" />
      <MemberSignature Language="F#" Value="abstract member OrderParagraphsLTR : bool -&gt; unit&#xA;override this.OrderParagraphsLTR : bool -&gt; unit" Usage="bidi.OrderParagraphsLTR ordarParaLTR" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("orderParagraphsLTR", "(Z)V", "GetOrderParagraphsLTR_ZHandler", ApiSince=29)]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("orderParagraphsLTR", "(Z)V", "GetOrderParagraphsLTR_ZHandler", ApiSince=29)&gt;]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[System.Runtime.Versioning.SupportedOSPlatform("android29.0")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Runtime.Versioning.SupportedOSPlatform("android29.0")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="ordarParaLTR" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="ordarParaLTR">specifies whether paragraph separators (B) must
            receive level 0, so that successive paragraphs progress from left to right.</param>
        <summary>Specify whether block separators must be allocated level zero,
            so that successive paragraphs will progress from left to right.</summary>
        <remarks>
          <para>Specify whether block separators must be allocated level zero,
            so that successive paragraphs will progress from left to right.
            This method must be called before <c>setPara()</c>.
            Paragraph separators (B) may appear in the text.  Setting them to level zero
            means that all paragraph separators (including one possibly appearing
            in the last text position) are kept in the reordered text after the text
            that they follow in the source text.
            When this feature is not enabled, a paragraph separator at the last
            position of the text before reordering will go to the first position
            of the reordered text when the paragraph level is odd.</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/android/icu/text/Bidi#orderParagraphsLTR(boolean)" title="Reference documentation">Java documentation for <code>android.icu.text.Bidi.orderParagraphsLTR(boolean)</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="OutputReverse">
      <MemberSignature Language="C#" Value="public const short OutputReverse = 16;" />
      <MemberSignature Language="ILAsm" Value=".field public static literal int16 OutputReverse = (16)" />
      <MemberSignature Language="DocId" Value="F:Android.Icu.Text.Bidi.OutputReverse" />
      <MemberSignature Language="F#" Value="val mutable OutputReverse : int16" Usage="Android.Icu.Text.Bidi.OutputReverse" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("OUTPUT_REVERSE", ApiSince=29)]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("OUTPUT_REVERSE", ApiSince=29)&gt;]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[System.Runtime.Versioning.SupportedOSPlatform("android29.0")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Runtime.Versioning.SupportedOSPlatform("android29.0")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int16</ReturnType>
      </ReturnValue>
      <MemberValue>16</MemberValue>
      <Docs>
        <summary>option bit for writeReordered():
            write the output in reverse order</summary>
        <remarks>
          <para>option bit for writeReordered():
            write the output in reverse order</para>
          <para>This has the same effect as calling <c>writeReordered()</c>
            first without this option, and then calling
            <c>writeReverse()</c> without mirroring.
            Doing this in the same step is faster and avoids a temporary buffer.
            An example for using this option is output to a character terminal that
            is designed for RTL scripts and stores text in reverse order.</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/android/icu/text/Bidi#OUTPUT_REVERSE" title="Reference documentation">Java documentation for <code>android.icu.text.Bidi.OUTPUT_REVERSE</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ParaLevel">
      <MemberSignature Language="C#" Value="public virtual sbyte ParaLevel { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int8 ParaLevel" />
      <MemberSignature Language="DocId" Value="P:Android.Icu.Text.Bidi.ParaLevel" />
      <MemberSignature Language="F#" Value="member this.ParaLevel : sbyte" Usage="Android.Icu.Text.Bidi.ParaLevel" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[System.Runtime.Versioning.SupportedOSPlatform("android29.0")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Runtime.Versioning.SupportedOSPlatform("android29.0")&gt;]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[get: Android.Runtime.Register("getParaLevel", "()B", "GetGetParaLevelHandler", ApiSince=29)]</AttributeName>
          <AttributeName Language="F#">[&lt;get: Android.Runtime.Register("getParaLevel", "()B", "GetGetParaLevelHandler", ApiSince=29)&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.SByte</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Get the paragraph level of the text.</summary>
        <value>The paragraph level. If there are multiple paragraphs, their
                    level may vary if the required paraLevel is LEVEL_DEFAULT_LTR or
                    LEVEL_DEFAULT_RTL.  In that case, the level of the first paragraph
                    is returned.</value>
        <remarks>
          <para>Get the paragraph level of the text.</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/android/icu/text/Bidi#getParaLevel()" title="Reference documentation">Java documentation for <code>android.icu.text.Bidi.getParaLevel()</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ProcessedLength">
      <MemberSignature Language="C#" Value="public virtual int ProcessedLength { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 ProcessedLength" />
      <MemberSignature Language="DocId" Value="P:Android.Icu.Text.Bidi.ProcessedLength" />
      <MemberSignature Language="F#" Value="member this.ProcessedLength : int" Usage="Android.Icu.Text.Bidi.ProcessedLength" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[System.Runtime.Versioning.SupportedOSPlatform("android29.0")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Runtime.Versioning.SupportedOSPlatform("android29.0")&gt;]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[get: Android.Runtime.Register("getProcessedLength", "()I", "GetGetProcessedLengthHandler", ApiSince=29)]</AttributeName>
          <AttributeName Language="F#">[&lt;get: Android.Runtime.Register("getProcessedLength", "()I", "GetGetProcessedLengthHandler", ApiSince=29)&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Get the length of the source text processed by the last call to
            <c>setPara()</c>.</summary>
        <value>The length of the part of the source text processed by
                    the last call to <c>setPara</c>.</value>
        <remarks>
          <para>Get the length of the source text processed by the last call to
            <c>setPara()</c>. This length may be different from the length of
            the source text if option <c>OPTION_STREAMING</c> has been
            set.
            &lt;br&gt;
            Note that whenever the length of the text affects the execution or the
            result of a method, it is the processed length which must be considered,
            except for <c>setPara</c> (which receives unprocessed source text)
            and <c>getLength</c> (which returns the original length of the
            source text).&lt;br&gt;
            In particular, the processed length is the one to consider in the
            following cases:
            &lt;ul&gt;
            &lt;li&gt;maximum value of the <c>limit</c> argument of
            <c>setLine</c>&lt;/li&gt;
            &lt;li&gt;maximum value of the <c>charIndex</c> argument of
            <c>getParagraph</c>&lt;/li&gt;
            &lt;li&gt;maximum value of the <c>charIndex</c> argument of
            <c>getLevelAt</c>&lt;/li&gt;
            &lt;li&gt;number of elements in the array returned by <c>getLevels</c>&lt;/li&gt;
            &lt;li&gt;maximum value of the <c>logicalStart</c> argument of
            <c>getLogicalRun</c>&lt;/li&gt;
            &lt;li&gt;maximum value of the <c>logicalIndex</c> argument of
            <c>getVisualIndex</c>&lt;/li&gt;
            &lt;li&gt;number of elements returned by <c>getLogicalMap</c>&lt;/li&gt;
            &lt;li&gt;length of text processed by <c>writeReordered</c>&lt;/li&gt;
            &lt;/ul&gt;</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/android/icu/text/Bidi#getProcessedLength()" title="Reference documentation">Java documentation for <code>android.icu.text.Bidi.getProcessedLength()</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="RemoveBidiControls">
      <MemberSignature Language="C#" Value="public const short RemoveBidiControls = 8;" />
      <MemberSignature Language="ILAsm" Value=".field public static literal int16 RemoveBidiControls = (8)" />
      <MemberSignature Language="DocId" Value="F:Android.Icu.Text.Bidi.RemoveBidiControls" />
      <MemberSignature Language="F#" Value="val mutable RemoveBidiControls : int16" Usage="Android.Icu.Text.Bidi.RemoveBidiControls" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("REMOVE_BIDI_CONTROLS", ApiSince=29)]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("REMOVE_BIDI_CONTROLS", ApiSince=29)&gt;]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[System.Runtime.Versioning.SupportedOSPlatform("android29.0")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Runtime.Versioning.SupportedOSPlatform("android29.0")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int16</ReturnType>
      </ReturnValue>
      <MemberValue>8</MemberValue>
      <Docs>
        <summary>option bit for writeReordered():
            remove Bidi control characters
            (this does not affect INSERT_LRM_FOR_NUMERIC)</summary>
        <remarks>
          <para>option bit for writeReordered():
            remove Bidi control characters
            (this does not affect INSERT_LRM_FOR_NUMERIC)</para>
          <para>This option does not imply corresponding adjustment of the index
            mappings.</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/android/icu/text/Bidi#REMOVE_BIDI_CONTROLS" title="Reference documentation">Java documentation for <code>android.icu.text.Bidi.REMOVE_BIDI_CONTROLS</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ReorderDefault">
      <MemberSignature Language="C#" Value="public const short ReorderDefault = 0;" />
      <MemberSignature Language="ILAsm" Value=".field public static literal int16 ReorderDefault = (0)" />
      <MemberSignature Language="DocId" Value="F:Android.Icu.Text.Bidi.ReorderDefault" />
      <MemberSignature Language="F#" Value="val mutable ReorderDefault : int16" Usage="Android.Icu.Text.Bidi.ReorderDefault" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("REORDER_DEFAULT", ApiSince=29)]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("REORDER_DEFAULT", ApiSince=29)&gt;]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[System.Runtime.Versioning.SupportedOSPlatform("android29.0")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Runtime.Versioning.SupportedOSPlatform("android29.0")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int16</ReturnType>
      </ReturnValue>
      <MemberValue>0</MemberValue>
      <Docs>
        <summary>Reordering mode: Regular Logical to Visual Bidi algorithm according to Unicode.</summary>
        <remarks>
          <para>Reordering mode: Regular Logical to Visual Bidi algorithm according to Unicode.</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/android/icu/text/Bidi#REORDER_DEFAULT" title="Reference documentation">Java documentation for <code>android.icu.text.Bidi.REORDER_DEFAULT</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ReorderGroupNumbersWithR">
      <MemberSignature Language="C#" Value="public const short ReorderGroupNumbersWithR = 2;" />
      <MemberSignature Language="ILAsm" Value=".field public static literal int16 ReorderGroupNumbersWithR = (2)" />
      <MemberSignature Language="DocId" Value="F:Android.Icu.Text.Bidi.ReorderGroupNumbersWithR" />
      <MemberSignature Language="F#" Value="val mutable ReorderGroupNumbersWithR : int16" Usage="Android.Icu.Text.Bidi.ReorderGroupNumbersWithR" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("REORDER_GROUP_NUMBERS_WITH_R", ApiSince=29)]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("REORDER_GROUP_NUMBERS_WITH_R", ApiSince=29)&gt;]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[System.Runtime.Versioning.SupportedOSPlatform("android29.0")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Runtime.Versioning.SupportedOSPlatform("android29.0")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int16</ReturnType>
      </ReturnValue>
      <MemberValue>2</MemberValue>
      <Docs>
        <summary>Reordering mode: Logical to Visual algorithm grouping numbers with
            adjacent R characters (reversible algorithm).</summary>
        <remarks>
          <para>Reordering mode: Logical to Visual algorithm grouping numbers with
            adjacent R characters (reversible algorithm).</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/android/icu/text/Bidi#REORDER_GROUP_NUMBERS_WITH_R" title="Reference documentation">Java documentation for <code>android.icu.text.Bidi.REORDER_GROUP_NUMBERS_WITH_R</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ReorderingMode">
      <MemberSignature Language="C#" Value="public virtual Android.Icu.Text.BidiOptions ReorderingMode { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype Android.Icu.Text.BidiOptions ReorderingMode" />
      <MemberSignature Language="DocId" Value="P:Android.Icu.Text.Bidi.ReorderingMode" />
      <MemberSignature Language="F#" Value="member this.ReorderingMode : Android.Icu.Text.BidiOptions with get, set" Usage="Android.Icu.Text.Bidi.ReorderingMode" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[System.Runtime.Versioning.SupportedOSPlatform("android29.0")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Runtime.Versioning.SupportedOSPlatform("android29.0")&gt;]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[get: Android.Runtime.Register("getReorderingMode", "()I", "GetGetReorderingModeHandler", ApiSince=29)]</AttributeName>
          <AttributeName Language="F#">[&lt;get: Android.Runtime.Register("getReorderingMode", "()I", "GetGetReorderingModeHandler", ApiSince=29)&gt;]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[set: Android.Runtime.Register("setReorderingMode", "(I)V", "GetSetReorderingMode_IHandler", ApiSince=29)]</AttributeName>
          <AttributeName Language="F#">[&lt;set: Android.Runtime.Register("setReorderingMode", "(I)V", "GetSetReorderingMode_IHandler", ApiSince=29)&gt;]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[set: System.Runtime.Versioning.SupportedOSPlatform("android29.0")]</AttributeName>
          <AttributeName Language="F#">[&lt;set: System.Runtime.Versioning.SupportedOSPlatform("android29.0")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Android.Icu.Text.BidiOptions</ReturnType>
      </ReturnValue>
      <Docs>
        <param name="reorderingMode">specifies the required variant of the Bidi
                                  algorithm.</param>
        <summary>What is the requested reordering mode for a given Bidi object? -or- Modify the operation of the Bidi algorithm such that it implements some
            variant to the basic Bidi algorithm or approximates an "inverse Bidi"
            algorithm, depending on different values of the "reordering mode".</summary>
        <value>the current reordering mode of the Bidi object</value>
        <remarks>
          <para>Property getter documentation:</para>
          <para>What is the requested reordering mode for a given Bidi object?</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/android/icu/text/Bidi#getReorderingMode()" title="Reference documentation">Java documentation for <code>android.icu.text.Bidi.getReorderingMode()</code>.</a>
            </format>
          </para>
          <para>Property setter documentation:</para>
          <para>Modify the operation of the Bidi algorithm such that it implements some
            variant to the basic Bidi algorithm or approximates an "inverse Bidi"
            algorithm, depending on different values of the "reordering mode".
            This method must be called before <c>setPara()</c>, and stays in
            effect until called again with a different argument.</para>
          <para>The normal operation of the Bidi algorithm as described in the Unicode
            Standard Annex #9 is to take text stored in logical (keyboard, typing)
            order and to determine how to reorder it for visual rendering.</para>
          <para>With the reordering mode set to a value other than
            <c>REORDER_DEFAULT</c>, this method changes the behavior of some of
            the subsequent methods in a way such that they implement an inverse Bidi
            algorithm or some other algorithm variants.</para>
          <para>Some legacy systems store text in visual order, and for operations
            with standard, Unicode-based algorithms, the text needs to be transformed
            into logical order. This is effectively the inverse algorithm of the
            described Bidi algorithm. Note that there is no standard algorithm for
            this "inverse Bidi", so a number of variants are implemented here.</para>
          <para>In other cases, it may be desirable to emulate some variant of the
            Logical to Visual algorithm (e.g. one used in MS Windows), or perform a
            Logical to Logical transformation.
            
            &lt;ul&gt;
            &lt;li&gt;When the Reordering Mode is set to
            <c>REORDER_DEFAULT</c>,
            the standard Bidi Logical to Visual algorithm is applied.&lt;/li&gt;
            
            &lt;li&gt;When the reordering mode is set to
            <c>REORDER_NUMBERS_SPECIAL</c>,
            the algorithm used to perform Bidi transformations when calling
            <c>setPara</c> should approximate the algorithm used in Microsoft
            Windows XP rather than strictly conform to the Unicode Bidi algorithm.
            &lt;br&gt;
            The differences between the basic algorithm and the algorithm addressed
            by this option are as follows:
            &lt;ul&gt;
              &lt;li&gt;Within text at an even embedding level, the sequence "123AB"
              (where AB represent R or AL letters) is transformed to "123BA" by the
              Unicode algorithm and to "BA123" by the Windows algorithm.&lt;/li&gt;
            
              &lt;li&gt;Arabic-Indic numbers (AN) are handled by the Windows algorithm just
              like regular numbers (EN).&lt;/li&gt;
            &lt;/ul&gt;&lt;/li&gt;
            
            &lt;li&gt;When the reordering mode is set to
            <c>REORDER_GROUP_NUMBERS_WITH_R</c>,
            numbers located between LTR text and RTL text are associated with the RTL
            text. For instance, an LTR paragraph with content "abc 123 DEF" (where
            upper case letters represent RTL characters) will be transformed to
            "abc FED 123" (and not "abc 123 FED"), "DEF 123 abc" will be transformed
            to "123 FED abc" and "123 FED abc" will be transformed to "DEF 123 abc".
            This makes the algorithm reversible and makes it useful when round trip
            (from visual to logical and back to visual) must be achieved without
            adding LRM characters. However, this is a variation from the standard
            Unicode Bidi algorithm.&lt;br&gt;
            The source text should not contain Bidi control characters other than LRM
            or RLM.&lt;/li&gt;
            
            &lt;li&gt;When the reordering mode is set to
            <c>REORDER_RUNS_ONLY</c>,
            a "Logical to Logical" transformation must be performed:
            &lt;ul&gt;
            &lt;li&gt;If the default text level of the source text (argument
            <c>paraLevel</c> in <c>setPara</c>) is even, the source text
            will be handled as LTR logical text and will be transformed to the RTL
            logical text which has the same LTR visual display.&lt;/li&gt;
            &lt;li&gt;If the default level of the source text is odd, the source text
            will be handled as RTL logical text and will be transformed to the
            LTR logical text which has the same LTR visual display.&lt;/li&gt;
            &lt;/ul&gt;
            This mode may be needed when logical text which is basically Arabic or
            Hebrew, with possible included numbers or phrases in English, has to be
            displayed as if it had an even embedding level (this can happen if the
            displaying application treats all text as if it was basically LTR).
            &lt;br&gt;
            This mode may also be needed in the reverse case, when logical text which
            is basically English, with possible included phrases in Arabic or Hebrew,
            has to be displayed as if it had an odd embedding level.
            &lt;br&gt;
            Both cases could be handled by adding LRE or RLE at the head of the
            text, if the display subsystem supports these formatting controls. If it
            does not, the problem may be handled by transforming the source text in
            this mode before displaying it, so that it will be displayed properly.
            &lt;br&gt;
            The source text should not contain Bidi control characters other than LRM
            or RLM.&lt;/li&gt;
            
            &lt;li&gt;When the reordering mode is set to
            <c>REORDER_INVERSE_NUMBERS_AS_L</c>, an "inverse Bidi"
            algorithm is applied.
            Runs of text with numeric characters will be treated like LTR letters and
            may need to be surrounded with LRM characters when they are written in
            reordered sequence (the option <c>INSERT_LRM_FOR_NUMERIC</c> can
            be used with method <c>writeReordered</c> to this end. This mode
            is equivalent to calling <c>setInverse()</c> with
            argument <c>isInverse</c> set to <c>true</c>.&lt;/li&gt;
            
            &lt;li&gt;When the reordering mode is set to
            <c>REORDER_INVERSE_LIKE_DIRECT</c>, the "direct" Logical to
            Visual Bidi algorithm is used as an approximation of an "inverse Bidi"
            algorithm. This mode is similar to mode
            <c>REORDER_INVERSE_NUMBERS_AS_L</c> but is closer to the
            regular Bidi algorithm.
            &lt;br&gt;
            For example, an LTR paragraph with the content "FED 123 456 CBA" (where
            upper case represents RTL characters) will be transformed to
            "ABC 456 123 DEF", as opposed to "DEF 123 456 ABC"
            with mode <c>REORDER_INVERSE_NUMBERS_AS_L</c>.&lt;br&gt;
            When used in conjunction with option
            <c>OPTION_INSERT_MARKS</c>, this mode generally
            adds Bidi marks to the output significantly more sparingly than mode
            <c>REORDER_INVERSE_NUMBERS_AS_L</c>.&lt;br&gt; with option
            <c>INSERT_LRM_FOR_NUMERIC</c> in calls to
            <c>writeReordered</c>.&lt;/li&gt;
            
            &lt;li&gt;When the reordering mode is set to
            <c>REORDER_INVERSE_FOR_NUMBERS_SPECIAL</c>, the Logical to Visual
            Bidi algorithm used in Windows XP is used as an approximation of an "inverse
            Bidi" algorithm.
            &lt;br&gt;
            For example, an LTR paragraph with the content "abc FED123" (where
            upper case represents RTL characters) will be transformed to
            "abc 123DEF.&lt;/li&gt;
            &lt;/ul&gt;</para>
          <para>In all the reordering modes specifying an "inverse Bidi" algorithm
            (i.e. those with a name starting with <c>REORDER_INVERSE</c>),
            output runs should be retrieved using <c>getVisualRun()</c>, and
            the output text with <c>writeReordered()</c>. The caller should
            keep in mind that in "inverse Bidi" modes the input is actually visually
            ordered text and reordered output returned by <c>getVisualRun()</c>
            or <c>writeReordered()</c> are actually runs or character string
            of logically ordered output.&lt;br&gt;
            For all the "inverse Bidi" modes, the source text should not contain
            Bidi control characters other than LRM or RLM.</para>
          <para>Note that option <c>OUTPUT_REVERSE</c> of
            <c>writeReordered</c> has no useful meaning and should not be used
            in conjunction with any value of the reordering mode specifying "inverse
            Bidi" or with value <c>REORDER_RUNS_ONLY</c>.</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/android/icu/text/Bidi#setReorderingMode(int)" title="Reference documentation">Java documentation for <code>android.icu.text.Bidi.setReorderingMode(int)</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ReorderingOptions">
      <MemberSignature Language="C#" Value="public virtual Android.Icu.Text.BidiOptions ReorderingOptions { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype Android.Icu.Text.BidiOptions ReorderingOptions" />
      <MemberSignature Language="DocId" Value="P:Android.Icu.Text.Bidi.ReorderingOptions" />
      <MemberSignature Language="F#" Value="member this.ReorderingOptions : Android.Icu.Text.BidiOptions with get, set" Usage="Android.Icu.Text.Bidi.ReorderingOptions" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[System.Runtime.Versioning.SupportedOSPlatform("android29.0")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Runtime.Versioning.SupportedOSPlatform("android29.0")&gt;]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[get: Android.Runtime.Register("getReorderingOptions", "()I", "GetGetReorderingOptionsHandler", ApiSince=29)]</AttributeName>
          <AttributeName Language="F#">[&lt;get: Android.Runtime.Register("getReorderingOptions", "()I", "GetGetReorderingOptionsHandler", ApiSince=29)&gt;]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[set: Android.Runtime.Register("setReorderingOptions", "(I)V", "GetSetReorderingOptions_IHandler", ApiSince=29)]</AttributeName>
          <AttributeName Language="F#">[&lt;set: Android.Runtime.Register("setReorderingOptions", "(I)V", "GetSetReorderingOptions_IHandler", ApiSince=29)&gt;]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[set: System.Runtime.Versioning.SupportedOSPlatform("android29.0")]</AttributeName>
          <AttributeName Language="F#">[&lt;set: System.Runtime.Versioning.SupportedOSPlatform("android29.0")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Android.Icu.Text.BidiOptions</ReturnType>
      </ReturnValue>
      <Docs>
        <param name="options">A combination of zero or more of the following
            reordering options:
            <c>OPTION_DEFAULT</c>, <c>OPTION_INSERT_MARKS</c>,
            <c>OPTION_REMOVE_CONTROLS</c>, <c>OPTION_STREAMING</c>.</param>
        <summary>What are the reordering options applied to a given Bidi object? -or- Specify which of the reordering options should be applied during Bidi
            transformations.</summary>
        <value>the current reordering options of the Bidi object</value>
        <remarks>
          <para>Property getter documentation:</para>
          <para>What are the reordering options applied to a given Bidi object?</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/android/icu/text/Bidi#getReorderingOptions()" title="Reference documentation">Java documentation for <code>android.icu.text.Bidi.getReorderingOptions()</code>.</a>
            </format>
          </para>
          <para>Property setter documentation:</para>
          <para>Specify which of the reordering options should be applied during Bidi
            transformations.</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/android/icu/text/Bidi#setReorderingOptions(int)" title="Reference documentation">Java documentation for <code>android.icu.text.Bidi.setReorderingOptions(int)</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ReorderInverseForNumbersSpecial">
      <MemberSignature Language="C#" Value="public const short ReorderInverseForNumbersSpecial = 6;" />
      <MemberSignature Language="ILAsm" Value=".field public static literal int16 ReorderInverseForNumbersSpecial = (6)" />
      <MemberSignature Language="DocId" Value="F:Android.Icu.Text.Bidi.ReorderInverseForNumbersSpecial" />
      <MemberSignature Language="F#" Value="val mutable ReorderInverseForNumbersSpecial : int16" Usage="Android.Icu.Text.Bidi.ReorderInverseForNumbersSpecial" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("REORDER_INVERSE_FOR_NUMBERS_SPECIAL", ApiSince=29)]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("REORDER_INVERSE_FOR_NUMBERS_SPECIAL", ApiSince=29)&gt;]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[System.Runtime.Versioning.SupportedOSPlatform("android29.0")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Runtime.Versioning.SupportedOSPlatform("android29.0")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int16</ReturnType>
      </ReturnValue>
      <MemberValue>6</MemberValue>
      <Docs>
        <summary>Reordering mode: Inverse Bidi (Visual to Logical) algorithm for the
            <c>REORDER_NUMBERS_SPECIAL</c> Bidi algorithm.</summary>
        <remarks>
          <para>Reordering mode: Inverse Bidi (Visual to Logical) algorithm for the
            <c>REORDER_NUMBERS_SPECIAL</c> Bidi algorithm.</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/android/icu/text/Bidi#REORDER_INVERSE_FOR_NUMBERS_SPECIAL" title="Reference documentation">Java documentation for <code>android.icu.text.Bidi.REORDER_INVERSE_FOR_NUMBERS_SPECIAL</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ReorderInverseLikeDirect">
      <MemberSignature Language="C#" Value="public const short ReorderInverseLikeDirect = 5;" />
      <MemberSignature Language="ILAsm" Value=".field public static literal int16 ReorderInverseLikeDirect = (5)" />
      <MemberSignature Language="DocId" Value="F:Android.Icu.Text.Bidi.ReorderInverseLikeDirect" />
      <MemberSignature Language="F#" Value="val mutable ReorderInverseLikeDirect : int16" Usage="Android.Icu.Text.Bidi.ReorderInverseLikeDirect" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("REORDER_INVERSE_LIKE_DIRECT", ApiSince=29)]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("REORDER_INVERSE_LIKE_DIRECT", ApiSince=29)&gt;]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[System.Runtime.Versioning.SupportedOSPlatform("android29.0")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Runtime.Versioning.SupportedOSPlatform("android29.0")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int16</ReturnType>
      </ReturnValue>
      <MemberValue>5</MemberValue>
      <Docs>
        <summary>Reordering mode: Visual to Logical algorithm equivalent to the regular
            Logical to Visual algorithm.</summary>
        <remarks>
          <para>Reordering mode: Visual to Logical algorithm equivalent to the regular
            Logical to Visual algorithm.</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/android/icu/text/Bidi#REORDER_INVERSE_LIKE_DIRECT" title="Reference documentation">Java documentation for <code>android.icu.text.Bidi.REORDER_INVERSE_LIKE_DIRECT</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ReorderInverseNumbersAsL">
      <MemberSignature Language="C#" Value="public const short ReorderInverseNumbersAsL = 4;" />
      <MemberSignature Language="ILAsm" Value=".field public static literal int16 ReorderInverseNumbersAsL = (4)" />
      <MemberSignature Language="DocId" Value="F:Android.Icu.Text.Bidi.ReorderInverseNumbersAsL" />
      <MemberSignature Language="F#" Value="val mutable ReorderInverseNumbersAsL : int16" Usage="Android.Icu.Text.Bidi.ReorderInverseNumbersAsL" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("REORDER_INVERSE_NUMBERS_AS_L", ApiSince=29)]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("REORDER_INVERSE_NUMBERS_AS_L", ApiSince=29)&gt;]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[System.Runtime.Versioning.SupportedOSPlatform("android29.0")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Runtime.Versioning.SupportedOSPlatform("android29.0")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int16</ReturnType>
      </ReturnValue>
      <MemberValue>4</MemberValue>
      <Docs>
        <summary>Reordering mode: Visual to Logical algorithm which handles numbers
            like L (same algorithm as selected by <c>setInverse(true)</c>.</summary>
        <remarks>
          <para>Reordering mode: Visual to Logical algorithm which handles numbers
            like L (same algorithm as selected by <c>setInverse(true)</c>.</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/android/icu/text/Bidi#REORDER_INVERSE_NUMBERS_AS_L" title="Reference documentation">Java documentation for <code>android.icu.text.Bidi.REORDER_INVERSE_NUMBERS_AS_L</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ReorderLogical">
      <MemberSignature Language="C#" Value="public static int[]? ReorderLogical (byte[]? levels);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int32[] ReorderLogical(unsigned int8[] levels) cil managed" />
      <MemberSignature Language="DocId" Value="M:Android.Icu.Text.Bidi.ReorderLogical(System.Byte[])" />
      <MemberSignature Language="F#" Value="static member ReorderLogical : byte[] -&gt; int[]" Usage="Android.Icu.Text.Bidi.ReorderLogical levels" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("reorderLogical", "([B)[I", "", ApiSince=29)]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("reorderLogical", "([B)[I", "", ApiSince=29)&gt;]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[System.Runtime.Versioning.SupportedOSPlatform("android29.0")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Runtime.Versioning.SupportedOSPlatform("android29.0")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="levels" Type="System.Byte[]" />
      </Parameters>
      <Docs>
        <param name="levels">is an array of levels that have been determined by
                   the application.</param>
        <summary>This is a convenience method that does not use a <c>Bidi</c> object.</summary>
        <returns>an array of <c>levels.length</c>
                   indexes which will reflect the reordering of the characters.&lt;p&gt;
                   The index map will result in
                   <c>indexMap[logicalIndex]==visualIndex</c>, where
                   <c>indexMap</c> represents the returned array.</returns>
        <remarks>
          <para>This is a convenience method that does not use a <c>Bidi</c> object.
            It is intended to be used for when an application has determined the levels
            of objects (character sequences) and just needs to have them reordered (L2).
            This is equivalent to using <c>getLogicalMap()</c> on a
            <c>Bidi</c> object.</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/android/icu/text/Bidi#reorderLogical(byte[])" title="Reference documentation">Java documentation for <code>android.icu.text.Bidi.reorderLogical(byte[])</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ReorderNumbersSpecial">
      <MemberSignature Language="C#" Value="public const short ReorderNumbersSpecial = 1;" />
      <MemberSignature Language="ILAsm" Value=".field public static literal int16 ReorderNumbersSpecial = (1)" />
      <MemberSignature Language="DocId" Value="F:Android.Icu.Text.Bidi.ReorderNumbersSpecial" />
      <MemberSignature Language="F#" Value="val mutable ReorderNumbersSpecial : int16" Usage="Android.Icu.Text.Bidi.ReorderNumbersSpecial" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("REORDER_NUMBERS_SPECIAL", ApiSince=29)]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("REORDER_NUMBERS_SPECIAL", ApiSince=29)&gt;]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[System.Runtime.Versioning.SupportedOSPlatform("android29.0")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Runtime.Versioning.SupportedOSPlatform("android29.0")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int16</ReturnType>
      </ReturnValue>
      <MemberValue>1</MemberValue>
      <Docs>
        <summary>Reordering mode: Logical to Visual algorithm which handles numbers in
            a way which mimicks the behavior of Windows XP.</summary>
        <remarks>
          <para>Reordering mode: Logical to Visual algorithm which handles numbers in
            a way which mimicks the behavior of Windows XP.</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/android/icu/text/Bidi#REORDER_NUMBERS_SPECIAL" title="Reference documentation">Java documentation for <code>android.icu.text.Bidi.REORDER_NUMBERS_SPECIAL</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ReorderRunsOnly">
      <MemberSignature Language="C#" Value="public const short ReorderRunsOnly = 3;" />
      <MemberSignature Language="ILAsm" Value=".field public static literal int16 ReorderRunsOnly = (3)" />
      <MemberSignature Language="DocId" Value="F:Android.Icu.Text.Bidi.ReorderRunsOnly" />
      <MemberSignature Language="F#" Value="val mutable ReorderRunsOnly : int16" Usage="Android.Icu.Text.Bidi.ReorderRunsOnly" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("REORDER_RUNS_ONLY", ApiSince=29)]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("REORDER_RUNS_ONLY", ApiSince=29)&gt;]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[System.Runtime.Versioning.SupportedOSPlatform("android29.0")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Runtime.Versioning.SupportedOSPlatform("android29.0")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int16</ReturnType>
      </ReturnValue>
      <MemberValue>3</MemberValue>
      <Docs>
        <summary>Reordering mode: Reorder runs only to transform a Logical LTR string
            to the logical RTL string with the same display, or vice-versa.</summary>
        <remarks>
          <para>Reordering mode: Reorder runs only to transform a Logical LTR string
            to the logical RTL string with the same display, or vice-versa.&lt;br&gt;
            If this mode is set together with option
            <c>OPTION_INSERT_MARKS</c>, some Bidi controls in the source
            text may be removed and other controls may be added to produce the
            minimum combination which has the required display.</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/android/icu/text/Bidi#REORDER_RUNS_ONLY" title="Reference documentation">Java documentation for <code>android.icu.text.Bidi.REORDER_RUNS_ONLY</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ReorderVisual">
      <MemberSignature Language="C#" Value="public static int[]? ReorderVisual (byte[]? levels);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int32[] ReorderVisual(unsigned int8[] levels) cil managed" />
      <MemberSignature Language="DocId" Value="M:Android.Icu.Text.Bidi.ReorderVisual(System.Byte[])" />
      <MemberSignature Language="F#" Value="static member ReorderVisual : byte[] -&gt; int[]" Usage="Android.Icu.Text.Bidi.ReorderVisual levels" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("reorderVisual", "([B)[I", "", ApiSince=29)]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("reorderVisual", "([B)[I", "", ApiSince=29)&gt;]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[System.Runtime.Versioning.SupportedOSPlatform("android29.0")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Runtime.Versioning.SupportedOSPlatform("android29.0")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="levels" Type="System.Byte[]" />
      </Parameters>
      <Docs>
        <param name="levels">is an array of levels that have been determined by
                   the application.</param>
        <summary>This is a convenience method that does not use a <c>Bidi</c> object.</summary>
        <returns>an array of <c>levels.length</c>
                   indexes which will reflect the reordering of the characters.&lt;p&gt;
                   The index map will result in
                   <c>indexMap[visualIndex]==logicalIndex</c>, where
                   <c>indexMap</c> represents the returned array.</returns>
        <remarks>
          <para>This is a convenience method that does not use a <c>Bidi</c> object.
            It is intended to be used for when an application has determined the levels
            of objects (character sequences) and just needs to have them reordered (L2).
            This is equivalent to using <c>getVisualMap()</c> on a
            <c>Bidi</c> object.</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/android/icu/text/Bidi#reorderVisual(byte[])" title="Reference documentation">Java documentation for <code>android.icu.text.Bidi.reorderVisual(byte[])</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ReorderVisually">
      <MemberSignature Language="C#" Value="public static void ReorderVisually (byte[]? levels, int levelStart, Java.Lang.Object[]? objects, int objectStart, int count);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void ReorderVisually(unsigned int8[] levels, int32 levelStart, class Java.Lang.Object[] objects, int32 objectStart, int32 count) cil managed" />
      <MemberSignature Language="DocId" Value="M:Android.Icu.Text.Bidi.ReorderVisually(System.Byte[],System.Int32,Java.Lang.Object[],System.Int32,System.Int32)" />
      <MemberSignature Language="F#" Value="static member ReorderVisually : byte[] * int * Java.Lang.Object[] * int * int -&gt; unit" Usage="Android.Icu.Text.Bidi.ReorderVisually (levels, levelStart, objects, objectStart, count)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("reorderVisually", "([BI[Ljava/lang/Object;II)V", "", ApiSince=29)]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("reorderVisually", "([BI[Ljava/lang/Object;II)V", "", ApiSince=29)&gt;]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[System.Runtime.Versioning.SupportedOSPlatform("android29.0")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Runtime.Versioning.SupportedOSPlatform("android29.0")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="levels" Type="System.Byte[]" />
        <Parameter Name="levelStart" Type="System.Int32" />
        <Parameter Name="objects" Type="Java.Lang.Object[]">
          <Attributes>
            <Attribute>
              <AttributeName Language="C#">[System.Runtime.CompilerServices.Nullable(new System.Byte[] { 2, 1 })]</AttributeName>
              <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.Nullable(new System.Byte[] { 2, 1 })&gt;]</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
        <Parameter Name="objectStart" Type="System.Int32" />
        <Parameter Name="count" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="levels">an array representing the bidi level of each object</param>
        <param name="levelStart">the start position in the levels array</param>
        <param name="objects">the array of objects to be reordered into visual order</param>
        <param name="objectStart">the start position in the objects array</param>
        <param name="count">the number of objects to reorder</param>
        <summary>Reorder the objects in the array into visual order based on their levels.</summary>
        <remarks>
          <para>Reorder the objects in the array into visual order based on their levels.
            This is a utility method to use when you have a collection of objects
            representing runs of text in logical order, each run containing text at a
            single level. The elements at <c>index</c> from
            <c>objectStart</c> up to <c>objectStart + count</c> in the
            objects array will be reordered into visual order assuming
            each run of text has the level indicated by the corresponding element in
            the levels array (at <c>index - objectStart + levelStart</c>).</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/android/icu/text/Bidi#reorderVisually(byte[],%20int,%20java.lang.Object[],%20int,%20int)" title="Reference documentation">Java documentation for <code>android.icu.text.Bidi.reorderVisually(byte[], int, java.lang.Object[], int, int)</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="RequiresBidi">
      <MemberSignature Language="C#" Value="public static bool RequiresBidi (char[]? text, int start, int limit);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool RequiresBidi(char[] text, int32 start, int32 limit) cil managed" />
      <MemberSignature Language="DocId" Value="M:Android.Icu.Text.Bidi.RequiresBidi(System.Char[],System.Int32,System.Int32)" />
      <MemberSignature Language="F#" Value="static member RequiresBidi : char[] * int * int -&gt; bool" Usage="Android.Icu.Text.Bidi.RequiresBidi (text, start, limit)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("requiresBidi", "([CII)Z", "", ApiSince=29)]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("requiresBidi", "([CII)Z", "", ApiSince=29)&gt;]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[System.Runtime.Versioning.SupportedOSPlatform("android29.0")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Runtime.Versioning.SupportedOSPlatform("android29.0")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="text" Type="System.Char[]" />
        <Parameter Name="start" Type="System.Int32" />
        <Parameter Name="limit" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="text">the text containing the characters to test</param>
        <param name="start">the start of the range of characters to test</param>
        <param name="limit">the limit of the range of characters to test</param>
        <summary>Return true if the specified text requires bidi analysis.</summary>
        <returns>true if the range of characters requires bidi analysis</returns>
        <remarks>
          <para>Return true if the specified text requires bidi analysis. If this returns
            false, the text will display left-to-right. Clients can then avoid
            constructing a Bidi object. Text in the Arabic Presentation Forms area of
            Unicode is presumed to already be shaped and ordered for display, and so
            will not cause this method to return true.</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/android/icu/text/Bidi#requiresBidi(char[],%20int,%20int)" title="Reference documentation">Java documentation for <code>android.icu.text.Bidi.requiresBidi(char[], int, int)</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ResultLength">
      <MemberSignature Language="C#" Value="public virtual int ResultLength { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 ResultLength" />
      <MemberSignature Language="DocId" Value="P:Android.Icu.Text.Bidi.ResultLength" />
      <MemberSignature Language="F#" Value="member this.ResultLength : int" Usage="Android.Icu.Text.Bidi.ResultLength" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[System.Runtime.Versioning.SupportedOSPlatform("android29.0")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Runtime.Versioning.SupportedOSPlatform("android29.0")&gt;]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[get: Android.Runtime.Register("getResultLength", "()I", "GetGetResultLengthHandler", ApiSince=29)]</AttributeName>
          <AttributeName Language="F#">[&lt;get: Android.Runtime.Register("getResultLength", "()I", "GetGetResultLengthHandler", ApiSince=29)&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Get the length of the reordered text resulting from the last call to
            <c>setPara()</c>.</summary>
        <value>The length of the reordered text resulting from
                    the last call to <c>setPara</c>.</value>
        <remarks>
          <para>Get the length of the reordered text resulting from the last call to
            <c>setPara()</c>. This length may be different from the length
            of the source text if option <c>OPTION_INSERT_MARKS</c>
            or option <c>OPTION_REMOVE_CONTROLS</c> has been set.
            &lt;br&gt;
            This resulting length is the one to consider in the following cases:
            &lt;ul&gt;
            &lt;li&gt;maximum value of the <c>visualIndex</c> argument of
            <c>getLogicalIndex</c>&lt;/li&gt;
            &lt;li&gt;number of elements returned by <c>getVisualMap</c>&lt;/li&gt;
            &lt;/ul&gt;
            Note that this length stays identical to the source text length if
            Bidi marks are inserted or removed using option bits of
            <c>writeReordered</c>, or if option
            <c>REORDER_INVERSE_NUMBERS_AS_L</c> has been set.</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/android/icu/text/Bidi#getResultLength()" title="Reference documentation">Java documentation for <code>android.icu.text.Bidi.getResultLength()</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Rtl">
      <MemberSignature Language="C#" Value="public const sbyte Rtl = 1;" />
      <MemberSignature Language="ILAsm" Value=".field public static literal int8 Rtl = (1)" />
      <MemberSignature Language="DocId" Value="F:Android.Icu.Text.Bidi.Rtl" />
      <MemberSignature Language="F#" Value="val mutable Rtl : sbyte" Usage="Android.Icu.Text.Bidi.Rtl" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("RTL", ApiSince=29)]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("RTL", ApiSince=29)&gt;]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[System.Runtime.Versioning.SupportedOSPlatform("android29.0")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Runtime.Versioning.SupportedOSPlatform("android29.0")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.SByte</ReturnType>
      </ReturnValue>
      <MemberValue>1</MemberValue>
      <Docs>
        <summary>Right-to-left text.</summary>
        <remarks>
          <para>Right-to-left text.
            &lt;ul&gt;
            &lt;li&gt;As return value for <c>getDirection()</c>, it means
                that the source string contains no left-to-right characters, or
                that the source string is empty and the paragraph level is odd.
            &lt;li&gt;As return value for <c>getBaseDirection()</c>, it
                means that the first strong character of the source string has
                a right-to-left direction.
            &lt;/ul&gt;</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/android/icu/text/Bidi#RTL" title="Reference documentation">Java documentation for <code>android.icu.text.Bidi.RTL</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="RunCount">
      <MemberSignature Language="C#" Value="public virtual int RunCount { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 RunCount" />
      <MemberSignature Language="DocId" Value="P:Android.Icu.Text.Bidi.RunCount" />
      <MemberSignature Language="F#" Value="member this.RunCount : int" Usage="Android.Icu.Text.Bidi.RunCount" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[System.Runtime.Versioning.SupportedOSPlatform("android29.0")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Runtime.Versioning.SupportedOSPlatform("android29.0")&gt;]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[get: Android.Runtime.Register("getRunCount", "()I", "GetGetRunCountHandler", ApiSince=29)]</AttributeName>
          <AttributeName Language="F#">[&lt;get: Android.Runtime.Register("getRunCount", "()I", "GetGetRunCountHandler", ApiSince=29)&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Return the number of level runs.</summary>
        <value>the number of level runs</value>
        <remarks>
          <para>Return the number of level runs.</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/android/icu/text/Bidi#getRunCount()" title="Reference documentation">Java documentation for <code>android.icu.text.Bidi.getRunCount()</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="SetContext">
      <MemberSignature Language="C#" Value="public virtual void SetContext (string? prologue, string? epilogue);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void SetContext(string prologue, string epilogue) cil managed" />
      <MemberSignature Language="DocId" Value="M:Android.Icu.Text.Bidi.SetContext(System.String,System.String)" />
      <MemberSignature Language="F#" Value="abstract member SetContext : string * string -&gt; unit&#xA;override this.SetContext : string * string -&gt; unit" Usage="bidi.SetContext (prologue, epilogue)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("setContext", "(Ljava/lang/String;Ljava/lang/String;)V", "GetSetContext_Ljava_lang_String_Ljava_lang_String_Handler", ApiSince=29)]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("setContext", "(Ljava/lang/String;Ljava/lang/String;)V", "GetSetContext_Ljava_lang_String_Ljava_lang_String_Handler", ApiSince=29)&gt;]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[System.Runtime.Versioning.SupportedOSPlatform("android29.0")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Runtime.Versioning.SupportedOSPlatform("android29.0")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="prologue" Type="System.String" />
        <Parameter Name="epilogue" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="prologue">is the text which precedes the text that
                   will be specified in a coming call to setPara().
                   If there is no prologue to consider,
                   this parameter can be <c>null</c>.</param>
        <param name="epilogue">is the text which follows the text that
                   will be specified in a coming call to setPara().
                   If there is no epilogue to consider,
                   this parameter can be <c>null</c>.</param>
        <summary>Set the context before a call to setPara().</summary>
        <remarks>
          <para>Set the context before a call to setPara().</para>
          <para>setPara() computes the left-right directionality for a given piece
            of text which is supplied as one of its arguments. Sometimes this piece
            of text (the "main text") should be considered in context, because text
            appearing before ("prologue") and/or after ("epilogue") the main text
            may affect the result of this computation.</para>
          <para>This function specifies the prologue and/or the epilogue for the next
            call to setPara(). If successive calls to setPara()
            all need specification of a context, setContext() must be called
            before each call to setPara(). In other words, a context is not
            "remembered" after the following successful call to setPara().</para>
          <para>If a call to setPara() specifies DEFAULT_LTR or
            DEFAULT_RTL as paraLevel and is preceded by a call to
            setContext() which specifies a prologue, the paragraph level will
            be computed taking in consideration the text in the prologue.</para>
          <para>When setPara() is called without a previous call to
            setContext, the main text is handled as if preceded and followed
            by strong directional characters at the current paragraph level.
            Calling setContext() with specification of a prologue will change
            this behavior by handling the main text as if preceded by the last
            strong character appearing in the prologue, if any.
            Calling setContext() with specification of an epilogue will change
            the behavior of setPara() by handling the main text as if followed
            by the first strong character or digit appearing in the epilogue, if any.</para>
          <para>Note 1: if <c>setContext</c> is called repeatedly without
                    calling <c>setPara</c>, the earlier calls have no effect,
                    only the last call will be remembered for the next call to
                    <c>setPara</c>.</para>
          <para>Note 2: calling <c>setContext(null, null)</c>
                    cancels any previous setting of non-empty prologue or epilogue.
                    The next call to <c>setPara()</c> will process no
                    prologue or epilogue.</para>
          <para>Note 3: users must be aware that even after setting the context
                    before a call to setPara() to perform e.g. a logical to visual
                    transformation, the resulting string may not be identical to what it
                    would have been if all the text, including prologue and epilogue, had
                    been processed together.&lt;br&gt;
            Example (upper case letters represent RTL characters):&lt;br&gt;
            &amp;nbsp;&amp;nbsp;prologue = "<c>abc DE</c>"&lt;br&gt;
            &amp;nbsp;&amp;nbsp;epilogue = none&lt;br&gt;
            &amp;nbsp;&amp;nbsp;main text = "<c>FGH xyz</c>"&lt;br&gt;
            &amp;nbsp;&amp;nbsp;paraLevel = LTR&lt;br&gt;
            &amp;nbsp;&amp;nbsp;display without prologue = "<c>HGF xyz</c>"
                        ("HGF" is adjacent to "xyz")&lt;br&gt;
            &amp;nbsp;&amp;nbsp;display with prologue = "<c>abc HGFED xyz</c>"
                        ("HGF" is not adjacent to "xyz")&lt;br&gt;</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/android/icu/text/Bidi#setContext(java.lang.String,%20java.lang.String)" title="Reference documentation">Java documentation for <code>android.icu.text.Bidi.setContext(java.lang.String, java.lang.String)</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="SetLine">
      <MemberSignature Language="C#" Value="public virtual Android.Icu.Text.Bidi? SetLine (int start, int limit);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Android.Icu.Text.Bidi SetLine(int32 start, int32 limit) cil managed" />
      <MemberSignature Language="DocId" Value="M:Android.Icu.Text.Bidi.SetLine(System.Int32,System.Int32)" />
      <MemberSignature Language="F#" Value="abstract member SetLine : int * int -&gt; Android.Icu.Text.Bidi&#xA;override this.SetLine : int * int -&gt; Android.Icu.Text.Bidi" Usage="bidi.SetLine (start, limit)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("setLine", "(II)Landroid/icu/text/Bidi;", "GetSetLine_IIHandler", ApiSince=29)]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("setLine", "(II)Landroid/icu/text/Bidi;", "GetSetLine_IIHandler", ApiSince=29)&gt;]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[System.Runtime.Versioning.SupportedOSPlatform("android29.0")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Runtime.Versioning.SupportedOSPlatform("android29.0")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Android.Icu.Text.Bidi</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="start" Type="System.Int32" />
        <Parameter Name="limit" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="start">is the line's first index into the text.</param>
        <param name="limit">is just behind the line's last index into the text
                   (its last index +1).</param>
        <summary>
          <c>setLine()</c> returns a <c>Bidi</c> object to
            contain the reordering information, especially the resolved levels,
            for all the characters in a line of text.</summary>
        <returns>a <c>Bidi</c> object that will now represent a line of the text.</returns>
        <remarks>
          <para>
            <c>setLine()</c> returns a <c>Bidi</c> object to
            contain the reordering information, especially the resolved levels,
            for all the characters in a line of text. This line of text is
            specified by referring to a <c>Bidi</c> object representing
            this information for a piece of text containing one or more paragraphs,
            and by specifying a range of indexes in this text.</para>
          <para>In the new line object, the indexes will range from 0 to <c>limit-start-1</c>.</para>
          <para>This is used after calling <c>setPara()</c>
            for a piece of text, and after line-breaking on that text.
            It is not necessary if each paragraph is treated as a single line.</para>
          <para>After line-breaking, rules (L1) and (L2) for the treatment of
            trailing WS and for reordering are performed on
            a <c>Bidi</c> object that represents a line.</para>
          <para>&lt;strong&gt;Important: &lt;/strong&gt;the line <c>Bidi</c> object may
            reference data within the global text <c>Bidi</c> object.
            You should not alter the content of the global text object until
            you are finished using the line object.</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/android/icu/text/Bidi#setLine(int,%20int)" title="Reference documentation">Java documentation for <code>android.icu.text.Bidi.setLine(int, int)</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="SetPara">
      <MemberSignature Language="C#" Value="public virtual void SetPara (Java.Text.IAttributedCharacterIterator? paragraph);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void SetPara(class Java.Text.IAttributedCharacterIterator paragraph) cil managed" />
      <MemberSignature Language="DocId" Value="M:Android.Icu.Text.Bidi.SetPara(Java.Text.IAttributedCharacterIterator)" />
      <MemberSignature Language="F#" Value="abstract member SetPara : Java.Text.IAttributedCharacterIterator -&gt; unit&#xA;override this.SetPara : Java.Text.IAttributedCharacterIterator -&gt; unit" Usage="bidi.SetPara paragraph" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("setPara", "(Ljava/text/AttributedCharacterIterator;)V", "GetSetPara_Ljava_text_AttributedCharacterIterator_Handler", ApiSince=29)]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("setPara", "(Ljava/text/AttributedCharacterIterator;)V", "GetSetPara_Ljava_text_AttributedCharacterIterator_Handler", ApiSince=29)&gt;]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[System.Runtime.Versioning.SupportedOSPlatform("android29.0")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Runtime.Versioning.SupportedOSPlatform("android29.0")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="paragraph" Type="Java.Text.IAttributedCharacterIterator" />
      </Parameters>
      <Docs>
        <param name="paragraph">a paragraph of text with optional character and
                   paragraph attribute information</param>
        <summary>Perform the Unicode Bidi algorithm on a given paragraph, as defined in the
            <see href="https://www.unicode.org/reports/tr9/">Unicode Standard Annex #9</see>,
            version 13,
            also described in The Unicode Standard, Version 4.</summary>
        <remarks>
          <para>Perform the Unicode Bidi algorithm on a given paragraph, as defined in the
            <see href="https://www.unicode.org/reports/tr9/">Unicode Standard Annex #9</see>,
            version 13,
            also described in The Unicode Standard, Version 4.0 .</para>
          <para>This method takes a paragraph of text and computes the
            left-right-directionality of each character. The text should not
            contain any Unicode block separators.</para>
          <para>The RUN_DIRECTION attribute in the text, if present, determines the base
            direction (left-to-right or right-to-left). If not present, the base
            direction is computed using the Unicode Bidirectional Algorithm,
            defaulting to left-to-right if there are no strong directional characters
            in the text. This attribute, if present, must be applied to all the text
            in the paragraph.</para>
          <para>The BIDI_EMBEDDING attribute in the text, if present, represents
            embedding level information.
            Negative values indicate overrides at the absolute value of the level.
            Positive values indicate embeddings. (See <c>#MAX_EXPLICIT_LEVEL</c>.)
            Where values are zero or not defined, the base
            embedding level as determined by the base direction is assumed.</para>
          <para>The NUMERIC_SHAPING attribute in the text, if present, converts European
            digits to other decimal digits before running the bidi algorithm. This
            attribute, if present, must be applied to all the text in the paragraph.
            
            If the entire text is all of the same directionality, then
            the method may not perform all the steps described by the algorithm,
            i.e., some levels may not be the same as if all steps were performed.
            This is not relevant for unidirectional text.&lt;br&gt;
            For example, in pure LTR text with numbers the numbers would get
            a resolved level of 2 higher than the surrounding text according to
            the algorithm. This implementation may set all resolved levels to
            the same value in such a case.</para>
          <para />
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/android/icu/text/Bidi#setPara(java.text.AttributedCharacterIterator)" title="Reference documentation">Java documentation for <code>android.icu.text.Bidi.setPara(java.text.AttributedCharacterIterator)</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="SetPara">
      <MemberSignature Language="C#" Value="public virtual void SetPara (char[]? chars, sbyte paraLevel, byte[]? embeddingLevels);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void SetPara(char[] chars, int8 paraLevel, unsigned int8[] embeddingLevels) cil managed" />
      <MemberSignature Language="DocId" Value="M:Android.Icu.Text.Bidi.SetPara(System.Char[],System.SByte,System.Byte[])" />
      <MemberSignature Language="F#" Value="abstract member SetPara : char[] * sbyte * byte[] -&gt; unit&#xA;override this.SetPara : char[] * sbyte * byte[] -&gt; unit" Usage="bidi.SetPara (chars, paraLevel, embeddingLevels)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("setPara", "([CB[B)V", "GetSetPara_arrayCBarrayBHandler", ApiSince=29)]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("setPara", "([CB[B)V", "GetSetPara_arrayCBarrayBHandler", ApiSince=29)&gt;]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[System.Runtime.Versioning.SupportedOSPlatform("android29.0")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Runtime.Versioning.SupportedOSPlatform("android29.0")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="chars" Type="System.Char[]" />
        <Parameter Name="paraLevel" Type="System.SByte" />
        <Parameter Name="embeddingLevels" Type="System.Byte[]" />
      </Parameters>
      <Docs>
        <param name="chars">contains the text that the Bidi algorithm will be performed
                   on. This text can be retrieved with <c>getText()</c> or
                   <c>getTextAsString</c>.&lt;br&gt;</param>
        <param name="paraLevel">specifies the default level for the text;
                   it is typically 0 (LTR) or 1 (RTL).
                   If the method shall determine the paragraph level from the text,
                   then <c>paraLevel</c> can be set to
                   either <c>LEVEL_DEFAULT_LTR</c>
                   or <c>LEVEL_DEFAULT_RTL</c>; if the text contains multiple
                   paragraphs, the paragraph level shall be determined separately for
                   each paragraph; if a paragraph does not include any strongly typed
                   character, then the desired default is used (0 for LTR or 1 for RTL).
                   Any other value between 0 and <c>MAX_EXPLICIT_LEVEL</c>
                   is also valid, with odd levels indicating RTL.</param>
        <param name="embeddingLevels">(in) may be used to preset the embedding and
                   override levels, ignoring characters like LRE and PDF in the text.
                   A level overrides the directional property of its corresponding
                   (same index) character if the level has the
                   <c>LEVEL_OVERRIDE</c> bit set.&lt;br&gt;&lt;br&gt;
                   Aside from that bit, it must be
                   <c>paraLevel&amp;lt;=embeddingLevels[]&amp;lt;=MAX_EXPLICIT_LEVEL</c>,
                   except that level 0 is always allowed.
                   Level 0 for a paragraph separator prevents reordering of paragraphs;
                   this only works reliably if <c>LEVEL_OVERRIDE</c>
                   is also set for paragraph separators.
                   Level 0 for other characters is treated as a wildcard
                   and is lifted up to the resolved level of the surrounding paragraph.&lt;br&gt;&lt;br&gt;
                   &lt;strong&gt;Caution: &lt;/strong&gt;A reference to this array, not a copy
                   of the levels, will be stored in the <c>Bidi</c> object;
                   the <c>embeddingLevels</c>
                   should not be modified to avoid unexpected results on subsequent
                   Bidi operations. However, the <c>setPara()</c> and
                   <c>setLine()</c> methods may modify some or all of the
                   levels.&lt;br&gt;&lt;br&gt;
                   &lt;strong&gt;Note:&lt;/strong&gt; the <c>embeddingLevels</c> array must
                   have one entry for each character in <c>text</c>.</param>
        <summary>Perform the Unicode Bidi algorithm.</summary>
        <remarks>
          <para>Perform the Unicode Bidi algorithm. It is defined in the
            <see href="http://www.unicode.org/reports/tr9/">Unicode Standard Annex #9</see>.</para>
          <para>This method takes a piece of plain text containing one or more paragraphs,
            with or without externally specified embedding levels from <i>styled</i>
            text and computes the left-right-directionality of each character.</para>
          <para>If the entire text is all of the same directionality, then
            the method may not perform all the steps described by the algorithm,
            i.e., some levels may not be the same as if all steps were performed.
            This is not relevant for unidirectional text.&lt;br&gt;
            For example, in pure LTR text with numbers the numbers would get
            a resolved level of 2 higher than the surrounding text according to
            the algorithm. This implementation may set all resolved levels to
            the same value in such a case.</para>
          <para>The text can be composed of multiple paragraphs. Occurrence of a block
            separator in the text terminates a paragraph, and whatever comes next starts
            a new paragraph. The exception to this rule is when a Carriage Return (CR)
            is followed by a Line Feed (LF). Both CR and LF are block separators, but
            in that case, the pair of characters is considered as terminating the
            preceding paragraph, and a new paragraph will be started by a character
            coming after the LF.</para>
          <para>The text is stored internally as an array of characters. Therefore the
            documentation will refer to indexes of the characters in the text.</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/android/icu/text/Bidi#setPara(char[],%20byte,%20byte[])" title="Reference documentation">Java documentation for <code>android.icu.text.Bidi.setPara(char[], byte, byte[])</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="SetPara">
      <MemberSignature Language="C#" Value="public virtual void SetPara (string? text, sbyte paraLevel, byte[]? embeddingLevels);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void SetPara(string text, int8 paraLevel, unsigned int8[] embeddingLevels) cil managed" />
      <MemberSignature Language="DocId" Value="M:Android.Icu.Text.Bidi.SetPara(System.String,System.SByte,System.Byte[])" />
      <MemberSignature Language="F#" Value="abstract member SetPara : string * sbyte * byte[] -&gt; unit&#xA;override this.SetPara : string * sbyte * byte[] -&gt; unit" Usage="bidi.SetPara (text, paraLevel, embeddingLevels)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("setPara", "(Ljava/lang/String;B[B)V", "GetSetPara_Ljava_lang_String_BarrayBHandler", ApiSince=29)]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("setPara", "(Ljava/lang/String;B[B)V", "GetSetPara_Ljava_lang_String_BarrayBHandler", ApiSince=29)&gt;]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[System.Runtime.Versioning.SupportedOSPlatform("android29.0")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Runtime.Versioning.SupportedOSPlatform("android29.0")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="text" Type="System.String" />
        <Parameter Name="paraLevel" Type="System.SByte" />
        <Parameter Name="embeddingLevels" Type="System.Byte[]" />
      </Parameters>
      <Docs>
        <param name="text">contains the text that the Bidi algorithm will be performed
                   on. This text can be retrieved with <c>getText()</c> or
                   <c>getTextAsString</c>.&lt;br&gt;</param>
        <param name="paraLevel">specifies the default level for the text;
                   it is typically 0 (LTR) or 1 (RTL).
                   If the method shall determine the paragraph level from the text,
                   then <c>paraLevel</c> can be set to
                   either <c>LEVEL_DEFAULT_LTR</c>
                   or <c>LEVEL_DEFAULT_RTL</c>; if the text contains multiple
                   paragraphs, the paragraph level shall be determined separately for
                   each paragraph; if a paragraph does not include any strongly typed
                   character, then the desired default is used (0 for LTR or 1 for RTL).
                   Any other value between 0 and <c>MAX_EXPLICIT_LEVEL</c>
                   is also valid, with odd levels indicating RTL.</param>
        <param name="embeddingLevels">(in) may be used to preset the embedding and override levels,
                   ignoring characters like LRE and PDF in the text.
                   A level overrides the directional property of its corresponding
                   (same index) character if the level has the
                   <c>LEVEL_OVERRIDE</c> bit set.&lt;br&gt;&lt;br&gt;
                   Aside from that bit, it must be
                   <c>paraLevel&amp;lt;=embeddingLevels[]&amp;lt;=MAX_EXPLICIT_LEVEL</c>,
                   except that level 0 is always allowed.
                   Level 0 for a paragraph separator prevents reordering of paragraphs;
                   this only works reliably if <c>LEVEL_OVERRIDE</c>
                   is also set for paragraph separators.
                   Level 0 for other characters is treated as a wildcard
                   and is lifted up to the resolved level of the surrounding paragraph.&lt;br&gt;&lt;br&gt;
                   &lt;strong&gt;Caution: &lt;/strong&gt;A reference to this array, not a copy
                   of the levels, will be stored in the <c>Bidi</c> object;
                   the <c>embeddingLevels</c>
                   should not be modified to avoid unexpected results on subsequent
                   Bidi operations. However, the <c>setPara()</c> and
                   <c>setLine()</c> methods may modify some or all of the
                   levels.&lt;br&gt;&lt;br&gt;
                   &lt;strong&gt;Note:&lt;/strong&gt; the <c>embeddingLevels</c> array must
                   have one entry for each character in <c>text</c>.</param>
        <summary>Perform the Unicode Bidi algorithm.</summary>
        <remarks>
          <para>Perform the Unicode Bidi algorithm. It is defined in the
            <see href="http://www.unicode.org/reports/tr9/">Unicode Standard Annex #9</see>.</para>
          <para>This method takes a piece of plain text containing one or more paragraphs,
            with or without externally specified embedding levels from <i>styled</i>
            text and computes the left-right-directionality of each character.</para>
          <para>If the entire text is all of the same directionality, then
            the method may not perform all the steps described by the algorithm,
            i.e., some levels may not be the same as if all steps were performed.
            This is not relevant for unidirectional text.&lt;br&gt;
            For example, in pure LTR text with numbers the numbers would get
            a resolved level of 2 higher than the surrounding text according to
            the algorithm. This implementation may set all resolved levels to
            the same value in such a case.</para>
          <para>The text can be composed of multiple paragraphs. Occurrence of a block
            separator in the text terminates a paragraph, and whatever comes next starts
            a new paragraph. The exception to this rule is when a Carriage Return (CR)
            is followed by a Line Feed (LF). Both CR and LF are block separators, but
            in that case, the pair of characters is considered as terminating the
            preceding paragraph, and a new paragraph will be started by a character
            coming after the LF.</para>
          <para>Although the text is passed here as a <c>String</c>, it is
            stored internally as an array of characters. Therefore the
            documentation will refer to indexes of the characters in the text.</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/android/icu/text/Bidi#setPara(java.lang.String,%20byte,%20byte[])" title="Reference documentation">Java documentation for <code>android.icu.text.Bidi.setPara(java.lang.String, byte, byte[])</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="TextAsString">
      <MemberSignature Language="C#" Value="public virtual string? TextAsString { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string TextAsString" />
      <MemberSignature Language="DocId" Value="P:Android.Icu.Text.Bidi.TextAsString" />
      <MemberSignature Language="F#" Value="member this.TextAsString : string" Usage="Android.Icu.Text.Bidi.TextAsString" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[System.Runtime.Versioning.SupportedOSPlatform("android29.0")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Runtime.Versioning.SupportedOSPlatform("android29.0")&gt;]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[get: Android.Runtime.Register("getTextAsString", "()Ljava/lang/String;", "GetGetTextAsStringHandler", ApiSince=29)]</AttributeName>
          <AttributeName Language="F#">[&lt;get: Android.Runtime.Register("getTextAsString", "()Ljava/lang/String;", "GetGetTextAsStringHandler", ApiSince=29)&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Get the text.</summary>
        <value>A <c>String</c> containing the text that the
                    <c>Bidi</c> object was created for.</value>
        <remarks>
          <para>Get the text.</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/android/icu/text/Bidi#getTextAsString()" title="Reference documentation">Java documentation for <code>android.icu.text.Bidi.getTextAsString()</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ThresholdClass">
      <MemberSignature Language="C#" Value="protected override IntPtr ThresholdClass { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance native int ThresholdClass" />
      <MemberSignature Language="DocId" Value="P:Android.Icu.Text.Bidi.ThresholdClass" />
      <MemberSignature Language="F#" Value="member this.ThresholdClass : nativeint" Usage="Android.Icu.Text.Bidi.ThresholdClass" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)&gt;]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[System.Diagnostics.DebuggerBrowsable(System.Diagnostics.DebuggerBrowsableState.Never)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Diagnostics.DebuggerBrowsable(System.Diagnostics.DebuggerBrowsableState.Never)&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.IntPtr</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ThresholdType">
      <MemberSignature Language="C#" Value="protected override Type ThresholdType { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Type ThresholdType" />
      <MemberSignature Language="DocId" Value="P:Android.Icu.Text.Bidi.ThresholdType" />
      <MemberSignature Language="F#" Value="member this.ThresholdType : Type" Usage="Android.Icu.Text.Bidi.ThresholdType" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)&gt;]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[System.Diagnostics.DebuggerBrowsable(System.Diagnostics.DebuggerBrowsableState.Never)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Diagnostics.DebuggerBrowsable(System.Diagnostics.DebuggerBrowsableState.Never)&gt;]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[System.Runtime.CompilerServices.Nullable(1)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.Nullable(1)&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Type</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="WriteReordered">
      <MemberSignature Language="C#" Value="public virtual string? WriteReordered (Android.Icu.Text.BidiOptions options);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance string WriteReordered(valuetype Android.Icu.Text.BidiOptions options) cil managed" />
      <MemberSignature Language="DocId" Value="M:Android.Icu.Text.Bidi.WriteReordered(Android.Icu.Text.BidiOptions)" />
      <MemberSignature Language="F#" Value="abstract member WriteReordered : Android.Icu.Text.BidiOptions -&gt; string&#xA;override this.WriteReordered : Android.Icu.Text.BidiOptions -&gt; string" Usage="bidi.WriteReordered options" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("writeReordered", "(I)Ljava/lang/String;", "GetWriteReordered_IHandler", ApiSince=29)]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("writeReordered", "(I)Ljava/lang/String;", "GetWriteReordered_IHandler", ApiSince=29)&gt;]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[System.Runtime.Versioning.SupportedOSPlatform("android29.0")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Runtime.Versioning.SupportedOSPlatform("android29.0")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="options" Type="Android.Icu.Text.BidiOptions">
          <Attributes>
            <Attribute>
              <AttributeName Language="C#">[Android.Runtime.GeneratedEnum]</AttributeName>
              <AttributeName Language="F#">[&lt;Android.Runtime.GeneratedEnum&gt;]</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="options">A bit set of options for the reordering that control
                           how the reordered text is written.
                           The options include mirroring the characters on a code
                           point basis and inserting LRM characters, which is used
                           especially for transforming visually stored text
                           to logically stored text (although this is still an
                           imperfect implementation of an "inverse Bidi" algorithm
                           because it uses the "forward Bidi" algorithm at its core).
                           The available options are:
                           <c>DO_MIRRORING</c>,
                           <c>INSERT_LRM_FOR_NUMERIC</c>,
                           <c>KEEP_BASE_COMBINING</c>,
                           <c>OUTPUT_REVERSE</c>,
                           <c>REMOVE_BIDI_CONTROLS</c>,
                           <c>STREAMING</c></param>
        <summary>Take a <c>Bidi</c> object containing the reordering
            information for a piece of text (one or more paragraphs) set by
            <c>setPara()</c> or for a line of text set by <c>setLine()</c>
            and return a string containing the reordered text.</summary>
        <returns>The reordered text.
                    If the <c>INSERT_LRM_FOR_NUMERIC</c> option is set, then
                    the length of the returned string could be as large as
                    <c>getLength()+2*countRuns()</c>.&lt;br&gt;
                    If the <c>REMOVE_BIDI_CONTROLS</c> option is set, then the
                    length of the returned string may be less than
                    <c>getLength()</c>.&lt;br&gt;
                    If none of these options is set, then the length of the returned
                    string will be exactly <c>getProcessedLength()</c>.</returns>
        <remarks>
          <para>Take a <c>Bidi</c> object containing the reordering
            information for a piece of text (one or more paragraphs) set by
            <c>setPara()</c> or for a line of text set by <c>setLine()</c>
            and return a string containing the reordered text.</para>
          <para>The text may have been aliased (only a reference was stored
            without copying the contents), thus it must not have been modified
            since the <c>setPara()</c> call.
            
            This method preserves the integrity of characters with multiple
            code units and (optionally) combining characters.
            Characters in RTL runs can be replaced by mirror-image characters
            in the returned string. Note that "real" mirroring has to be done in a
            rendering engine by glyph selection and that for many "mirrored"
            characters there are no Unicode characters as mirror-image equivalents.
            There are also options to insert or remove Bidi control
            characters; see the descriptions of the return value and the
            <c>options</c> parameter, and of the option bit flags.</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/android/icu/text/Bidi#writeReordered(int)" title="Reference documentation">Java documentation for <code>android.icu.text.Bidi.writeReordered(int)</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="WriteReverse">
      <MemberSignature Language="C#" Value="public static string? WriteReverse (string? src, Android.Icu.Text.BidiOptions options);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig string WriteReverse(string src, valuetype Android.Icu.Text.BidiOptions options) cil managed" />
      <MemberSignature Language="DocId" Value="M:Android.Icu.Text.Bidi.WriteReverse(System.String,Android.Icu.Text.BidiOptions)" />
      <MemberSignature Language="F#" Value="static member WriteReverse : string * Android.Icu.Text.BidiOptions -&gt; string" Usage="Android.Icu.Text.Bidi.WriteReverse (src, options)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("writeReverse", "(Ljava/lang/String;I)Ljava/lang/String;", "", ApiSince=29)]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("writeReverse", "(Ljava/lang/String;I)Ljava/lang/String;", "", ApiSince=29)&gt;]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[System.Runtime.Versioning.SupportedOSPlatform("android29.0")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Runtime.Versioning.SupportedOSPlatform("android29.0")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="src" Type="System.String" />
        <Parameter Name="options" Type="Android.Icu.Text.BidiOptions">
          <Attributes>
            <Attribute>
              <AttributeName Language="C#">[Android.Runtime.GeneratedEnum]</AttributeName>
              <AttributeName Language="F#">[&lt;Android.Runtime.GeneratedEnum&gt;]</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="src">The RTL run text.</param>
        <param name="options">A bit set of options for the reordering that control
                           how the reordered text is written.
                           See the <c>options</c> parameter in <c>writeReordered()</c>.</param>
        <summary>Reverse a Right-To-Left run of Unicode text.</summary>
        <returns>The reordered text.
                    If the <c>REMOVE_BIDI_CONTROLS</c> option
                    is set, then the length of the returned string may be less than
                    <c>src.length()</c>. If this option is not set,
                    then the length of the returned string will be exactly
                    <c>src.length()</c>.</returns>
        <remarks>
          <para>Reverse a Right-To-Left run of Unicode text.
            
            This method preserves the integrity of characters with multiple
            code units and (optionally) combining characters.
            Characters can be replaced by mirror-image characters
            in the destination buffer. Note that "real" mirroring has
            to be done in a rendering engine by glyph selection
            and that for many "mirrored" characters there are no
            Unicode characters as mirror-image equivalents.
            There are also options to insert or remove Bidi control
            characters.
            
            This method is the implementation for reversing RTL runs as part
            of <c>writeReordered()</c>. For detailed descriptions
            of the parameters, see there.
            Since no Bidi controls are inserted here, the output string length
            will never exceed <c>src.length()</c>.</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/android/icu/text/Bidi#writeReverse(java.lang.String,%20int)" title="Reference documentation">Java documentation for <code>android.icu.text.Bidi.writeReverse(java.lang.String, int)</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>
