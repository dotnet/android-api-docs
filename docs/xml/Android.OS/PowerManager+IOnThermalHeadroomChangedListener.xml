<Type Name="PowerManager+IOnThermalHeadroomChangedListener" FullName="Android.OS.PowerManager+IOnThermalHeadroomChangedListener">
  <TypeSignature Language="C#" Value="public interface PowerManager.IOnThermalHeadroomChangedListener : Android.Runtime.IJavaObject, IDisposable, Java.Interop.IJavaPeerable" />
  <TypeSignature Language="ILAsm" Value=".class nested public interface auto ansi abstract beforefieldinit PowerManager/IOnThermalHeadroomChangedListener implements class Android.Runtime.IJavaObject, class Java.Interop.IJavaPeerable, class System.IDisposable" />
  <TypeSignature Language="DocId" Value="T:Android.OS.PowerManager.IOnThermalHeadroomChangedListener" />
  <TypeSignature Language="F#" Value="type PowerManager.IOnThermalHeadroomChangedListener = interface&#xA;    interface IJavaObject&#xA;    interface IDisposable&#xA;    interface IJavaPeerable" />
  <AssemblyInfo>
    <AssemblyName>Mono.Android</AssemblyName>
    <AssemblyVersion>0.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Interfaces>
    <Interface>
      <InterfaceName>Android.Runtime.IJavaObject</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>Java.Interop.IJavaPeerable</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.IDisposable</InterfaceName>
    </Interface>
  </Interfaces>
  <Attributes>
    <Attribute>
      <AttributeName Language="C#">[Android.Runtime.Register("android/os/PowerManager$OnThermalHeadroomChangedListener", "", "Android.OS.PowerManager/IOnThermalHeadroomChangedListenerInvoker", ApiSince=36)]</AttributeName>
      <AttributeName Language="F#">[&lt;Android.Runtime.Register("android/os/PowerManager$OnThermalHeadroomChangedListener", "", "Android.OS.PowerManager/IOnThermalHeadroomChangedListenerInvoker", ApiSince=36)&gt;]</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>Listener passed to
            <c>PowerManager#addThermalHeadroomListener</c> and
            <c>PowerManager#removeThermalHeadroomListener</c>
            to notify caller of Thermal headroom or thresholds changes.</summary>
    <remarks>
      <para>Listener passed to
            <c>PowerManager#addThermalHeadroomListener</c> and
            <c>PowerManager#removeThermalHeadroomListener</c>
            to notify caller of Thermal headroom or thresholds changes.</para>
      <para>
        <format type="text/html">
          <a href="https://developer.android.com/reference/android/os/PowerManager.OnThermalHeadroomChangedListener" title="Reference documentation">Java documentation for <code>android.os.PowerManager.OnThermalHeadroomChangedListener</code>.</a>
        </format>
      </para>
      <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName="OnThermalHeadroomChanged">
      <MemberSignature Language="C#" Value="public void OnThermalHeadroomChanged (float headroom, float forecastHeadroom, int forecastSeconds, System.Collections.Generic.IDictionary&lt;Java.Lang.Integer,Java.Lang.Float&gt; thresholds);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void OnThermalHeadroomChanged(float32 headroom, float32 forecastHeadroom, int32 forecastSeconds, class System.Collections.Generic.IDictionary`2&lt;class Java.Lang.Integer, class Java.Lang.Float&gt; thresholds) cil managed" />
      <MemberSignature Language="DocId" Value="M:Android.OS.PowerManager.IOnThermalHeadroomChangedListener.OnThermalHeadroomChanged(System.Single,System.Single,System.Int32,System.Collections.Generic.IDictionary{Java.Lang.Integer,Java.Lang.Float})" />
      <MemberSignature Language="F#" Value="abstract member OnThermalHeadroomChanged : single * single * int * System.Collections.Generic.IDictionary&lt;Java.Lang.Integer, Java.Lang.Float&gt; -&gt; unit" Usage="iOnThermalHeadroomChangedListener.OnThermalHeadroomChanged (headroom, forecastHeadroom, forecastSeconds, thresholds)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("onThermalHeadroomChanged", "(FFILjava/util/Map;)V", "GetOnThermalHeadroomChanged_FFILjava_util_Map_Handler:Android.OS.PowerManager/IOnThermalHeadroomChangedListenerInvoker, Mono.Android, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null", ApiSince=36)]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("onThermalHeadroomChanged", "(FFILjava/util/Map;)V", "GetOnThermalHeadroomChanged_FFILjava_util_Map_Handler:Android.OS.PowerManager/IOnThermalHeadroomChangedListenerInvoker, Mono.Android, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null", ApiSince=36)&gt;]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[System.Runtime.Versioning.SupportedOSPlatform("android36.0")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Runtime.Versioning.SupportedOSPlatform("android36.0")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="headroom" Type="System.Single" />
        <Parameter Name="forecastHeadroom" Type="System.Single" />
        <Parameter Name="forecastSeconds" Type="System.Int32" />
        <Parameter Name="thresholds" Type="System.Collections.Generic.IDictionary&lt;Java.Lang.Integer,Java.Lang.Float&gt;" />
      </Parameters>
      <Docs>
        <param name="headroom">current headroom</param>
        <param name="forecastHeadroom">forecasted headroom in future</param>
        <param name="forecastSeconds">how many seconds in the future used in forecast</param>
        <param name="thresholds">new headroom thresholds, see <c>#getThermalHeadroomThresholds()</c></param>
        <summary>Called when overall thermal headroom or headroom thresholds have significantly
            changed that requires action.</summary>
        <remarks>
          <para>Called when overall thermal headroom or headroom thresholds have significantly
            changed that requires action.</para>
          <para>This may not be used to fully replace the <c>#getThermalHeadroom(int)</c> API as it will
            only notify on one of the conditions below that will significantly change one or both
            values of current headroom and headroom thresholds since previous callback:
              1. thermal throttling events: when the skin temperature has cross any of the thresholds
                 and there isn't a previous callback in a short time ago with similar values.
              2. skin temperature threshold change events: note that if the absolute °C threshold
                 values change in a way that does not significantly change the current headroom nor
                 headroom thresholds, it will not trigger any callback. The client should not
                 need to take action in such case since the difference from temperature vs threshold
                 hasn't changed.</para>
          <para>By API version 36, it provides a forecast in the same call for developer's convenience
            based on a <c>forecastSeconds</c> defined by the device, which can be static or dynamic
            varied by OEM. Be aware that it will not notify on forecast temperature change but the
            events mentioned above. So periodically polling against <c>#getThermalHeadroom(int)</c>
            API should still be used to actively monitor temperature forecast in advance.</para>
          <para>This serves as a more advanced option compared to thermal status listener, where the
            latter will only notify on thermal throttling events with status update.</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/android/os/PowerManager.OnThermalHeadroomChangedListener#onThermalHeadroomChanged(float,%20float,%20int,%20java.util.Map%3Cjava.lang.Integer,%20java.lang.Float%3E)" title="Reference documentation">Java documentation for <code>android.os.PowerManager.OnThermalHeadroomChangedListener.onThermalHeadroomChanged(float, float, int, java.util.Map&lt;java.lang.Integer, java.lang.Float&gt;)</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>
