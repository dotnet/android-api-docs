<Type Name="IFreezable" FullName="Android.Icu.Util.IFreezable">
  <TypeSignature Language="C#" Value="public interface IFreezable : IDisposable, Java.Interop.IJavaPeerable, Java.Lang.ICloneable" />
  <TypeSignature Language="ILAsm" Value=".class public interface auto ansi abstract beforefieldinit IFreezable implements class Android.Runtime.IJavaObject, class Java.Interop.IJavaPeerable, class Java.Lang.ICloneable, class System.IDisposable" />
  <TypeSignature Language="DocId" Value="T:Android.Icu.Util.IFreezable" />
  <TypeSignature Language="F#" Value="type IFreezable = interface&#xA;    interface ICloneable&#xA;    interface IJavaObject&#xA;    interface IDisposable&#xA;    interface IJavaPeerable" />
  <AssemblyInfo>
    <AssemblyName>Mono.Android</AssemblyName>
    <AssemblyVersion>0.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Interfaces>
    <Interface>
      <InterfaceName>Android.Runtime.IJavaObject</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>Java.Interop.IJavaPeerable</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>Java.Lang.ICloneable</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.IDisposable</InterfaceName>
    </Interface>
  </Interfaces>
  <Attributes>
    <Attribute>
      <AttributeName Language="C#">[Android.Runtime.Register("android/icu/util/Freezable", "", "Android.Icu.Util.IFreezableInvoker", ApiSince=24)]</AttributeName>
      <AttributeName Language="F#">[&lt;Android.Runtime.Register("android/icu/util/Freezable", "", "Android.Icu.Util.IFreezableInvoker", ApiSince=24)&gt;]</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName Language="C#">[Java.Interop.JavaTypeParameters(new System.String[] { "T" })]</AttributeName>
      <AttributeName Language="F#">[&lt;Java.Interop.JavaTypeParameters(new System.String[] { "T" })&gt;]</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>Provides a flexible mechanism for controlling access, without requiring that
            a class be immutable.</summary>
    <remarks>
      <para>Provides a flexible mechanism for controlling access, without requiring that
            a class be immutable. Once frozen, an object can never be unfrozen, so it is
            thread-safe from that point onward. Once the object has been frozen, 
            it must guarantee that no changes can be made to it. Any attempt to alter 
            it must raise an UnsupportedOperationException exception. This means that when 
            the object returns internal objects, or if anyone has references to those internal
            objects, that those internal objects must either be immutable, or must also
            raise exceptions if any attempt to modify them is made. Of course, the object
            can return clones of internal objects, since those are safe.
            &lt;h2&gt;Background&lt;/h2&gt;</para>
      <para>There are often times when you need objects to be objects 'safe', so that
            they can't be modified. Examples are when objects need to be thread-safe, or
            in writing robust code, or in caches. If you are only creating your own
            objects, you can guarantee this, of course -- but only if you don't make a
            mistake. If you have objects handed into you, or are creating objects using
            others handed into you, it is a different story. It all comes down to whether
            you want to take the Blanche Dubois approach (&amp;quot;depend on the kindness of
            strangers&amp;quot;) or the Andy Grove approach (&amp;quot;Only the Paranoid
            Survive&amp;quot;).</para>
      <para>For example, suppose we have a simple class:</para>
      <code lang="text/java">public class A {
                 protected Collection b;
            
                 protected Collection c;
            
                 public Collection get_b() {
                         return b;
                 }
            
                 public Collection get_c() {
                         return c;
                 }
            
                 public A(Collection new_b, Collection new_c) {
                         b = new_b;
                         c = new_c;
                 }
            }
            </code>
      <para>Since the class doesn't have any setters, someone might think that it is
            immutable. You know where this is leading, of course; this class is unsafe in
            a number of ways. The following illustrates that.</para>
      <code lang="text/java">public test1(SupposedlyImmutableClass x, SafeStorage y) {
               // unsafe getter
               A a = x.getA();
               Collection col = a.get_b();
               col.add(something); // a has now been changed, and x too
            
               // unsafe constructor
               a = new A(col, col);
               y.store(a);
               col.add(something); // a has now been changed, and y too
             }
            </code>
      <para>There are a few different techniques for having safe classes.</para>
      <para>&lt;ol&gt;
            &lt;li&gt;Const objects. In C++, you can declare parameters const.&lt;/li&gt;
            &lt;li&gt;Immutable wrappers. For example, you can put a collection in an
            immutable wrapper.&lt;/li&gt;
            &lt;li&gt;Always-Immutable objects. Java uses this approach, with a few
            variations. Examples:
            &lt;ol&gt;
            &lt;li&gt;Simple. Once a Color is created (eg from R, G, and B integers) it is
            immutable.&lt;/li&gt;
            &lt;li&gt;Builder Class. There is a separate 'builder' class. For example,
            modifiable Strings are created using StringBuffer (which doesn't have the
            full String API available). Once you want an immutable form, you create one
            with toString().&lt;/li&gt;
            &lt;li&gt;Primitives. These are always safe, since they are copied on input/output
            from methods.&lt;/li&gt;
            &lt;/ol&gt;
            &lt;/li&gt;
            &lt;li&gt;Cloning. Where you need an object to be safe, you clone it.&lt;/li&gt;
            &lt;/ol&gt;</para>
      <para>There are advantages and disadvantages of each of these.</para>
      <para>&lt;ol&gt;
            &lt;li&gt;Const provides a certain level of protection, but since const can be and
            is often cast away, it only protects against most inadvertent mistakes. It
            also offers no threading protection, since anyone who has a pointer to the
            (unconst) object in another thread can mess you up.&lt;/li&gt;
            &lt;li&gt;Immutable wrappers are safer than const in that the constness can't be
            cast away. But other than that they have all the same problems: not safe if
            someone else keeps hold of the original object, or if any of the objects
            returned by the class are mutable.&lt;/li&gt;
            &lt;li&gt;Always-Immutable Objects are safe, but usage can require excessive
            object creation.&lt;/li&gt;
            &lt;li&gt;Cloning is only safe if the object truly has a 'safe' clone; defined as
            one that <i>ensures that no change to the clone affects the original</i>.
            Unfortunately, many objects don't have a 'safe' clone, and always cloning can
            require excessive object creation.&lt;/li&gt;
            &lt;/ol&gt;
            &lt;h2&gt;Freezable Model&lt;/h2&gt;</para>
      <para>The <c>Freezable</c> model supplements these choices by giving you
            the ability to build up an object by calling various methods, then when it is
            in a final state, you can <i>make</i> it immutable. Once immutable, an
            object cannot <i>ever </i>be modified, and is completely thread-safe: that
            is, multiple threads can have references to it without any synchronization.
            If someone needs a mutable version of an object, they can use
            <c>cloneAsThawed()</c>, and modify the copy. This provides a simple,
            effective mechanism for safe classes in circumstances where the alternatives
            are insufficient or clumsy. (If an object is shared before it is immutable,
            then it is the responsibility of each thread to mutex its usage (as with
            other objects).)</para>
      <para>Here is what needs to be done to implement this interface, depending on the
            type of the object.</para>
      <para>&lt;h3&gt;&lt;b&gt;Immutable Objects&lt;/b&gt;&lt;/h3&gt;</para>
      <para>These are the easiest. You just use the interface to reflect that, by adding
            the following:</para>
      <code lang="text/java">public class A implements Freezable&amp;lt;A&amp;gt; {
              ...
              public final boolean isFrozen() {return true;}
              public final A freeze() {return this;}
              public final A cloneAsThawed() { return this; }
              }
            </code>
      <para>These can be final methods because subclasses of immutable objects must
            themselves be immutable. (Note: <c>freeze</c> is returning
            <c>this</c> for chaining.)</para>
      <para>&lt;h3&gt;&lt;b&gt;Mutable Objects&lt;/b&gt;&lt;/h3&gt;</para>
      <para>Add a protected 'flagging' field:</para>
      <code lang="text/java">protected volatile boolean frozen; // WARNING: must be volatile
            </code>
      <para>Add the following methods:</para>
      <code lang="text/java">public final boolean isFrozen() {
                 return frozen;
            };
            
            public A freeze() {
                 frozen = true;  // WARNING: must be final statement before return
                 return this;
            }
            </code>
      <para>Add a <c>cloneAsThawed()</c> method following the normal pattern for
            <c>clone()</c>, except that <c>frozen=false</c> in the new
            clone.</para>
      <para>Then take the setters (that is, any method that can change the internal state
            of the object), and add the following as the first statement:</para>
      <code lang="text/java">if (isFrozen()) {
                 throw new UnsupportedOperationException(&amp;quot;Attempt to modify frozen object&amp;quot;);
            }
            </code>
      <para>&lt;h4&gt;&lt;b&gt;Subclassing&lt;/b&gt;&lt;/h4&gt;</para>
      <para>Any subclass of a <c>Freezable</c> will just use its superclass's
            flagging field. It must override <c>freeze()</c> and
            <c>cloneAsThawed()</c> to call the superclass, but normally does not
            override <c>isFrozen()</c>. It must then just pay attention to its
            own getters, setters and fields.</para>
      <para>&lt;h4&gt;&lt;b&gt;Internal Caches&lt;/b&gt;&lt;/h4&gt;</para>
      <para>Internal caches are cases where the object is logically unmodified, but
            internal state of the object changes. For example, there are const C++
            functions that cast away the const on the &amp;quot;this&amp;quot; pointer in order
            to modify an object cache. These cases are handled by mutexing the internal
            cache to ensure thread-safety. For example, suppose that UnicodeSet had an
            internal marker to the last code point accessed. In this case, the field is
            not externally visible, so the only thing you need to do is to synchronize
            the field for thread safety.</para>
      <para>&lt;h4&gt;Unsafe Internal Access&lt;/h4&gt;</para>
      <para>Internal fields are called <i>safe</i> if they are either
            <c>frozen</c> or immutable (such as String or primitives). If you've
            never allowed internal access to these, then you are all done. For example,
            converting UnicodeSet to be <c>Freezable</c> is just accomplished
            with the above steps. But remember that you <i>&lt;b&gt;have&lt;/b&gt;</i> allowed
            access to unsafe internals if you have any code like the following, in a
            getter, setter, or constructor:</para>
      <code lang="text/java">Collection getStuff() {
                 return stuff;
            } // caller could keep reference &amp;amp; modify
            
            void setStuff(Collection x) {
                 stuff = x;
            } // caller could keep reference &amp;amp; modify
            
            MyClass(Collection x) {
                 stuff = x;
            } // caller could keep reference &amp;amp; modify
            </code>
      <para>These also illustrated in the code sample in &lt;b&gt;Background&lt;/b&gt; above.</para>
      <para>To deal with unsafe internals, the simplest course of action is to do the
            work in the <c>freeze()</c> function. Just make all of your internal
            fields frozen, and set the frozen flag. Any subsequent getter/setter will
            work properly. Here is an example:</para>
      <para>&lt;b&gt;Warning!&lt;/b&gt; The 'frozen' boolean MUST be volatile, and must be set as the last statement
            in the method.</para>
      <code lang="text/java">public A freeze() {
                 if (!frozen) {
                         foo.freeze();
                         frozen = true;
                 }
                 return this;
            }
            </code>
      <para>If the field is a <c>Collection</c> or <c>Map</c>, then to
            make it frozen you have two choices. If you have never allowed access to the
            collection from outside your object, then just wrap it to prevent future
            modification.</para>
      <code lang="text/java">zone_to_country = Collections.unmodifiableMap(zone_to_country);
            </code>
      <para>If you have <i>ever</i> allowed access, then do a <c>clone()</c>
            before wrapping it.</para>
      <code lang="text/java">zone_to_country = Collections.unmodifiableMap(zone_to_country.clone());
            </code>
      <para>If a collection <i>(or any other container of objects)</i> itself can
            contain mutable objects, then for a safe clone you need to recurse through it
            to make the entire collection immutable. The recursing code should pick the
            most specific collection available, to avoid the necessity of later
            downcasing.</para>
      <para>&lt;blockquote&gt;</para>
      <para>&lt;b&gt;Note: &lt;/b&gt;An annoying flaw in Java is that the generic collections, like
            <c>Map</c> or <c>Set</c>, don't have a <c>clone()</c>
            operation. When you don't know the type of the collection, the simplest
            course is to just create a new collection:</para>
      <code lang="text/java">zone_to_country = Collections.unmodifiableMap(new HashMap(zone_to_country));
            </code>
      <para>&lt;/blockquote&gt;</para>
      <para>
        <format type="text/html">
          <a href="https://developer.android.com/reference/android/icu/util/Freezable" title="Reference documentation">Java documentation for <code>android.icu.util.Freezable</code>.</a>
        </format>
      </para>
      <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName="CloneAsThawed">
      <MemberSignature Language="C#" Value="public Java.Lang.Object? CloneAsThawed ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Java.Lang.Object CloneAsThawed() cil managed" />
      <MemberSignature Language="DocId" Value="M:Android.Icu.Util.IFreezable.CloneAsThawed" />
      <MemberSignature Language="F#" Value="abstract member CloneAsThawed : unit -&gt; Java.Lang.Object" Usage="iFreezable.CloneAsThawed " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("cloneAsThawed", "()Ljava/lang/Object;", "GetCloneAsThawedHandler:Android.Icu.Util.IFreezableInvoker, Mono.Android, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null", ApiSince=24)]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("cloneAsThawed", "()Ljava/lang/Object;", "GetCloneAsThawedHandler:Android.Icu.Util.IFreezableInvoker, Mono.Android, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null", ApiSince=24)&gt;]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[System.Runtime.Versioning.SupportedOSPlatform("android24.0")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Runtime.Versioning.SupportedOSPlatform("android24.0")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Java.Lang.Object</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Provides for the clone operation.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para>Provides for the clone operation. Any clone is initially unfrozen.</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/android/icu/util/Freezable#cloneAsThawed()" title="Reference documentation">Java documentation for <code>android.icu.util.Freezable.cloneAsThawed()</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Freeze">
      <MemberSignature Language="C#" Value="public Java.Lang.Object? Freeze ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Java.Lang.Object Freeze() cil managed" />
      <MemberSignature Language="DocId" Value="M:Android.Icu.Util.IFreezable.Freeze" />
      <MemberSignature Language="F#" Value="abstract member Freeze : unit -&gt; Java.Lang.Object" Usage="iFreezable.Freeze " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("freeze", "()Ljava/lang/Object;", "GetFreezeHandler:Android.Icu.Util.IFreezableInvoker, Mono.Android, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null", ApiSince=24)]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("freeze", "()Ljava/lang/Object;", "GetFreezeHandler:Android.Icu.Util.IFreezableInvoker, Mono.Android, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null", ApiSince=24)&gt;]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[System.Runtime.Versioning.SupportedOSPlatform("android24.0")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Runtime.Versioning.SupportedOSPlatform("android24.0")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Java.Lang.Object</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Freezes the object.</summary>
        <returns>the object itself.</returns>
        <remarks>
          <para>Freezes the object.</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/android/icu/util/Freezable#freeze()" title="Reference documentation">Java documentation for <code>android.icu.util.Freezable.freeze()</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsFrozen">
      <MemberSignature Language="C#" Value="public bool IsFrozen { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsFrozen" />
      <MemberSignature Language="DocId" Value="P:Android.Icu.Util.IFreezable.IsFrozen" />
      <MemberSignature Language="F#" Value="member this.IsFrozen : bool" Usage="Android.Icu.Util.IFreezable.IsFrozen" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[get: Android.Runtime.Register("isFrozen", "()Z", "GetIsFrozenHandler:Android.Icu.Util.IFreezableInvoker, Mono.Android, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null", ApiSince=24)]</AttributeName>
          <AttributeName Language="F#">[&lt;get: Android.Runtime.Register("isFrozen", "()Z", "GetIsFrozenHandler:Android.Icu.Util.IFreezableInvoker, Mono.Android, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null", ApiSince=24)&gt;]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[get: System.Runtime.Versioning.SupportedOSPlatform("android24.0")]</AttributeName>
          <AttributeName Language="F#">[&lt;get: System.Runtime.Versioning.SupportedOSPlatform("android24.0")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <value>To be added.</value>
        <remarks>
          <para>Portions of this page are modifications based on work created and shared by the <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format> and used according to terms described in the <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>
