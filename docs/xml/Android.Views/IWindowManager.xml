<Type Name="IWindowManager" FullName="Android.Views.IWindowManager">
  <TypeSignature Language="C#" Value="public interface IWindowManager : Android.Views.IViewManager, IDisposable, Java.Interop.IJavaPeerable" />
  <TypeSignature Language="ILAsm" Value=".class public interface auto ansi abstract beforefieldinit IWindowManager implements class Android.Runtime.IJavaObject, class Android.Views.IViewManager, class Java.Interop.IJavaPeerable, class System.IDisposable" />
  <TypeSignature Language="DocId" Value="T:Android.Views.IWindowManager" />
  <TypeSignature Language="F#" Value="type IWindowManager = interface&#xA;    interface IViewManager&#xA;    interface IJavaObject&#xA;    interface IDisposable&#xA;    interface IJavaPeerable" />
  <AssemblyInfo>
    <AssemblyName>Mono.Android</AssemblyName>
    <AssemblyVersion>0.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Interfaces>
    <Interface>
      <InterfaceName>Android.Runtime.IJavaObject</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>Android.Views.IViewManager</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>Java.Interop.IJavaPeerable</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.IDisposable</InterfaceName>
    </Interface>
  </Interfaces>
  <Attributes>
    <Attribute>
      <AttributeName Language="C#">[Android.Runtime.Register("android/view/WindowManager", "", "Android.Views.IWindowManagerInvoker")]</AttributeName>
      <AttributeName Language="F#">[&lt;Android.Runtime.Register("android/view/WindowManager", "", "Android.Views.IWindowManagerInvoker")&gt;]</AttributeName>
    </Attribute>
  </Attributes>
  <Docs since="1">
    <summary>The interface that apps use to talk to the window manager.</summary>
    <remarks>
      <para>The interface that apps use to talk to the window manager.</para>
      <para>Each window manager instance is bound to a <c>Display</c>. To obtain the
            <c>WindowManager</c> associated with a display,
            call <c>Context#createWindowContext(Display, int, Bundle)</c> to get the display's UI context,
            then call <c>Context#getSystemService(String)</c> or <c>Context#getSystemService(Class)</c> on
            the UI context.</para>
      <para>The simplest way to show a window on a particular display is to create a <c>Presentation</c>,
            which automatically obtains a <c>WindowManager</c> and context for the display.</para>
      <para>
        <format type="text/html">
          <a href="https://developer.android.com/reference/android/view/WindowManager" title="Reference documentation">Java documentation for <code>android.view.WindowManager</code>.</a>
        </format>
      </para>
      <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
    </remarks>
    <since version="Added in API level 1" />
  </Docs>
  <Members>
    <Member MemberName="AddCrossWindowBlurEnabledListener">
      <MemberSignature Language="C#" Value="public virtual void AddCrossWindowBlurEnabledListener (Java.Util.Functions.IConsumer listener);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void AddCrossWindowBlurEnabledListener(class Java.Util.Functions.IConsumer listener) cil managed" />
      <MemberSignature Language="DocId" Value="M:Android.Views.IWindowManager.AddCrossWindowBlurEnabledListener(Java.Util.Functions.IConsumer)" />
      <MemberSignature Language="F#" Value="abstract member AddCrossWindowBlurEnabledListener : Java.Util.Functions.IConsumer -&gt; unit&#xA;override this.AddCrossWindowBlurEnabledListener : Java.Util.Functions.IConsumer -&gt; unit" Usage="iWindowManager.AddCrossWindowBlurEnabledListener listener" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("addCrossWindowBlurEnabledListener", "(Ljava/util/function/Consumer;)V", "GetAddCrossWindowBlurEnabledListener_Ljava_util_function_Consumer_Handler:Android.Views.IWindowManager, Mono.Android, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null", ApiSince=31)]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("addCrossWindowBlurEnabledListener", "(Ljava/util/function/Consumer;)V", "GetAddCrossWindowBlurEnabledListener_Ljava_util_function_Consumer_Handler:Android.Views.IWindowManager, Mono.Android, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null", ApiSince=31)&gt;]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[System.Runtime.Versioning.SupportedOSPlatform("android31.0")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Runtime.Versioning.SupportedOSPlatform("android31.0")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="listener" Type="Java.Util.Functions.IConsumer" />
      </Parameters>
      <Docs>
        <param name="listener">the listener to be added. It will be called back with a boolean parameter,
                            which is true if cross-window blur is enabled and false if it is disabled</param>
        <summary>Adds a listener, which will be called when cross-window blurs are enabled/disabled at
            runtime.</summary>
        <remarks>
          <para>Adds a listener, which will be called when cross-window blurs are enabled/disabled at
            runtime. This affects both window blur behind (see <c>LayoutParams#setBlurBehindRadius</c>)
            and window background blur (see <c>Window#setBackgroundBlurRadius</c>).</para>
          <para>Cross-window blur might not be supported by some devices due to GPU limitations. It can also
            be disabled at runtime, e.g. during battery saving mode, when multimedia tunneling is used or
            when minimal post processing is requested. In such situations, no blur will be computed or
            drawn, so the blur target area will not be blurred. To handle this, the app might want to
            change its theme to one that does not use blurs.</para>
          <para>The listener will be called on the main thread.</para>
          <para>If the listener is added successfully, it will be called immediately with the current
            cross-window blur enabled state.</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/android/view/WindowManager#addCrossWindowBlurEnabledListener(java.util.function.Consumer%3Cjava.lang.Boolean%3E)" title="Reference documentation">Java documentation for <code>android.view.WindowManager.addCrossWindowBlurEnabledListener(java.util.function.Consumer&lt;java.lang.Boolean&gt;)</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="AddCrossWindowBlurEnabledListener">
      <MemberSignature Language="C#" Value="public virtual void AddCrossWindowBlurEnabledListener (Java.Util.Concurrent.IExecutor executor, Java.Util.Functions.IConsumer listener);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void AddCrossWindowBlurEnabledListener(class Java.Util.Concurrent.IExecutor executor, class Java.Util.Functions.IConsumer listener) cil managed" />
      <MemberSignature Language="DocId" Value="M:Android.Views.IWindowManager.AddCrossWindowBlurEnabledListener(Java.Util.Concurrent.IExecutor,Java.Util.Functions.IConsumer)" />
      <MemberSignature Language="F#" Value="abstract member AddCrossWindowBlurEnabledListener : Java.Util.Concurrent.IExecutor * Java.Util.Functions.IConsumer -&gt; unit&#xA;override this.AddCrossWindowBlurEnabledListener : Java.Util.Concurrent.IExecutor * Java.Util.Functions.IConsumer -&gt; unit" Usage="iWindowManager.AddCrossWindowBlurEnabledListener (executor, listener)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("addCrossWindowBlurEnabledListener", "(Ljava/util/concurrent/Executor;Ljava/util/function/Consumer;)V", "GetAddCrossWindowBlurEnabledListener_Ljava_util_concurrent_Executor_Ljava_util_function_Consumer_Handler:Android.Views.IWindowManager, Mono.Android, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null", ApiSince=31)]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("addCrossWindowBlurEnabledListener", "(Ljava/util/concurrent/Executor;Ljava/util/function/Consumer;)V", "GetAddCrossWindowBlurEnabledListener_Ljava_util_concurrent_Executor_Ljava_util_function_Consumer_Handler:Android.Views.IWindowManager, Mono.Android, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null", ApiSince=31)&gt;]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[System.Runtime.Versioning.SupportedOSPlatform("android31.0")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Runtime.Versioning.SupportedOSPlatform("android31.0")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="executor" Type="Java.Util.Concurrent.IExecutor" />
        <Parameter Name="listener" Type="Java.Util.Functions.IConsumer" />
      </Parameters>
      <Docs>
        <param name="executor">
          <c>Executor</c> to handle the listener callback</param>
        <param name="listener">the listener to be added. It will be called back with a boolean parameter,
                            which is true if cross-window blur is enabled and false if it is disabled</param>
        <summary>Adds a listener, which will be called when cross-window blurs are enabled/disabled at
            runtime.</summary>
        <remarks>
          <para>Adds a listener, which will be called when cross-window blurs are enabled/disabled at
            runtime. This affects both window blur behind (see <c>LayoutParams#setBlurBehindRadius</c>)
            and window background blur (see <c>Window#setBackgroundBlurRadius</c>).</para>
          <para>Cross-window blur might not be supported by some devices due to GPU limitations. It can also
            be disabled at runtime, e.g. during battery saving mode, when multimedia tunneling is used or
            when minimal post processing is requested. In such situations, no blur will be computed or
            drawn, so the blur target area will not be blurred. To handle this, the app might want to
            change its theme to one that does not use blurs.</para>
          <para>If the listener is added successfully, it will be called immediately with the current
            cross-window blur enabled state.</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/android/view/WindowManager#addCrossWindowBlurEnabledListener(java.util.concurrent.Executor,%20java.util.function.Consumer%3Cjava.lang.Boolean%3E)" title="Reference documentation">Java documentation for <code>android.view.WindowManager.addCrossWindowBlurEnabledListener(java.util.concurrent.Executor, java.util.function.Consumer&lt;java.lang.Boolean&gt;)</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="AddProposedRotationListener">
      <MemberSignature Language="C#" Value="public virtual void AddProposedRotationListener (Java.Util.Concurrent.IExecutor executor, Java.Util.Functions.IIntConsumer listener);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void AddProposedRotationListener(class Java.Util.Concurrent.IExecutor executor, class Java.Util.Functions.IIntConsumer listener) cil managed" />
      <MemberSignature Language="DocId" Value="M:Android.Views.IWindowManager.AddProposedRotationListener(Java.Util.Concurrent.IExecutor,Java.Util.Functions.IIntConsumer)" />
      <MemberSignature Language="F#" Value="abstract member AddProposedRotationListener : Java.Util.Concurrent.IExecutor * Java.Util.Functions.IIntConsumer -&gt; unit&#xA;override this.AddProposedRotationListener : Java.Util.Concurrent.IExecutor * Java.Util.Functions.IIntConsumer -&gt; unit" Usage="iWindowManager.AddProposedRotationListener (executor, listener)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("addProposedRotationListener", "(Ljava/util/concurrent/Executor;Ljava/util/function/IntConsumer;)V", "GetAddProposedRotationListener_Ljava_util_concurrent_Executor_Ljava_util_function_IntConsumer_Handler:Android.Views.IWindowManager, Mono.Android, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null", ApiSince=34)]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("addProposedRotationListener", "(Ljava/util/concurrent/Executor;Ljava/util/function/IntConsumer;)V", "GetAddProposedRotationListener_Ljava_util_concurrent_Executor_Ljava_util_function_IntConsumer_Handler:Android.Views.IWindowManager, Mono.Android, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null", ApiSince=34)&gt;]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[System.Runtime.Versioning.SupportedOSPlatform("android34.0")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Runtime.Versioning.SupportedOSPlatform("android34.0")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="executor" Type="Java.Util.Concurrent.IExecutor" />
        <Parameter Name="listener" Type="Java.Util.Functions.IIntConsumer" />
      </Parameters>
      <Docs>
        <param name="executor">The executor on which callback method will be invoked.</param>
        <param name="listener">Called when the proposed rotation for the context is being delivered.
                            The reported rotation can be <c>Surface#ROTATION_0</c>,
                            <c>Surface#ROTATION_90</c>, <c>Surface#ROTATION_180</c> and
                            <c>Surface#ROTATION_270</c>.</param>
        <summary>Adds a listener to start monitoring the proposed rotation of the current associated context.</summary>
        <remarks>
          <para>Adds a listener to start monitoring the proposed rotation of the current associated context.
            It reports the current recommendation for the rotation that takes various factors (e.g.
            sensor, context, device state, etc) into account. The proposed rotation might not be applied
            by the system automatically due to the application's active preference to lock the
            orientation (e.g. with <c>android.app.Activity#setRequestedOrientation(int)</c>). This
            listener gives application an opportunity to selectively react to device orientation changes.
            The newly added listener will be called with current proposed rotation. Note that the context
            of this window manager instance must be a <c>UiContext</c>.</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/android/view/WindowManager#addProposedRotationListener(java.util.concurrent.Executor,%20java.util.function.IntConsumer)" title="Reference documentation">Java documentation for <code>android.view.WindowManager.addProposedRotationListener(java.util.concurrent.Executor, java.util.function.IntConsumer)</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="AddScreenRecordingCallback">
      <MemberSignature Language="C#" Value="public virtual int AddScreenRecordingCallback (Java.Util.Concurrent.IExecutor executor, Java.Util.Functions.IConsumer callback);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance int32 AddScreenRecordingCallback(class Java.Util.Concurrent.IExecutor executor, class Java.Util.Functions.IConsumer callback) cil managed" />
      <MemberSignature Language="DocId" Value="M:Android.Views.IWindowManager.AddScreenRecordingCallback(Java.Util.Concurrent.IExecutor,Java.Util.Functions.IConsumer)" />
      <MemberSignature Language="F#" Value="abstract member AddScreenRecordingCallback : Java.Util.Concurrent.IExecutor * Java.Util.Functions.IConsumer -&gt; int&#xA;override this.AddScreenRecordingCallback : Java.Util.Concurrent.IExecutor * Java.Util.Functions.IConsumer -&gt; int" Usage="iWindowManager.AddScreenRecordingCallback (executor, callback)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="net-android-35.0;net-android-36.0">
          <AttributeName Language="C#">[Android.Runtime.Register("addScreenRecordingCallback", "(Ljava/util/concurrent/Executor;Ljava/util/function/Consumer;)I", "GetAddScreenRecordingCallback_Ljava_util_concurrent_Executor_Ljava_util_function_Consumer_Handler:Android.Views.IWindowManager, Mono.Android, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null", ApiSince=35)]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("addScreenRecordingCallback", "(Ljava/util/concurrent/Executor;Ljava/util/function/Consumer;)I", "GetAddScreenRecordingCallback_Ljava_util_concurrent_Executor_Ljava_util_function_Consumer_Handler:Android.Views.IWindowManager, Mono.Android, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null", ApiSince=35)&gt;]</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="net-android-35.0;net-android-36.0">
          <AttributeName Language="C#">[Android.Runtime.RequiresPermission("android.permission.DETECT_SCREEN_RECORDING")]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.RequiresPermission("android.permission.DETECT_SCREEN_RECORDING")&gt;]</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="net-android-35.0;net-android-36.0">
          <AttributeName Language="C#">[System.Runtime.Versioning.SupportedOSPlatform("android35.0")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Runtime.Versioning.SupportedOSPlatform("android35.0")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="executor" Type="Java.Util.Concurrent.IExecutor" Index="0" FrameworkAlternate="net-android-35.0;net-android-36.0" />
        <Parameter Name="callback" Type="Java.Util.Functions.IConsumer" Index="1" FrameworkAlternate="net-android-35.0;net-android-36.0" />
      </Parameters>
      <Docs>
        <param name="executor">The executor on which callback method will be invoked.</param>
        <param name="callback">The callback that will be invoked when screen recording visibility changes.</param>
        <summary>Adds a screen recording callback.</summary>
        <returns>the current screen recording state.</returns>
        <remarks>
          <para>Adds a screen recording callback. The callback will be invoked whenever the app becomes
            visible in screen recording or was visible in screen recording and becomes invisible in
            screen recording.</para>
          <para>An app is considered visible in screen recording if any activities owned by the
            registering process's UID are being recorded.</para>
          <para>Example:</para>
          <code lang="text/java">windowManager.addScreenRecordingCallback(state -&gt; {
                // handle change in screen recording state
            });
            </code>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/android/view/WindowManager#addScreenRecordingCallback(java.util.concurrent.Executor,%20java.util.function.Consumer%3Cjava.lang.Integer%3E)" title="Reference documentation">Java documentation for <code>android.view.WindowManager.addScreenRecordingCallback(java.util.concurrent.Executor, java.util.function.Consumer&lt;java.lang.Integer&gt;)</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="CurrentWindowMetrics">
      <MemberSignature Language="C#" Value="public virtual Android.Views.WindowMetrics CurrentWindowMetrics { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Android.Views.WindowMetrics CurrentWindowMetrics" />
      <MemberSignature Language="DocId" Value="P:Android.Views.IWindowManager.CurrentWindowMetrics" />
      <MemberSignature Language="F#" Value="member this.CurrentWindowMetrics : Android.Views.WindowMetrics" Usage="Android.Views.IWindowManager.CurrentWindowMetrics" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[System.Runtime.Versioning.SupportedOSPlatform("android30.0")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Runtime.Versioning.SupportedOSPlatform("android30.0")&gt;]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[get: Android.Runtime.Register("getCurrentWindowMetrics", "()Landroid/view/WindowMetrics;", "GetGetCurrentWindowMetricsHandler:Android.Views.IWindowManager, Mono.Android, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null", ApiSince=30)]</AttributeName>
          <AttributeName Language="F#">[&lt;get: Android.Runtime.Register("getCurrentWindowMetrics", "()Landroid/view/WindowMetrics;", "GetGetCurrentWindowMetricsHandler:Android.Views.IWindowManager, Mono.Android, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null", ApiSince=30)&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Android.Views.WindowMetrics</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Returns the <c>WindowMetrics</c> according to the current system state.</summary>
        <value>To be added.</value>
        <remarks>
          <para>Returns the <c>WindowMetrics</c> according to the current system state.</para>
          <para>The metrics describe the size of the area the window would occupy with
            <c>LayoutParams#MATCH_PARENT MATCH_PARENT</c> width and height, and the <c>WindowInsets</c>
            such a window would have. The <c>WindowInsets</c> are not deducted from the bounds.</para>
          <para>The value of this is based on the &lt;b&gt;current&lt;/b&gt; windowing state of the system.
            
            For example, for activities in multi-window mode, the metrics returned are based on the
            current bounds that the user has selected for the <c>android.app.Activity Activity</c>'s
            task.</para>
          <para>In most scenarios, <c>#getCurrentWindowMetrics()</c> rather than
            <c>#getMaximumWindowMetrics()</c> is the correct API to use, since it ensures values reflect
            window size when the app is not fullscreen.</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/android/view/WindowManager#getCurrentWindowMetrics()" title="Reference documentation">Java documentation for <code>android.view.WindowManager.getCurrentWindowMetrics()</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="DefaultDisplay">
      <MemberSignature Language="C#" Value="public Android.Views.Display? DefaultDisplay { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Android.Views.Display DefaultDisplay" />
      <MemberSignature Language="DocId" Value="P:Android.Views.IWindowManager.DefaultDisplay" />
      <MemberSignature Language="F#" Value="member this.DefaultDisplay : Android.Views.Display" Usage="Android.Views.IWindowManager.DefaultDisplay" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[System.Runtime.CompilerServices.Nullable(2)]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Runtime.CompilerServices.Nullable(2)&gt;]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[get: Android.Runtime.Register("getDefaultDisplay", "()Landroid/view/Display;", "GetGetDefaultDisplayHandler:Android.Views.IWindowManagerInvoker, Mono.Android, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null")]</AttributeName>
          <AttributeName Language="F#">[&lt;get: Android.Runtime.Register("getDefaultDisplay", "()Landroid/view/Display;", "GetGetDefaultDisplayHandler:Android.Views.IWindowManagerInvoker, Mono.Android, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Android.Views.Display</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Returns the <see cref="T:Android.Views.Display" /> upon which this <see cref="T:Android.Views.IWindowManager" /> instance
 will create new windows.</summary>
        <value>To be added.</value>
        <remarks>
          <para>Portions of this page are modifications based on work created and shared by the <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format> and used according to terms described in the <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
        <since version="Added in API level 1" />
      </Docs>
    </Member>
    <Member MemberName="IsCrossWindowBlurEnabled">
      <MemberSignature Language="C#" Value="public virtual bool IsCrossWindowBlurEnabled { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsCrossWindowBlurEnabled" />
      <MemberSignature Language="DocId" Value="P:Android.Views.IWindowManager.IsCrossWindowBlurEnabled" />
      <MemberSignature Language="F#" Value="member this.IsCrossWindowBlurEnabled : bool" Usage="Android.Views.IWindowManager.IsCrossWindowBlurEnabled" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[System.Runtime.Versioning.SupportedOSPlatform("android31.0")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Runtime.Versioning.SupportedOSPlatform("android31.0")&gt;]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[get: Android.Runtime.Register("isCrossWindowBlurEnabled", "()Z", "GetIsCrossWindowBlurEnabledHandler:Android.Views.IWindowManager, Mono.Android, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null", ApiSince=31)]</AttributeName>
          <AttributeName Language="F#">[&lt;get: Android.Runtime.Register("isCrossWindowBlurEnabled", "()Z", "GetIsCrossWindowBlurEnabledHandler:Android.Views.IWindowManager, Mono.Android, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null", ApiSince=31)&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Returns whether cross-window blur is currently enabled.</summary>
        <value>To be added.</value>
        <remarks>
          <para>Returns whether cross-window blur is currently enabled. This affects both window blur behind
            (see <c>LayoutParams#setBlurBehindRadius</c>) and window background blur (see
            <c>Window#setBackgroundBlurRadius</c>).</para>
          <para>Cross-window blur might not be supported by some devices due to GPU limitations. It can also
            be disabled at runtime, e.g. during battery saving mode, when multimedia tunneling is used or
            when minimal post processing is requested. In such situations, no blur will be computed or
            drawn, so the blur target area will not be blurred. To handle this, the app might want to
            change its theme to one that does not use blurs. To listen for cross-window blur
            enabled/disabled events, use <c>#addCrossWindowBlurEnabledListener</c>.</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/android/view/WindowManager#isCrossWindowBlurEnabled()" title="Reference documentation">Java documentation for <code>android.view.WindowManager.isCrossWindowBlurEnabled()</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="MaximumWindowMetrics">
      <MemberSignature Language="C#" Value="public virtual Android.Views.WindowMetrics MaximumWindowMetrics { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Android.Views.WindowMetrics MaximumWindowMetrics" />
      <MemberSignature Language="DocId" Value="P:Android.Views.IWindowManager.MaximumWindowMetrics" />
      <MemberSignature Language="F#" Value="member this.MaximumWindowMetrics : Android.Views.WindowMetrics" Usage="Android.Views.IWindowManager.MaximumWindowMetrics" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[System.Runtime.Versioning.SupportedOSPlatform("android30.0")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Runtime.Versioning.SupportedOSPlatform("android30.0")&gt;]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[get: Android.Runtime.Register("getMaximumWindowMetrics", "()Landroid/view/WindowMetrics;", "GetGetMaximumWindowMetricsHandler:Android.Views.IWindowManager, Mono.Android, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null", ApiSince=30)]</AttributeName>
          <AttributeName Language="F#">[&lt;get: Android.Runtime.Register("getMaximumWindowMetrics", "()Landroid/view/WindowMetrics;", "GetGetMaximumWindowMetricsHandler:Android.Views.IWindowManager, Mono.Android, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null", ApiSince=30)&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Android.Views.WindowMetrics</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Returns the largest <c>WindowMetrics</c> an app may expect in the current system state.</summary>
        <value>To be added.</value>
        <remarks>
          <para>Returns the largest <c>WindowMetrics</c> an app may expect in the current system state.</para>
          <para>The value of this is based on the largest &lt;b&gt;potential&lt;/b&gt; windowing state of the system.
            
            For example, for activities in multi-window mode, the metrics returned are based on the
            what the bounds would be if the user expanded the <c>android.app.Activity Activity</c>'s
            task to cover the entire screen.</para>
          <para>The metrics describe the size of the largest potential area the window might occupy with
            <c>LayoutParams#MATCH_PARENT MATCH_PARENT</c> width and height, and the <c>WindowInsets</c>
            such a window would have. The <c>WindowInsets</c> are not deducted from the bounds.</para>
          <para>Note that this might still be smaller than the size of the physical display if certain areas
            of the display are not available to windows created in this <c>Context</c>.
            
            For example, given that there's a device which have a multi-task mode to limit activities
            to a half screen. In this case, <c>#getMaximumWindowMetrics()</c> reports the bounds of
            the half screen which the activity is located.</para>
          <para>&lt;b&gt;Generally <c>#getCurrentWindowMetrics()</c> is the correct API to use&lt;/b&gt; for choosing
            UI layouts. <c>#getMaximumWindowMetrics()</c> are only appropriate when the application
            needs to know the largest possible size it can occupy if the user expands/maximizes it on the
            screen.</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/android/view/WindowManager#getMaximumWindowMetrics()" title="Reference documentation">Java documentation for <code>android.view.WindowManager.getMaximumWindowMetrics()</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PropertyActivityEmbeddingAllowSystemOverride">
      <MemberSignature Language="C#" Value="public const string PropertyActivityEmbeddingAllowSystemOverride;" />
      <MemberSignature Language="ILAsm" Value=".field public static literal string PropertyActivityEmbeddingAllowSystemOverride" />
      <MemberSignature Language="DocId" Value="F:Android.Views.IWindowManager.PropertyActivityEmbeddingAllowSystemOverride" />
      <MemberSignature Language="F#" Value="val mutable PropertyActivityEmbeddingAllowSystemOverride : string" Usage="Android.Views.IWindowManager.PropertyActivityEmbeddingAllowSystemOverride" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("PROPERTY_ACTIVITY_EMBEDDING_ALLOW_SYSTEM_OVERRIDE", ApiSince=34)]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("PROPERTY_ACTIVITY_EMBEDDING_ALLOW_SYSTEM_OVERRIDE", ApiSince=34)&gt;]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[System.Runtime.Versioning.SupportedOSPlatform("android34.0")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Runtime.Versioning.SupportedOSPlatform("android34.0")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Application-level <c>android.content.pm.PackageManager.Property PackageManager.Property</c>
            tag that specifies whether OEMs are permitted to provide activity embedding split-rule
            configurations on behalf of the app.</summary>
        <remarks>
          <para>Application-level <c>android.content.pm.PackageManager.Property PackageManager.Property</c>
            tag that specifies whether OEMs are permitted to provide activity embedding split-rule
            configurations on behalf of the app.</para>
          <para>If <c>true</c>, the system is permitted to override the app's windowing behavior and
            implement activity embedding split rules, such as displaying activities side by side. A
            system override informs the app that the activity embedding APIs are disabled so the app
            doesn't provide its own activity embedding rules, which would conflict with the system's
            rules.</para>
          <para>If <c>false</c>, the system is not permitted to override the windowing behavior of the
            app. Set the property to <c>false</c> if the app provides its own activity embedding split
            rules, or if you want to prevent the system override for any other reason.</para>
          <para>The default value is <c>false</c>.</para>
          <para>&lt;b&gt;Note:&lt;/b&gt; Refusal to permit the system override is not enforceable. OEMs
            can override the app's activity embedding implementation whether or not this property is
            specified and set to <c>false</c>. The property is, in effect, a hint to OEMs.</para>
          <para>OEMs can implement activity embedding on any API level. The best practice for apps is to
            always explicitly set this property in the app manifest file regardless of targeted API level
            rather than rely on the default value.</para>
          <para>&lt;b&gt;Syntax:&lt;/b&gt;</para>
          <code lang="text/java">&amp;lt;application&amp;gt;
              &amp;lt;property
                android:name="android.window.PROPERTY_ACTIVITY_EMBEDDING_ALLOW_SYSTEM_OVERRIDE"
                android:value="true|false"/&amp;gt;
            &amp;lt;/application&amp;gt;
            </code>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/android/view/WindowManager#PROPERTY_ACTIVITY_EMBEDDING_ALLOW_SYSTEM_OVERRIDE" title="Reference documentation">Java documentation for <code>android.view.WindowManager.PROPERTY_ACTIVITY_EMBEDDING_ALLOW_SYSTEM_OVERRIDE</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PropertyActivityEmbeddingSplitsEnabled">
      <MemberSignature Language="C#" Value="public const string PropertyActivityEmbeddingSplitsEnabled;" />
      <MemberSignature Language="ILAsm" Value=".field public static literal string PropertyActivityEmbeddingSplitsEnabled" />
      <MemberSignature Language="DocId" Value="F:Android.Views.IWindowManager.PropertyActivityEmbeddingSplitsEnabled" />
      <MemberSignature Language="F#" Value="val mutable PropertyActivityEmbeddingSplitsEnabled : string" Usage="Android.Views.IWindowManager.PropertyActivityEmbeddingSplitsEnabled" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("PROPERTY_ACTIVITY_EMBEDDING_SPLITS_ENABLED", ApiSince=34)]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("PROPERTY_ACTIVITY_EMBEDDING_SPLITS_ENABLED", ApiSince=34)&gt;]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[System.Runtime.Versioning.SupportedOSPlatform("android34.0")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Runtime.Versioning.SupportedOSPlatform("android34.0")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Application level <c>android.content.pm.PackageManager.Property PackageManager.Property</c>
            that an app can specify to inform the system that the app is activity embedding split feature
            enabled.</summary>
        <remarks>
          <para>Application level <c>android.content.pm.PackageManager.Property PackageManager.Property</c>
            that an app can specify to inform the system that the app is activity embedding split feature
            enabled.</para>
          <para>With this property, the system could provide custom behaviors for the apps that are
            activity embedding split feature enabled. For example, the fixed-portrait orientation
            requests of the activities could be ignored by the system in order to provide seamless
            activity embedding split experiences while holding large screen devices in landscape
            orientation.</para>
          <para>&lt;b&gt;Syntax:&lt;/b&gt;</para>
          <code lang="text/java">&amp;lt;application&amp;gt;
              &amp;lt;property
                android:name="android.window.PROPERTY_ACTIVITY_EMBEDDING_SPLITS_ENABLED"
                android:value="true|false"/&amp;gt;
            &amp;lt;/application&amp;gt;
            </code>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/android/view/WindowManager#PROPERTY_ACTIVITY_EMBEDDING_SPLITS_ENABLED" title="Reference documentation">Java documentation for <code>android.view.WindowManager.PROPERTY_ACTIVITY_EMBEDDING_SPLITS_ENABLED</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PropertyCameraCompatAllowForceRotation">
      <MemberSignature Language="C#" Value="public const string PropertyCameraCompatAllowForceRotation;" />
      <MemberSignature Language="ILAsm" Value=".field public static literal string PropertyCameraCompatAllowForceRotation" />
      <MemberSignature Language="DocId" Value="F:Android.Views.IWindowManager.PropertyCameraCompatAllowForceRotation" />
      <MemberSignature Language="F#" Value="val mutable PropertyCameraCompatAllowForceRotation : string" Usage="Android.Views.IWindowManager.PropertyCameraCompatAllowForceRotation" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("PROPERTY_CAMERA_COMPAT_ALLOW_FORCE_ROTATION", ApiSince=34)]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("PROPERTY_CAMERA_COMPAT_ALLOW_FORCE_ROTATION", ApiSince=34)&gt;]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[System.Runtime.Versioning.SupportedOSPlatform("android34.0")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Runtime.Versioning.SupportedOSPlatform("android34.0")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Application level <c>android.content.pm.PackageManager.Property PackageManager.Property</c>
            for an app to inform the system that the app should be excluded from the camera compatibility
            force rotation treatment.</summary>
        <remarks>
          <para>Application level <c>android.content.pm.PackageManager.Property PackageManager.Property</c>
            for an app to inform the system that the app should be excluded from the camera compatibility
            force rotation treatment.</para>
          <para>The camera compatibility treatment aligns portrait app windows with the natural
            orientation of the device and landscape app windows opposite the device natural orientation.
            Mismatch between the orientations can lead to camera issues like a sideways or stretched
            viewfinder since this is one of the strongest assumptions that apps make when they implement
            camera previews. Since app and device natural orientations aren't guaranteed to match, the
            rotation can cause letterboxing. The forced rotation is triggered as soon as an app opens the
            camera and is removed once camera is closed.</para>
          <para>Camera compatibility can be enabled by device manufacturers on displays that have the
            ignore requested orientation display setting enabled, which enables compatibility mode for
            fixed-orientation apps on Android 12 (API level 31) or higher. See
            <see href="https://developer.android.com/guide/practices/device-compatibility-mode">Device compatibility mode</see>
            for more details.</para>
          <para>With this property set to <c>true</c> or unset, the system may apply the force rotation
            treatment to fixed-orientation activities. Device manufacturers can exclude packages from the
            treatment using their discretion to improve display compatibility.</para>
          <para>With this property set to <c>false</c>, the system will not apply the force rotation
            treatment.</para>
          <para>&lt;b&gt;Syntax:&lt;/b&gt;</para>
          <code lang="text/java">&amp;lt;application&amp;gt;
              &amp;lt;property
                android:name="android.window.PROPERTY_CAMERA_COMPAT_ALLOW_FORCE_ROTATION"
                android:value="true|false"/&amp;gt;
            &amp;lt;/application&amp;gt;
            </code>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/android/view/WindowManager#PROPERTY_CAMERA_COMPAT_ALLOW_FORCE_ROTATION" title="Reference documentation">Java documentation for <code>android.view.WindowManager.PROPERTY_CAMERA_COMPAT_ALLOW_FORCE_ROTATION</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PropertyCameraCompatAllowRefresh">
      <MemberSignature Language="C#" Value="public const string PropertyCameraCompatAllowRefresh;" />
      <MemberSignature Language="ILAsm" Value=".field public static literal string PropertyCameraCompatAllowRefresh" />
      <MemberSignature Language="DocId" Value="F:Android.Views.IWindowManager.PropertyCameraCompatAllowRefresh" />
      <MemberSignature Language="F#" Value="val mutable PropertyCameraCompatAllowRefresh : string" Usage="Android.Views.IWindowManager.PropertyCameraCompatAllowRefresh" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("PROPERTY_CAMERA_COMPAT_ALLOW_REFRESH", ApiSince=34)]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("PROPERTY_CAMERA_COMPAT_ALLOW_REFRESH", ApiSince=34)&gt;]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[System.Runtime.Versioning.SupportedOSPlatform("android34.0")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Runtime.Versioning.SupportedOSPlatform("android34.0")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Application level <c>android.content.pm.PackageManager.Property PackageManager.Property</c>
            for an app to inform the system that the app should be excluded from the activity "refresh"
            after the camera compatibility force rotation treatment.</summary>
        <remarks>
          <para>Application level <c>android.content.pm.PackageManager.Property PackageManager.Property</c>
            for an app to inform the system that the app should be excluded from the activity "refresh"
            after the camera compatibility force rotation treatment.</para>
          <para>The camera compatibility treatment aligns portrait app windows with the natural
            orientation of the device and landscape app windows opposite the device natural orientation.
            Mismatch between the orientations can lead to camera issues like a sideways or stretched
            viewfinder since this is one of the strongest assumptions that apps make when they implement
            camera previews. Since app and device natural orientations aren't guaranteed to match, the
            rotation can cause letterboxing. The forced rotation is triggered as soon as an app opens the
            camera and is removed once camera is closed.</para>
          <para>Force rotation is followed by the "Refresh" of the activity by going through "resumed -&gt;
            ... -&gt; stopped -&gt; ... -&gt; resumed" cycle (by default) or "resumed -&gt; paused -&gt; resumed" cycle
            (if overridden, see <c>#PROPERTY_CAMERA_COMPAT_ENABLE_REFRESH_VIA_PAUSE</c> for context).
            This allows to clear cached values in apps (e.g. display or camera rotation) that influence
            camera preview and can lead to sideways or stretching issues persisting even after force
            rotation.</para>
          <para>The camera compatibility can be enabled by device manufacturers on displays that have the
            ignore requested orientation display setting enabled, which enables compatibility mode for
            fixed-orientation apps on Android 12 (API level 31) or higher. See
            <see href="https://developer.android.com/guide/practices/device-compatibility-mode">Device compatibility mode</see>
            for more details.</para>
          <para>With this property set to <c>true</c> or unset, the system may "refresh" activity after
            the force rotation treatment. Device manufacturers can exclude packages from the "refresh"
            using their discretion to improve display compatibility.</para>
          <para>With this property set to <c>false</c>, the system will not "refresh" activity after the
            force rotation treatment.</para>
          <para>&lt;b&gt;Syntax:&lt;/b&gt;</para>
          <code lang="text/java">&amp;lt;application&amp;gt;
              &amp;lt;property
                android:name="android.window.PROPERTY_CAMERA_COMPAT_ALLOW_REFRESH"
                android:value="true|false"/&amp;gt;
            &amp;lt;/application&amp;gt;
            </code>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/android/view/WindowManager#PROPERTY_CAMERA_COMPAT_ALLOW_REFRESH" title="Reference documentation">Java documentation for <code>android.view.WindowManager.PROPERTY_CAMERA_COMPAT_ALLOW_REFRESH</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PropertyCameraCompatEnableRefreshViaPause">
      <MemberSignature Language="C#" Value="public const string PropertyCameraCompatEnableRefreshViaPause;" />
      <MemberSignature Language="ILAsm" Value=".field public static literal string PropertyCameraCompatEnableRefreshViaPause" />
      <MemberSignature Language="DocId" Value="F:Android.Views.IWindowManager.PropertyCameraCompatEnableRefreshViaPause" />
      <MemberSignature Language="F#" Value="val mutable PropertyCameraCompatEnableRefreshViaPause : string" Usage="Android.Views.IWindowManager.PropertyCameraCompatEnableRefreshViaPause" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("PROPERTY_CAMERA_COMPAT_ENABLE_REFRESH_VIA_PAUSE", ApiSince=34)]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("PROPERTY_CAMERA_COMPAT_ENABLE_REFRESH_VIA_PAUSE", ApiSince=34)&gt;]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[System.Runtime.Versioning.SupportedOSPlatform("android34.0")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Runtime.Versioning.SupportedOSPlatform("android34.0")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Application level <c>android.content.pm.PackageManager.Property PackageManager.Property</c>
            for an app to inform the system that the activity should be or shouldn't be "refreshed" after
            the camera compatibility force rotation treatment using "paused -&gt; resumed" cycle rather than
            "stopped -&gt; resumed".</summary>
        <remarks>
          <para>Application level <c>android.content.pm.PackageManager.Property PackageManager.Property</c>
            for an app to inform the system that the activity should be or shouldn't be "refreshed" after
            the camera compatibility force rotation treatment using "paused -&gt; resumed" cycle rather than
            "stopped -&gt; resumed".</para>
          <para>The camera compatibility treatment aligns orientations of portrait app window and natural
            orientation of the device. Mismatch between the orientations can lead to camera issues like a
            sideways or stretched viewfinder since this is one of the strongest assumptions that apps
            make when they implement camera previews. Since app and natural display orientations aren't
            guaranteed to match, the rotation can cause letterboxing. The forced rotation is triggered as
            soon as app opens the camera and is removed once camera is closed.</para>
          <para>Force rotation is followed by the "Refresh" of the activity by going through "resumed -&gt;
            ... -&gt; stopped -&gt; ... -&gt; resumed" cycle (by default) or "resumed -&gt; paused -&gt; resumed" cycle
            (if overridden by device manufacturers or using this property). This allows to clear cached
            values in apps (e.g., display or camera rotation) that influence camera preview and can lead
            to sideways or stretching issues persisting even after force rotation.</para>
          <para>The camera compatibility can be enabled by device manufacturers on displays that have the
            ignore requested orientation display setting enabled, which enables compatibility mode for
            fixed-orientation apps on Android 12 (API level 31) or higher. See
            <see href="https://developer.android.com/guide/practices/device-compatibility-mode">Device compatibility mode</see>
            for more details.</para>
          <para>Device manufacturers can override packages to "refresh" via "resumed -&gt; paused -&gt; resumed"
            cycle using their discretion to improve display compatibility.</para>
          <para>With this property set to <c>true</c>, the system will "refresh" activity after the
            force rotation treatment using "resumed -&gt; paused -&gt; resumed" cycle.</para>
          <para>With this property set to <c>false</c>, the system will not "refresh" activity after the
            force rotation treatment using "resumed -&gt; paused -&gt; resumed" cycle even if the device
            manufacturer adds the corresponding override.</para>
          <para>&lt;b&gt;Syntax:&lt;/b&gt;</para>
          <code lang="text/java">&amp;lt;application&amp;gt;
              &amp;lt;property
                android:name="android.window.PROPERTY_CAMERA_COMPAT_ENABLE_REFRESH_VIA_PAUSE"
                android:value="true|false"/&amp;gt;
            &amp;lt;/application&amp;gt;
            </code>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/android/view/WindowManager#PROPERTY_CAMERA_COMPAT_ENABLE_REFRESH_VIA_PAUSE" title="Reference documentation">Java documentation for <code>android.view.WindowManager.PROPERTY_CAMERA_COMPAT_ENABLE_REFRESH_VIA_PAUSE</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PropertyCompatAllowDisplayOrientationOverride">
      <MemberSignature Language="C#" Value="public const string PropertyCompatAllowDisplayOrientationOverride;" />
      <MemberSignature Language="ILAsm" Value=".field public static literal string PropertyCompatAllowDisplayOrientationOverride" />
      <MemberSignature Language="DocId" Value="F:Android.Views.IWindowManager.PropertyCompatAllowDisplayOrientationOverride" />
      <MemberSignature Language="F#" Value="val mutable PropertyCompatAllowDisplayOrientationOverride : string" Usage="Android.Views.IWindowManager.PropertyCompatAllowDisplayOrientationOverride" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("PROPERTY_COMPAT_ALLOW_DISPLAY_ORIENTATION_OVERRIDE", ApiSince=34)]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("PROPERTY_COMPAT_ALLOW_DISPLAY_ORIENTATION_OVERRIDE", ApiSince=34)&gt;]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[System.Runtime.Versioning.SupportedOSPlatform("android34.0")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Runtime.Versioning.SupportedOSPlatform("android34.0")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Application level <c>android.content.pm.PackageManager.Property PackageManager.Property</c>
            for an app to inform the system that the app should be opted-out from the compatibility
            override that fixes display orientation to landscape natural orientation when an activity is
            fullscreen.</summary>
        <remarks>
          <para>Application level <c>android.content.pm.PackageManager.Property PackageManager.Property</c>
            for an app to inform the system that the app should be opted-out from the compatibility
            override that fixes display orientation to landscape natural orientation when an activity is
            fullscreen.</para>
          <para>When this compat override is enabled and while display is fixed to the landscape natural
            orientation, the orientation requested by the activity will be still respected by bounds
            resolution logic. For instance, if an activity requests portrait orientation, then activity
            appears in letterbox mode for fixed-orientation apps with the display rotated to the lanscape
            natural orientation.</para>
          <para>The treatment is disabled by default but device manufacturers can enable the treatment
            using their discretion to improve display compatibility on displays that have the ignore
            orientation request display setting enabled by OEMs on the device, which enables
            compatibility mode for fixed-orientation apps on Android 12 (API level 31) or higher. See
            <see href="https://developer.android.com/guide/practices/device-compatibility-mode">Device compatibility mode</see>
            for more details.</para>
          <para>With this property set to <c>true</c> or unset, the system wiil use landscape display
            orientation when the following conditions are met:
            &lt;ul&gt;
                &lt;li&gt;Natural orientation of the display is landscape
                &lt;li&gt;ignore requested orientation display setting is enabled
                &lt;li&gt;Activity is fullscreen.
                &lt;li&gt;Device manufacturer enabled the treatment.
            &lt;/ul&gt;</para>
          <para>With this property set to <c>false</c>, device manufacturer per-app override for
            display orientation won't be applied.</para>
          <para>&lt;b&gt;Syntax:&lt;/b&gt;</para>
          <code lang="text/java">&amp;lt;application&amp;gt;
              &amp;lt;property
                android:name="android.window.PROPERTY_COMPAT_ALLOW_DISPLAY_ORIENTATION_OVERRIDE"
                android:value="true|false"/&amp;gt;
            &amp;lt;/application&amp;gt;
            </code>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/android/view/WindowManager#PROPERTY_COMPAT_ALLOW_DISPLAY_ORIENTATION_OVERRIDE" title="Reference documentation">Java documentation for <code>android.view.WindowManager.PROPERTY_COMPAT_ALLOW_DISPLAY_ORIENTATION_OVERRIDE</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PropertyCompatAllowIgnoringOrientationRequestWhenLoopDetected">
      <MemberSignature Language="C#" Value="public const string PropertyCompatAllowIgnoringOrientationRequestWhenLoopDetected;" />
      <MemberSignature Language="ILAsm" Value=".field public static literal string PropertyCompatAllowIgnoringOrientationRequestWhenLoopDetected" />
      <MemberSignature Language="DocId" Value="F:Android.Views.IWindowManager.PropertyCompatAllowIgnoringOrientationRequestWhenLoopDetected" />
      <MemberSignature Language="F#" Value="val mutable PropertyCompatAllowIgnoringOrientationRequestWhenLoopDetected : string" Usage="Android.Views.IWindowManager.PropertyCompatAllowIgnoringOrientationRequestWhenLoopDetected" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="net-android-35.0;net-android-36.0">
          <AttributeName Language="C#">[Android.Runtime.Register("PROPERTY_COMPAT_ALLOW_IGNORING_ORIENTATION_REQUEST_WHEN_LOOP_DETECTED", ApiSince=35)]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("PROPERTY_COMPAT_ALLOW_IGNORING_ORIENTATION_REQUEST_WHEN_LOOP_DETECTED", ApiSince=35)&gt;]</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="net-android-35.0;net-android-36.0">
          <AttributeName Language="C#">[System.Runtime.Versioning.SupportedOSPlatform("android35.0")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Runtime.Versioning.SupportedOSPlatform("android35.0")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Application level <c>android.content.pm.PackageManager.Property PackageManager.Property</c>
            for an app to inform the system that the app can be opted-out from the compatibility
            treatment that avoids <c>android.app.Activity#setRequestedOrientation
            Activity#setRequestedOrientation()</c> loops.</summary>
        <remarks>
          <para>Application level <c>android.content.pm.PackageManager.Property PackageManager.Property</c>
            for an app to inform the system that the app can be opted-out from the compatibility
            treatment that avoids <c>android.app.Activity#setRequestedOrientation
            Activity#setRequestedOrientation()</c> loops. Loops can be triggered by the OEM-configured
            ignore requested orientation display setting (on Android 12 (API level 31) and higher) or by
            the landscape natural orientation of the device.</para>
          <para>The system could ignore <c>android.app.Activity#setRequestedOrientation
            Activity#setRequestedOrientation()</c> call from an app if both of the following conditions are
            true:
            &lt;ul&gt;
                &lt;li&gt;Activity has requested orientation more than two times within one-second timer
                &lt;li&gt;Activity is not letterboxed for fixed-orientation apps
            &lt;/ul&gt;</para>
          <para>Setting this property to <c>false</c> informs the system that the app must be
            opted-out from the compatibility treatment even if the device manufacturer has opted the app
            into the treatment.</para>
          <para>Not setting this property at all, or setting this property to <c>true</c> has no effect.</para>
          <para>&lt;b&gt;Syntax:&lt;/b&gt;</para>
          <code lang="text/java">&amp;lt;application&amp;gt;
              &amp;lt;property
                android:name=
                  "android.window.PROPERTY_COMPAT_ALLOW_IGNORING_ORIENTATION_REQUEST_WHEN_LOOP_DETECTED"
                android:value="false"/&amp;gt;
            &amp;lt;/application&amp;gt;
            </code>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/android/view/WindowManager#PROPERTY_COMPAT_ALLOW_IGNORING_ORIENTATION_REQUEST_WHEN_LOOP_DETECTED" title="Reference documentation">Java documentation for <code>android.view.WindowManager.PROPERTY_COMPAT_ALLOW_IGNORING_ORIENTATION_REQUEST_WHEN_LOOP_DETECTED</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PropertyCompatAllowMinAspectRatioOverride">
      <MemberSignature Language="C#" Value="public const string PropertyCompatAllowMinAspectRatioOverride;" />
      <MemberSignature Language="ILAsm" Value=".field public static literal string PropertyCompatAllowMinAspectRatioOverride" />
      <MemberSignature Language="DocId" Value="F:Android.Views.IWindowManager.PropertyCompatAllowMinAspectRatioOverride" />
      <MemberSignature Language="F#" Value="val mutable PropertyCompatAllowMinAspectRatioOverride : string" Usage="Android.Views.IWindowManager.PropertyCompatAllowMinAspectRatioOverride" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="net-android-35.0;net-android-36.0">
          <AttributeName Language="C#">[Android.Runtime.Register("PROPERTY_COMPAT_ALLOW_MIN_ASPECT_RATIO_OVERRIDE", ApiSince=35)]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("PROPERTY_COMPAT_ALLOW_MIN_ASPECT_RATIO_OVERRIDE", ApiSince=35)&gt;]</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="net-android-35.0;net-android-36.0">
          <AttributeName Language="C#">[System.Runtime.Versioning.SupportedOSPlatform("android35.0")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Runtime.Versioning.SupportedOSPlatform("android35.0")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Application level <c>android.content.pm.PackageManager.Property PackageManager.Property</c>
            for an app to inform the system that the app should be opted-out from the compatibility
            override that changes the min aspect ratio.</summary>
        <remarks>
          <para>Application level <c>android.content.pm.PackageManager.Property PackageManager.Property</c>
            for an app to inform the system that the app should be opted-out from the compatibility
            override that changes the min aspect ratio.</para>
          <para>When this compat override is enabled the min aspect ratio given in the app's manifest can
            be overridden by the device manufacturer using their discretion to improve display
            compatibility unless the app's manifest value is higher. This treatment will also apply if
            no min aspect ratio value is provided in the manifest. These treatments can apply either in
            specific cases (e.g. device is in portrait) or each time the app is displayed on screen.</para>
          <para>Setting this property to <c>false</c> informs the system that the app must be
            opted-out from the compatibility treatment even if the device manufacturer has opted the app
            into the treatment.</para>
          <para>Not setting this property at all, or setting this property to <c>true</c> has no effect.</para>
          <para>&lt;b&gt;Syntax:&lt;/b&gt;</para>
          <code lang="text/java">&amp;lt;application&amp;gt;
              &amp;lt;property
                android:name="android.window.PROPERTY_COMPAT_ALLOW_MIN_ASPECT_RATIO_OVERRIDE"
                android:value="true|false"/&amp;gt;
            &amp;lt;/application&amp;gt;
            </code>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/android/view/WindowManager#PROPERTY_COMPAT_ALLOW_MIN_ASPECT_RATIO_OVERRIDE" title="Reference documentation">Java documentation for <code>android.view.WindowManager.PROPERTY_COMPAT_ALLOW_MIN_ASPECT_RATIO_OVERRIDE</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PropertyCompatAllowOrientationOverride">
      <MemberSignature Language="C#" Value="public const string PropertyCompatAllowOrientationOverride;" />
      <MemberSignature Language="ILAsm" Value=".field public static literal string PropertyCompatAllowOrientationOverride" />
      <MemberSignature Language="DocId" Value="F:Android.Views.IWindowManager.PropertyCompatAllowOrientationOverride" />
      <MemberSignature Language="F#" Value="val mutable PropertyCompatAllowOrientationOverride : string" Usage="Android.Views.IWindowManager.PropertyCompatAllowOrientationOverride" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("PROPERTY_COMPAT_ALLOW_ORIENTATION_OVERRIDE", ApiSince=34)]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("PROPERTY_COMPAT_ALLOW_ORIENTATION_OVERRIDE", ApiSince=34)&gt;]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[System.Runtime.Versioning.SupportedOSPlatform("android34.0")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Runtime.Versioning.SupportedOSPlatform("android34.0")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Application level <c>android.content.pm.PackageManager.Property PackageManager.Property</c>
            for an app to inform the system that the app should be excluded from the compatibility
            override for orientation set by the device manufacturer.</summary>
        <remarks>
          <para>Application level <c>android.content.pm.PackageManager.Property PackageManager.Property</c>
            for an app to inform the system that the app should be excluded from the compatibility
            override for orientation set by the device manufacturer. When the orientation override is
            applied it can:
            &lt;ul&gt;
              &lt;li&gt;Replace the specific orientation requested by the app with another selected by the
                         device manufacturer; for example, replace undefined requested by the app with portrait.
              &lt;li&gt;Always use an orientation selected by the device manufacturer.
              &lt;li&gt;Do one of the above but only when camera connection is open.
            &lt;/ul&gt;</para>
          <para>This property is different from <c>#PROPERTY_COMPAT_IGNORE_REQUESTED_ORIENTATION</c>
            (which is used to avoid orientation loops caused by the incorrect use of <c>android.app.Activity#setRequestedOrientation Activity#setRequestedOrientation()</c>) because
            this property overrides the app to an orientation selected by the device manufacturer rather
            than ignoring one of orientation requests coming from the app while respecting the previous
            one.</para>
          <para>With this property set to <c>true</c> or unset, device manufacturers can override
            orientation for the app using their discretion to improve display compatibility.</para>
          <para>With this property set to <c>false</c>, device manufacturer per-app override for
            orientation won't be applied.</para>
          <para>&lt;b&gt;Syntax:&lt;/b&gt;</para>
          <code lang="text/java">&amp;lt;application&amp;gt;
              &amp;lt;property
                android:name="android.window.PROPERTY_COMPAT_ALLOW_ORIENTATION_OVERRIDE"
                android:value="true|false"/&amp;gt;
            &amp;lt;/application&amp;gt;
            </code>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/android/view/WindowManager#PROPERTY_COMPAT_ALLOW_ORIENTATION_OVERRIDE" title="Reference documentation">Java documentation for <code>android.view.WindowManager.PROPERTY_COMPAT_ALLOW_ORIENTATION_OVERRIDE</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PropertyCompatAllowResizeableActivityOverrides">
      <MemberSignature Language="C#" Value="public const string PropertyCompatAllowResizeableActivityOverrides;" />
      <MemberSignature Language="ILAsm" Value=".field public static literal string PropertyCompatAllowResizeableActivityOverrides" />
      <MemberSignature Language="DocId" Value="F:Android.Views.IWindowManager.PropertyCompatAllowResizeableActivityOverrides" />
      <MemberSignature Language="F#" Value="val mutable PropertyCompatAllowResizeableActivityOverrides : string" Usage="Android.Views.IWindowManager.PropertyCompatAllowResizeableActivityOverrides" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="net-android-35.0;net-android-36.0">
          <AttributeName Language="C#">[Android.Runtime.Register("PROPERTY_COMPAT_ALLOW_RESIZEABLE_ACTIVITY_OVERRIDES", ApiSince=35)]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("PROPERTY_COMPAT_ALLOW_RESIZEABLE_ACTIVITY_OVERRIDES", ApiSince=35)&gt;]</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="net-android-35.0;net-android-36.0">
          <AttributeName Language="C#">[System.Runtime.Versioning.SupportedOSPlatform("android35.0")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Runtime.Versioning.SupportedOSPlatform("android35.0")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Application level <c>android.content.pm.PackageManager.Property PackageManager.Property</c>
            for an app to inform the system that the app should be opted-out from the compatibility
            overrides that change the resizability of the app.</summary>
        <remarks>
          <para>Application level <c>android.content.pm.PackageManager.Property PackageManager.Property</c>
            for an app to inform the system that the app should be opted-out from the compatibility
            overrides that change the resizability of the app.</para>
          <para>When these compat overrides are enabled they force the packages they are applied to to be
            resizable/unresizable. If the app is forced to be resizable this won't change whether the app
            can be put into multi-windowing mode, but allow the app to resize without going into size
            compatibility mode when the window container resizes, such as display size change or screen
            rotation.</para>
          <para>Setting this property to <c>false</c> informs the system that the app must be
            opted-out from the compatibility treatment even if the device manufacturer has opted the app
            into the treatment.</para>
          <para>Not setting this property at all, or setting this property to <c>true</c> has no effect.</para>
          <para>&lt;b&gt;Syntax:&lt;/b&gt;</para>
          <code lang="text/java">&amp;lt;application&amp;gt;
              &amp;lt;property
                android:name="android.window.PROPERTY_COMPAT_ALLOW_RESIZEABLE_ACTIVITY_OVERRIDES"
                android:value="true|false"/&amp;gt;
            &amp;lt;/application&amp;gt;
            </code>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/android/view/WindowManager#PROPERTY_COMPAT_ALLOW_RESIZEABLE_ACTIVITY_OVERRIDES" title="Reference documentation">Java documentation for <code>android.view.WindowManager.PROPERTY_COMPAT_ALLOW_RESIZEABLE_ACTIVITY_OVERRIDES</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PropertyCompatAllowSandboxingViewBoundsApis">
      <MemberSignature Language="C#" Value="public const string PropertyCompatAllowSandboxingViewBoundsApis;" />
      <MemberSignature Language="ILAsm" Value=".field public static literal string PropertyCompatAllowSandboxingViewBoundsApis" />
      <MemberSignature Language="DocId" Value="F:Android.Views.IWindowManager.PropertyCompatAllowSandboxingViewBoundsApis" />
      <MemberSignature Language="F#" Value="val mutable PropertyCompatAllowSandboxingViewBoundsApis : string" Usage="Android.Views.IWindowManager.PropertyCompatAllowSandboxingViewBoundsApis" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("PROPERTY_COMPAT_ALLOW_SANDBOXING_VIEW_BOUNDS_APIS", ApiSince=34)]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("PROPERTY_COMPAT_ALLOW_SANDBOXING_VIEW_BOUNDS_APIS", ApiSince=34)&gt;]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[System.Runtime.Versioning.SupportedOSPlatform("android34.0")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Runtime.Versioning.SupportedOSPlatform("android34.0")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Application level <c>android.content.pm.PackageManager.Property PackageManager.Property</c>
            for an app to inform the system that it needs to be opted-out from the compatibility
            treatment that sandboxes the <c>android.view.View View</c> API.</summary>
        <remarks>
          <para>Application level <c>android.content.pm.PackageManager.Property PackageManager.Property</c>
            for an app to inform the system that it needs to be opted-out from the compatibility
            treatment that sandboxes the <c>android.view.View View</c> API.</para>
          <para>The treatment can be enabled by device manufacturers for applications which misuse
            <c>android.view.View View</c> APIs by expecting that
            <c>android.view.View#getLocationOnScreen View#getLocationOnScreen()</c> and
            <c>android.view.View#getWindowVisibleDisplayFrame View#getWindowVisibleDisplayFrame()</c>
            return coordinates as if an activity is positioned in the top-left corner of the screen, with
            left coordinate equal to 0. This may not be the case for applications in multi-window and
            letterbox modes.</para>
          <para>Setting this property to <c>false</c> informs the system that the application must be
            opted-out from the "Sandbox View API to Activity bounds" treatment even if the device
            manufacturer has opted the app into the treatment.</para>
          <para>Not setting this property at all, or setting this property to <c>true</c> has no effect.</para>
          <para>&lt;b&gt;Syntax:&lt;/b&gt;</para>
          <code lang="text/java">&amp;lt;application&amp;gt;
              &amp;lt;property
                android:name="android.window.PROPERTY_COMPAT_ALLOW_SANDBOXING_VIEW_BOUNDS_APIS"
                android:value="false"/&amp;gt;
            &amp;lt;/application&amp;gt;
            </code>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/android/view/WindowManager#PROPERTY_COMPAT_ALLOW_SANDBOXING_VIEW_BOUNDS_APIS" title="Reference documentation">Java documentation for <code>android.view.WindowManager.PROPERTY_COMPAT_ALLOW_SANDBOXING_VIEW_BOUNDS_APIS</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PropertyCompatAllowSmallCoverScreen">
      <MemberSignature Language="C#" Value="public const string PropertyCompatAllowSmallCoverScreen;" />
      <MemberSignature Language="ILAsm" Value=".field public static literal string PropertyCompatAllowSmallCoverScreen" />
      <MemberSignature Language="DocId" Value="F:Android.Views.IWindowManager.PropertyCompatAllowSmallCoverScreen" />
      <MemberSignature Language="F#" Value="val mutable PropertyCompatAllowSmallCoverScreen : string" Usage="Android.Views.IWindowManager.PropertyCompatAllowSmallCoverScreen" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="net-android-35.0;net-android-36.0">
          <AttributeName Language="C#">[Android.Runtime.Register("PROPERTY_COMPAT_ALLOW_SMALL_COVER_SCREEN", ApiSince=35)]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("PROPERTY_COMPAT_ALLOW_SMALL_COVER_SCREEN", ApiSince=35)&gt;]</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="net-android-35.0;net-android-36.0">
          <AttributeName Language="C#">[System.Runtime.Versioning.SupportedOSPlatform("android35.0")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Runtime.Versioning.SupportedOSPlatform("android35.0")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Application or Activity level
            <c>android.content.pm.PackageManager.Property PackageManager.Property</c> to provide any
            preferences for showing all or specific Activities on small cover displays of foldable
            style devices.</summary>
        <remarks>
          <para>Application or Activity level
            <c>android.content.pm.PackageManager.Property PackageManager.Property</c> to provide any
            preferences for showing all or specific Activities on small cover displays of foldable
            style devices.</para>
          <para>The only supported value for the property is <c>#COMPAT_SMALL_COVER_SCREEN_OPT_IN</c>.</para>
          <para>&lt;b&gt;Syntax:&lt;/b&gt;</para>
          <code lang="text/java">&amp;lt;application&amp;gt;
              &amp;lt;property
                android:name="android.window.PROPERTY_COMPAT_ALLOW_SMALL_COVER_SCREEN"
                android:value=1 &lt;!-- COMPAT_COVER_SCREEN_OPT_IN --&gt;/&amp;gt;
            &amp;lt;/application&amp;gt;
            </code>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/android/view/WindowManager#PROPERTY_COMPAT_ALLOW_SMALL_COVER_SCREEN" title="Reference documentation">Java documentation for <code>android.view.WindowManager.PROPERTY_COMPAT_ALLOW_SMALL_COVER_SCREEN</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PropertyCompatAllowUserAspectRatioFullscreenOverride">
      <MemberSignature Language="C#" Value="public const string PropertyCompatAllowUserAspectRatioFullscreenOverride;" />
      <MemberSignature Language="ILAsm" Value=".field public static literal string PropertyCompatAllowUserAspectRatioFullscreenOverride" />
      <MemberSignature Language="DocId" Value="F:Android.Views.IWindowManager.PropertyCompatAllowUserAspectRatioFullscreenOverride" />
      <MemberSignature Language="F#" Value="val mutable PropertyCompatAllowUserAspectRatioFullscreenOverride : string" Usage="Android.Views.IWindowManager.PropertyCompatAllowUserAspectRatioFullscreenOverride" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="net-android-35.0;net-android-36.0">
          <AttributeName Language="C#">[Android.Runtime.Register("PROPERTY_COMPAT_ALLOW_USER_ASPECT_RATIO_FULLSCREEN_OVERRIDE", ApiSince=35)]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("PROPERTY_COMPAT_ALLOW_USER_ASPECT_RATIO_FULLSCREEN_OVERRIDE", ApiSince=35)&gt;]</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="net-android-35.0;net-android-36.0">
          <AttributeName Language="C#">[System.Runtime.Versioning.SupportedOSPlatform("android35.0")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Runtime.Versioning.SupportedOSPlatform("android35.0")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Application level
            <c>android.content.pm.PackageManager.Property PackageManager.Property</c>
            tag that (when set to false) informs the system the app has opted out of the
            full-screen option of the user aspect ratio compatibility override settings.</summary>
        <remarks>
          <para>Application level
            <c>android.content.pm.PackageManager.Property PackageManager.Property</c>
            tag that (when set to false) informs the system the app has opted out of the
            full-screen option of the user aspect ratio compatibility override settings. (For
            background information about the user aspect ratio compatibility override, see
            <c>#PROPERTY_COMPAT_ALLOW_USER_ASPECT_RATIO_OVERRIDE</c>.)</para>
          <para>When users apply the full-screen compatibility override, the orientation
            of the activity is forced to <c>android.content.pm.ActivityInfo#SCREEN_ORIENTATION_USER</c>.</para>
          <para>The user override is intended to improve the app experience on devices that have the
            ignore orientation request display setting enabled by OEMs, which enables compatibility mode
            for fixed-orientation apps on Android 12 (API level 31) or higher. See
            <see href="https://developer.android.com/guide/practices/device-compatibility-mode">Device compatibility mode</see>
            for more details.</para>
          <para>To opt out of the full-screen option of the user aspect ratio compatibility
            override, add this property to your app manifest and set the value to <c>false</c>.
            Your app will have full-screen option removed from the list of user aspect ratio
            override options in device settings, and users will not be able to apply
            full-screen override to your app.</para>
          <para>&lt;b&gt;Note:&lt;/b&gt; If <c>#PROPERTY_COMPAT_ALLOW_USER_ASPECT_RATIO_OVERRIDE</c> is
            <c>false</c>, this property has no effect.</para>
          <para>Not setting this property at all, or setting this property to <c>true</c> has no effect.</para>
          <para>&lt;b&gt;Syntax:&lt;/b&gt;</para>
          <code lang="text/java">&amp;lt;application&amp;gt;
              &amp;lt;property
                android:name="android.window.PROPERTY_COMPAT_ALLOW_USER_ASPECT_RATIO_FULLSCREEN_OVERRIDE"
                android:value="false"/&amp;gt;
            &amp;lt;/application&amp;gt;
            </code>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/android/view/WindowManager#PROPERTY_COMPAT_ALLOW_USER_ASPECT_RATIO_FULLSCREEN_OVERRIDE" title="Reference documentation">Java documentation for <code>android.view.WindowManager.PROPERTY_COMPAT_ALLOW_USER_ASPECT_RATIO_FULLSCREEN_OVERRIDE</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PropertyCompatAllowUserAspectRatioOverride">
      <MemberSignature Language="C#" Value="public const string PropertyCompatAllowUserAspectRatioOverride;" />
      <MemberSignature Language="ILAsm" Value=".field public static literal string PropertyCompatAllowUserAspectRatioOverride" />
      <MemberSignature Language="DocId" Value="F:Android.Views.IWindowManager.PropertyCompatAllowUserAspectRatioOverride" />
      <MemberSignature Language="F#" Value="val mutable PropertyCompatAllowUserAspectRatioOverride : string" Usage="Android.Views.IWindowManager.PropertyCompatAllowUserAspectRatioOverride" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="net-android-35.0;net-android-36.0">
          <AttributeName Language="C#">[Android.Runtime.Register("PROPERTY_COMPAT_ALLOW_USER_ASPECT_RATIO_OVERRIDE", ApiSince=35)]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("PROPERTY_COMPAT_ALLOW_USER_ASPECT_RATIO_OVERRIDE", ApiSince=35)&gt;]</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="net-android-35.0;net-android-36.0">
          <AttributeName Language="C#">[System.Runtime.Versioning.SupportedOSPlatform("android35.0")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Runtime.Versioning.SupportedOSPlatform("android35.0")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Application level
            <c>android.content.pm.PackageManager.Property PackageManager.Property</c>
            tag that (when set to false) informs the system the app has opted out of the
            user-facing aspect ratio compatibility override.</summary>
        <remarks>
          <para>Application level
            <c>android.content.pm.PackageManager.Property PackageManager.Property</c>
            tag that (when set to false) informs the system the app has opted out of the
            user-facing aspect ratio compatibility override.</para>
          <para>The compatibility override enables device users to set the app's aspect
            ratio or force the app to fill the display regardless of the aspect
            ratio or orientation specified in the app manifest.</para>
          <para>The aspect ratio compatibility override is exposed to users in device
            settings. A menu in device settings lists all apps that have not opted out of
            the compatibility override. Users select apps from the menu and set the
            app aspect ratio on a per-app basis. Typically, the menu is available
            only on large screen devices.</para>
          <para>When users apply the aspect ratio override, the minimum aspect ratio
            specified in the app manifest is overridden. If users choose a
            full-screen aspect ratio, the orientation of the activity is forced to
            <c>android.content.pm.ActivityInfo#SCREEN_ORIENTATION_USER</c>;
            see <c>#PROPERTY_COMPAT_ALLOW_USER_ASPECT_RATIO_FULLSCREEN_OVERRIDE</c> to
            disable the full-screen option only.</para>
          <para>The user override is intended to improve the app experience on devices that have the
            ignore orientation request display setting enabled by OEMs, which enables compatibility mode
            for fixed-orientation apps on Android 12 (API level 31) or higher. See
            <see href="https://developer.android.com/guide/practices/device-compatibility-mode">Device compatibility mode</see>
            for more details.</para>
          <para>To opt out of the user aspect ratio compatibility override, add this property
            to your app manifest and set the value to <c>false</c>. Your app will be excluded
            from the list of apps in device settings, and users will not be able to override
            the app's aspect ratio.</para>
          <para>Not setting this property at all, or setting this property to <c>true</c> has no effect.</para>
          <para>&lt;b&gt;Syntax:&lt;/b&gt;</para>
          <code lang="text/java">&amp;lt;application&amp;gt;
              &amp;lt;property
                android:name="android.window.PROPERTY_COMPAT_ALLOW_USER_ASPECT_RATIO_OVERRIDE"
                android:value="false"/&amp;gt;
            &amp;lt;/application&amp;gt;
            </code>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/android/view/WindowManager#PROPERTY_COMPAT_ALLOW_USER_ASPECT_RATIO_OVERRIDE" title="Reference documentation">Java documentation for <code>android.view.WindowManager.PROPERTY_COMPAT_ALLOW_USER_ASPECT_RATIO_OVERRIDE</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PropertyCompatEnableFakeFocus">
      <MemberSignature Language="C#" Value="public const string PropertyCompatEnableFakeFocus;" />
      <MemberSignature Language="ILAsm" Value=".field public static literal string PropertyCompatEnableFakeFocus" />
      <MemberSignature Language="DocId" Value="F:Android.Views.IWindowManager.PropertyCompatEnableFakeFocus" />
      <MemberSignature Language="F#" Value="val mutable PropertyCompatEnableFakeFocus : string" Usage="Android.Views.IWindowManager.PropertyCompatEnableFakeFocus" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("PROPERTY_COMPAT_ENABLE_FAKE_FOCUS", ApiSince=34)]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("PROPERTY_COMPAT_ENABLE_FAKE_FOCUS", ApiSince=34)&gt;]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[System.Runtime.Versioning.SupportedOSPlatform("android34.0")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Runtime.Versioning.SupportedOSPlatform("android34.0")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Application level <c>android.content.pm.PackageManager.Property PackageManager.Property</c>
            for an app to inform the system that the application can be opted-in or opted-out from the
            compatibility treatment that enables sending a fake focus event for unfocused resumed
            split-screen activities.</summary>
        <remarks>
          <para>Application level <c>android.content.pm.PackageManager.Property PackageManager.Property</c>
            for an app to inform the system that the application can be opted-in or opted-out from the
            compatibility treatment that enables sending a fake focus event for unfocused resumed
            split-screen activities. This is needed because some game engines wait to get focus before
            drawing the content of the app which isn't guaranteed by default in multi-window mode.</para>
          <para>Device manufacturers can enable this treatment using their discretion on a per-device
            basis to improve display compatibility. The treatment also needs to be specifically enabled
            on a per-app basis afterwards. This can either be done by device manufacturers or developers.</para>
          <para>With this property set to <c>true</c>, the system will apply the treatment only if the
            device manufacturer had previously enabled it on the device. A fake focus event will be sent
            to the app after it is resumed only if the app is in split-screen.</para>
          <para>Setting this property to <c>false</c> informs the system that the activity must be
            opted-out from the compatibility treatment even if the device manufacturer has opted the app
            into the treatment.</para>
          <para>If the property remains unset the system will apply the treatment only if it had
            previously been enabled both at the device and app level by the device manufacturer.</para>
          <para>&lt;b&gt;Syntax:&lt;/b&gt;</para>
          <code lang="text/java">&amp;lt;application&amp;gt;
              &amp;lt;property
                android:name="android.window.PROPERTY_COMPAT_ENABLE_FAKE_FOCUS"
                android:value="true|false"/&amp;gt;
            &amp;lt;/application&amp;gt;
            </code>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/android/view/WindowManager#PROPERTY_COMPAT_ENABLE_FAKE_FOCUS" title="Reference documentation">Java documentation for <code>android.view.WindowManager.PROPERTY_COMPAT_ENABLE_FAKE_FOCUS</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PropertyCompatIgnoreRequestedOrientation">
      <MemberSignature Language="C#" Value="public const string PropertyCompatIgnoreRequestedOrientation;" />
      <MemberSignature Language="ILAsm" Value=".field public static literal string PropertyCompatIgnoreRequestedOrientation" />
      <MemberSignature Language="DocId" Value="F:Android.Views.IWindowManager.PropertyCompatIgnoreRequestedOrientation" />
      <MemberSignature Language="F#" Value="val mutable PropertyCompatIgnoreRequestedOrientation : string" Usage="Android.Views.IWindowManager.PropertyCompatIgnoreRequestedOrientation" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("PROPERTY_COMPAT_IGNORE_REQUESTED_ORIENTATION", ApiSince=34)]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("PROPERTY_COMPAT_IGNORE_REQUESTED_ORIENTATION", ApiSince=34)&gt;]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[System.Runtime.Versioning.SupportedOSPlatform("android34.0")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Runtime.Versioning.SupportedOSPlatform("android34.0")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Application level <c>android.content.pm.PackageManager.Property PackageManager.Property</c>
            for an app to inform the system that the app can be opted-in or opted-out from the
            compatibility treatment that avoids <c>android.app.Activity#setRequestedOrientation
            Activity#setRequestedOrientation()</c> loops.</summary>
        <remarks>
          <para>Application level <c>android.content.pm.PackageManager.Property PackageManager.Property</c>
            for an app to inform the system that the app can be opted-in or opted-out from the
            compatibility treatment that avoids <c>android.app.Activity#setRequestedOrientation
            Activity#setRequestedOrientation()</c> loops. Loops can be triggered by the OEM-configured
            ignore requested orientation display setting (on Android 12 (API level 31) and higher) or by
            the landscape natural orientation of the device.</para>
          <para>The treatment is disabled by default but device manufacturers can enable the treatment
            using their discretion to improve display compatibility.</para>
          <para>With this property set to <c>true</c>, the system could ignore
            <c>android.app.Activity#setRequestedOrientation Activity#setRequestedOrientation()</c> call
            from an app if one of the following conditions are true:
            &lt;ul&gt;
                &lt;li&gt;Activity is relaunching due to the previous
                <c>android.app.Activity#setRequestedOrientation Activity#setRequestedOrientation()</c>
                call.
                &lt;li&gt;Camera compatibility force rotation treatment is active for the package.
            &lt;/ul&gt;</para>
          <para>Setting this property to <c>false</c> informs the system that the app must be
            opted-out from the compatibility treatment even if the device manufacturer has opted the app
            into the treatment.</para>
          <para>&lt;b&gt;Syntax:&lt;/b&gt;</para>
          <code lang="text/java">&amp;lt;application&amp;gt;
              &amp;lt;property
                android:name="android.window.PROPERTY_COMPAT_IGNORE_REQUESTED_ORIENTATION"
                android:value="true|false"/&amp;gt;
            &amp;lt;/application&amp;gt;
            </code>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/android/view/WindowManager#PROPERTY_COMPAT_IGNORE_REQUESTED_ORIENTATION" title="Reference documentation">Java documentation for <code>android.view.WindowManager.PROPERTY_COMPAT_IGNORE_REQUESTED_ORIENTATION</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PropertySupportsMultiInstanceSystemUi">
      <MemberSignature Language="C#" Value="public const string PropertySupportsMultiInstanceSystemUi;" />
      <MemberSignature Language="ILAsm" Value=".field public static literal string PropertySupportsMultiInstanceSystemUi" />
      <MemberSignature Language="DocId" Value="F:Android.Views.IWindowManager.PropertySupportsMultiInstanceSystemUi" />
      <MemberSignature Language="F#" Value="val mutable PropertySupportsMultiInstanceSystemUi : string" Usage="Android.Views.IWindowManager.PropertySupportsMultiInstanceSystemUi" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="net-android-35.0;net-android-36.0">
          <AttributeName Language="C#">[Android.Runtime.Register("PROPERTY_SUPPORTS_MULTI_INSTANCE_SYSTEM_UI", ApiSince=35)]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("PROPERTY_SUPPORTS_MULTI_INSTANCE_SYSTEM_UI", ApiSince=35)&gt;]</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="net-android-35.0;net-android-36.0">
          <AttributeName Language="C#">[System.Runtime.Versioning.SupportedOSPlatform("android35.0")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Runtime.Versioning.SupportedOSPlatform("android35.0")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Activity or Application level <c>android.content.pm.PackageManager.Property
            PackageManager.Property</c> for an app to declare that System UI should be shown for this
            app/component to allow it to be launched as multiple instances.</summary>
        <remarks>
          <para>Activity or Application level <c>android.content.pm.PackageManager.Property
            PackageManager.Property</c> for an app to declare that System UI should be shown for this
            app/component to allow it to be launched as multiple instances.  This property only affects
            SystemUI behavior and does _not_ affect whether a component can actually be launched into
            multiple instances, which is determined by the Activity's <c>launchMode</c> or the launching
            Intent's flags.  If the property is set on the Application, then all components within that
            application will use that value unless specified per component.
            
            The value must be a boolean string.</para>
          <para>&lt;b&gt;Syntax:&lt;/b&gt;</para>
          <code lang="text/java">&amp;lt;activity&amp;gt;
              &amp;lt;property
                android:name="android.window.PROPERTY_SUPPORTS_MULTI_INSTANCE_SYSTEM_UI"
                android:value="true|false"/&amp;gt;
            &amp;lt;/activity&amp;gt;
            </code>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/android/view/WindowManager#PROPERTY_SUPPORTS_MULTI_INSTANCE_SYSTEM_UI" title="Reference documentation">Java documentation for <code>android.view.WindowManager.PROPERTY_SUPPORTS_MULTI_INSTANCE_SYSTEM_UI</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="RegisterBatchedSurfaceControlInputReceiver">
      <MemberSignature Language="C#" Value="public virtual Android.Window.InputTransferToken RegisterBatchedSurfaceControlInputReceiver (Android.Window.InputTransferToken hostInputTransferToken, Android.Views.SurfaceControl surfaceControl, Android.Views.Choreographer choreographer, Android.Views.ISurfaceControlInputReceiver receiver);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Android.Window.InputTransferToken RegisterBatchedSurfaceControlInputReceiver(class Android.Window.InputTransferToken hostInputTransferToken, class Android.Views.SurfaceControl surfaceControl, class Android.Views.Choreographer choreographer, class Android.Views.ISurfaceControlInputReceiver receiver) cil managed" />
      <MemberSignature Language="DocId" Value="M:Android.Views.IWindowManager.RegisterBatchedSurfaceControlInputReceiver(Android.Window.InputTransferToken,Android.Views.SurfaceControl,Android.Views.Choreographer,Android.Views.ISurfaceControlInputReceiver)" />
      <MemberSignature Language="F#" Value="abstract member RegisterBatchedSurfaceControlInputReceiver : Android.Window.InputTransferToken * Android.Views.SurfaceControl * Android.Views.Choreographer * Android.Views.ISurfaceControlInputReceiver -&gt; Android.Window.InputTransferToken&#xA;override this.RegisterBatchedSurfaceControlInputReceiver : Android.Window.InputTransferToken * Android.Views.SurfaceControl * Android.Views.Choreographer * Android.Views.ISurfaceControlInputReceiver -&gt; Android.Window.InputTransferToken" Usage="iWindowManager.RegisterBatchedSurfaceControlInputReceiver (hostInputTransferToken, surfaceControl, choreographer, receiver)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="net-android-35.0;net-android-36.0">
          <AttributeName Language="C#">[Android.Runtime.Register("registerBatchedSurfaceControlInputReceiver", "(Landroid/window/InputTransferToken;Landroid/view/SurfaceControl;Landroid/view/Choreographer;Landroid/view/SurfaceControlInputReceiver;)Landroid/window/InputTransferToken;", "GetRegisterBatchedSurfaceControlInputReceiver_Landroid_window_InputTransferToken_Landroid_view_SurfaceControl_Landroid_view_Choreographer_Landroid_view_SurfaceControlInputReceiver_Handler:Android.Views.IWindowManager, Mono.Android, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null", ApiSince=35)]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("registerBatchedSurfaceControlInputReceiver", "(Landroid/window/InputTransferToken;Landroid/view/SurfaceControl;Landroid/view/Choreographer;Landroid/view/SurfaceControlInputReceiver;)Landroid/window/InputTransferToken;", "GetRegisterBatchedSurfaceControlInputReceiver_Landroid_window_InputTransferToken_Landroid_view_SurfaceControl_Landroid_view_Choreographer_Landroid_view_SurfaceControlInputReceiver_Handler:Android.Views.IWindowManager, Mono.Android, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null", ApiSince=35)&gt;]</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="net-android-35.0;net-android-36.0">
          <AttributeName Language="C#">[System.Runtime.Versioning.SupportedOSPlatform("android35.0")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Runtime.Versioning.SupportedOSPlatform("android35.0")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Android.Window.InputTransferToken</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="hostInputTransferToken" Type="Android.Window.InputTransferToken" Index="0" FrameworkAlternate="net-android-35.0;net-android-36.0" />
        <Parameter Name="surfaceControl" Type="Android.Views.SurfaceControl" Index="1" FrameworkAlternate="net-android-35.0;net-android-36.0" />
        <Parameter Name="choreographer" Type="Android.Views.Choreographer" Index="2" FrameworkAlternate="net-android-35.0;net-android-36.0" />
        <Parameter Name="receiver" Type="Android.Views.ISurfaceControlInputReceiver" Index="3" FrameworkAlternate="net-android-35.0;net-android-36.0" />
      </Parameters>
      <Docs>
        <param name="surfaceControl">The SurfaceControl to register the InputChannel for</param>
        <param name="hostInputTransferToken">The host token to link the embedded. This is used to handle
                                          transferring touch gesture from host to embedded and for ANRs
                                          to ensure the host receives the ANR if any issues with
                                          touch on the embedded.</param>
        <param name="choreographer">The Choreographer used for batching. This should match the
                                          rendering Choreographer.</param>
        <param name="receiver">The SurfaceControlInputReceiver that will receive the input
                                          events</param>
        <summary>Registers a <c>SurfaceControlInputReceiver</c> for a <c>SurfaceControl</c> that will
            receive batched input event.</summary>
        <returns>Returns the <c>InputTransferToken</c> that can be used to transfer touch gesture
            to or from other windows.</returns>
        <remarks>
          <para>Registers a <c>SurfaceControlInputReceiver</c> for a <c>SurfaceControl</c> that will
            receive batched input event. For those events that are batched, the invocation will happen
            once per <c>Choreographer</c> frame, and other input events will be delivered immediately.
            This is different from
            <c>#registerUnbatchedSurfaceControlInputReceiver(int, InputTransferToken, SurfaceControl,
            Looper, SurfaceControlInputReceiver)</c> in that the input events are received batched. The
            caller must invoke <c>#unregisterSurfaceControlInputReceiver(SurfaceControl)</c> to clean up
            the resources when no longer needing to use the <c>SurfaceControlInputReceiver</c></para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/android/view/WindowManager#registerBatchedSurfaceControlInputReceiver(android.window.InputTransferToken,%20android.view.SurfaceControl,%20android.view.Choreographer,%20android.view.SurfaceControlInputReceiver)" title="Reference documentation">Java documentation for <code>android.view.WindowManager.registerBatchedSurfaceControlInputReceiver(android.window.InputTransferToken, android.view.SurfaceControl, android.view.Choreographer, android.view.SurfaceControlInputReceiver)</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="RegisterTrustedPresentationListener">
      <MemberSignature Language="C#" Value="public virtual void RegisterTrustedPresentationListener (Android.OS.IBinder window, Android.Window.TrustedPresentationThresholds thresholds, Java.Util.Concurrent.IExecutor executor, Java.Util.Functions.IConsumer listener);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void RegisterTrustedPresentationListener(class Android.OS.IBinder window, class Android.Window.TrustedPresentationThresholds thresholds, class Java.Util.Concurrent.IExecutor executor, class Java.Util.Functions.IConsumer listener) cil managed" />
      <MemberSignature Language="DocId" Value="M:Android.Views.IWindowManager.RegisterTrustedPresentationListener(Android.OS.IBinder,Android.Window.TrustedPresentationThresholds,Java.Util.Concurrent.IExecutor,Java.Util.Functions.IConsumer)" />
      <MemberSignature Language="F#" Value="abstract member RegisterTrustedPresentationListener : Android.OS.IBinder * Android.Window.TrustedPresentationThresholds * Java.Util.Concurrent.IExecutor * Java.Util.Functions.IConsumer -&gt; unit&#xA;override this.RegisterTrustedPresentationListener : Android.OS.IBinder * Android.Window.TrustedPresentationThresholds * Java.Util.Concurrent.IExecutor * Java.Util.Functions.IConsumer -&gt; unit" Usage="iWindowManager.RegisterTrustedPresentationListener (window, thresholds, executor, listener)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="net-android-35.0;net-android-36.0">
          <AttributeName Language="C#">[Android.Runtime.Register("registerTrustedPresentationListener", "(Landroid/os/IBinder;Landroid/window/TrustedPresentationThresholds;Ljava/util/concurrent/Executor;Ljava/util/function/Consumer;)V", "GetRegisterTrustedPresentationListener_Landroid_os_IBinder_Landroid_window_TrustedPresentationThresholds_Ljava_util_concurrent_Executor_Ljava_util_function_Consumer_Handler:Android.Views.IWindowManager, Mono.Android, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null", ApiSince=35)]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("registerTrustedPresentationListener", "(Landroid/os/IBinder;Landroid/window/TrustedPresentationThresholds;Ljava/util/concurrent/Executor;Ljava/util/function/Consumer;)V", "GetRegisterTrustedPresentationListener_Landroid_os_IBinder_Landroid_window_TrustedPresentationThresholds_Ljava_util_concurrent_Executor_Ljava_util_function_Consumer_Handler:Android.Views.IWindowManager, Mono.Android, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null", ApiSince=35)&gt;]</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="net-android-35.0;net-android-36.0">
          <AttributeName Language="C#">[System.Runtime.Versioning.SupportedOSPlatform("android35.0")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Runtime.Versioning.SupportedOSPlatform("android35.0")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="window" Type="Android.OS.IBinder" Index="0" FrameworkAlternate="net-android-35.0;net-android-36.0" />
        <Parameter Name="thresholds" Type="Android.Window.TrustedPresentationThresholds" Index="1" FrameworkAlternate="net-android-35.0;net-android-36.0" />
        <Parameter Name="executor" Type="Java.Util.Concurrent.IExecutor" Index="2" FrameworkAlternate="net-android-35.0;net-android-36.0" />
        <Parameter Name="listener" Type="Java.Util.Functions.IConsumer" Index="3" FrameworkAlternate="net-android-35.0;net-android-36.0" />
      </Parameters>
      <Docs>
        <param name="window">The Window to add the trusted presentation listener for. This can be
                              retrieved from <c>View#getWindowToken()</c>.</param>
        <param name="thresholds">The <c>TrustedPresentationThresholds</c> that will specify when the to
                              invoke the callback.</param>
        <param name="executor">The <c>Executor</c> where the callback will be invoked on.</param>
        <param name="listener">The <c>Consumer</c> that will receive the callbacks
                              when entered or exited trusted presentation per the thresholds.</param>
        <summary>Sets a callback to receive feedback about the presentation of a <c>Window</c>.</summary>
        <remarks>
          <para>Sets a callback to receive feedback about the presentation of a <c>Window</c>.
            When the <c>Window</c> is presented according to the passed in
            <c>TrustedPresentationThresholds</c>, it is said to "enter the state", and receives the
            callback with <c>true</c>. When the conditions fall out of thresholds, it is then
            said to leave the state and the caller will receive a callback with <c>false</c>. The
            callbacks be sent for every state transition thereafter.</para>
          <para>There are a few simple thresholds:
            &lt;ul&gt;
               &lt;li&gt;minAlpha: Lower bound on computed alpha&lt;/li&gt;
               &lt;li&gt;minFractionRendered: Lower bounds on fraction of pixels that were rendered&lt;/li&gt;
               &lt;li&gt;stabilityThresholdMs: A time that alpha and fraction rendered must remain within
               bounds before we can "enter the state" &lt;/li&gt;
            &lt;/ul&gt;</para>
          <para>The fraction of pixels rendered is a computation based on scale, crop
            and occlusion. The calculation may be somewhat counterintuitive, so we
            can work through an example. Imagine we have a Window with a 100x100 buffer
            which is occluded by (10x100) pixels on the left, and cropped by (100x10) pixels
            on the top. Furthermore imagine this Window is scaled by 0.9 in both dimensions.
            (c=crop,o=occluded,b=both,x=none)
            
            &lt;blockquote&gt;
            &lt;table&gt;
              &lt;caption&gt;&lt;/caption&gt;
              &lt;tr&gt;&lt;td&gt;b&lt;/td&gt;&lt;td&gt;c&lt;/td&gt;&lt;td&gt;c&lt;/td&gt;&lt;td&gt;c&lt;/td&gt;&lt;/tr&gt;
              &lt;tr&gt;&lt;td&gt;o&lt;/td&gt;&lt;td&gt;x&lt;/td&gt;&lt;td&gt;x&lt;/td&gt;&lt;td&gt;x&lt;/td&gt;&lt;/tr&gt;
              &lt;tr&gt;&lt;td&gt;o&lt;/td&gt;&lt;td&gt;x&lt;/td&gt;&lt;td&gt;x&lt;/td&gt;&lt;td&gt;x&lt;/td&gt;&lt;/tr&gt;
              &lt;tr&gt;&lt;td&gt;o&lt;/td&gt;&lt;td&gt;x&lt;/td&gt;&lt;td&gt;x&lt;/td&gt;&lt;td&gt;x&lt;/td&gt;&lt;/tr&gt;
            &lt;/table&gt;
            &lt;/blockquote&gt;</para>
          <para>We first start by computing fr=xscale*yscale=0.9*0.9=0.81, indicating
            that "81%" of the pixels were rendered. This corresponds to what was 100
            pixels being displayed in 81 pixels. This is somewhat of an abuse of
            language, as the information of merged pixels isn't totally lost, but
            we err on the conservative side.</para>
          <para>We then repeat a similar process for the crop and covered regions and
            accumulate the results: fr = fr * (fractionNotCropped) * (fractionNotCovered)
            So for this example we would get 0.9*0.9*0.9*0.9=0.65...</para>
          <para>Notice that this is not completely accurate, as we have double counted
            the region marked as b. However we only wanted a "lower bound" and so it
            is ok to err in this direction. Selection of the threshold will ultimately
            be somewhat arbitrary, and so there are some somewhat arbitrary decisions in
            this API as well.</para>
          <para />
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/android/view/WindowManager#registerTrustedPresentationListener(android.os.IBinder,%20android.window.TrustedPresentationThresholds,%20java.util.concurrent.Executor,%20java.util.function.Consumer%3Cjava.lang.Boolean%3E)" title="Reference documentation">Java documentation for <code>android.view.WindowManager.registerTrustedPresentationListener(android.os.IBinder, android.window.TrustedPresentationThresholds, java.util.concurrent.Executor, java.util.function.Consumer&lt;java.lang.Boolean&gt;)</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="RegisterUnbatchedSurfaceControlInputReceiver">
      <MemberSignature Language="C#" Value="public virtual Android.Window.InputTransferToken RegisterUnbatchedSurfaceControlInputReceiver (Android.Window.InputTransferToken hostInputTransferToken, Android.Views.SurfaceControl surfaceControl, Android.OS.Looper looper, Android.Views.ISurfaceControlInputReceiver receiver);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Android.Window.InputTransferToken RegisterUnbatchedSurfaceControlInputReceiver(class Android.Window.InputTransferToken hostInputTransferToken, class Android.Views.SurfaceControl surfaceControl, class Android.OS.Looper looper, class Android.Views.ISurfaceControlInputReceiver receiver) cil managed" />
      <MemberSignature Language="DocId" Value="M:Android.Views.IWindowManager.RegisterUnbatchedSurfaceControlInputReceiver(Android.Window.InputTransferToken,Android.Views.SurfaceControl,Android.OS.Looper,Android.Views.ISurfaceControlInputReceiver)" />
      <MemberSignature Language="F#" Value="abstract member RegisterUnbatchedSurfaceControlInputReceiver : Android.Window.InputTransferToken * Android.Views.SurfaceControl * Android.OS.Looper * Android.Views.ISurfaceControlInputReceiver -&gt; Android.Window.InputTransferToken&#xA;override this.RegisterUnbatchedSurfaceControlInputReceiver : Android.Window.InputTransferToken * Android.Views.SurfaceControl * Android.OS.Looper * Android.Views.ISurfaceControlInputReceiver -&gt; Android.Window.InputTransferToken" Usage="iWindowManager.RegisterUnbatchedSurfaceControlInputReceiver (hostInputTransferToken, surfaceControl, looper, receiver)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="net-android-35.0;net-android-36.0">
          <AttributeName Language="C#">[Android.Runtime.Register("registerUnbatchedSurfaceControlInputReceiver", "(Landroid/window/InputTransferToken;Landroid/view/SurfaceControl;Landroid/os/Looper;Landroid/view/SurfaceControlInputReceiver;)Landroid/window/InputTransferToken;", "GetRegisterUnbatchedSurfaceControlInputReceiver_Landroid_window_InputTransferToken_Landroid_view_SurfaceControl_Landroid_os_Looper_Landroid_view_SurfaceControlInputReceiver_Handler:Android.Views.IWindowManager, Mono.Android, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null", ApiSince=35)]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("registerUnbatchedSurfaceControlInputReceiver", "(Landroid/window/InputTransferToken;Landroid/view/SurfaceControl;Landroid/os/Looper;Landroid/view/SurfaceControlInputReceiver;)Landroid/window/InputTransferToken;", "GetRegisterUnbatchedSurfaceControlInputReceiver_Landroid_window_InputTransferToken_Landroid_view_SurfaceControl_Landroid_os_Looper_Landroid_view_SurfaceControlInputReceiver_Handler:Android.Views.IWindowManager, Mono.Android, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null", ApiSince=35)&gt;]</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="net-android-35.0;net-android-36.0">
          <AttributeName Language="C#">[System.Runtime.Versioning.SupportedOSPlatform("android35.0")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Runtime.Versioning.SupportedOSPlatform("android35.0")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Android.Window.InputTransferToken</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="hostInputTransferToken" Type="Android.Window.InputTransferToken" Index="0" FrameworkAlternate="net-android-35.0;net-android-36.0" />
        <Parameter Name="surfaceControl" Type="Android.Views.SurfaceControl" Index="1" FrameworkAlternate="net-android-35.0;net-android-36.0" />
        <Parameter Name="looper" Type="Android.OS.Looper" Index="2" FrameworkAlternate="net-android-35.0;net-android-36.0" />
        <Parameter Name="receiver" Type="Android.Views.ISurfaceControlInputReceiver" Index="3" FrameworkAlternate="net-android-35.0;net-android-36.0" />
      </Parameters>
      <Docs>
        <param name="surfaceControl">The SurfaceControl to register the InputChannel for</param>
        <param name="hostInputTransferToken">The host token to link the embedded. This is used to handle
                                          transferring touch gesture from host to embedded and for ANRs
                                          to ensure the host receives the ANR if any issues with
                                          touch on the embedded.</param>
        <param name="looper">The looper to use when invoking callbacks.</param>
        <param name="receiver">The SurfaceControlInputReceiver that will receive the input
                                          events.</param>
        <summary>Registers a <c>SurfaceControlInputReceiver</c> for a <c>SurfaceControl</c> that will
            receive every input event.</summary>
        <returns>Returns the <c>InputTransferToken</c> that can be used to transfer touch gesture
            to or from other windows.</returns>
        <remarks>
          <para>Registers a <c>SurfaceControlInputReceiver</c> for a <c>SurfaceControl</c> that will
            receive every input event. This is different than calling
            <c>#registerBatchedSurfaceControlInputReceiver(InputTransferToken, SurfaceControl,
            Choreographer, SurfaceControlInputReceiver)</c> in that the input events are received
            unbatched.
            The caller must invoke <c>#unregisterSurfaceControlInputReceiver(SurfaceControl)</c> to
            clean up the resources when no longer needing to use the <c>SurfaceControlInputReceiver</c></para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/android/view/WindowManager#registerUnbatchedSurfaceControlInputReceiver(android.window.InputTransferToken,%20android.view.SurfaceControl,%20android.os.Looper,%20android.view.SurfaceControlInputReceiver)" title="Reference documentation">Java documentation for <code>android.view.WindowManager.registerUnbatchedSurfaceControlInputReceiver(android.window.InputTransferToken, android.view.SurfaceControl, android.os.Looper, android.view.SurfaceControlInputReceiver)</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="RemoveCrossWindowBlurEnabledListener">
      <MemberSignature Language="C#" Value="public virtual void RemoveCrossWindowBlurEnabledListener (Java.Util.Functions.IConsumer listener);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void RemoveCrossWindowBlurEnabledListener(class Java.Util.Functions.IConsumer listener) cil managed" />
      <MemberSignature Language="DocId" Value="M:Android.Views.IWindowManager.RemoveCrossWindowBlurEnabledListener(Java.Util.Functions.IConsumer)" />
      <MemberSignature Language="F#" Value="abstract member RemoveCrossWindowBlurEnabledListener : Java.Util.Functions.IConsumer -&gt; unit&#xA;override this.RemoveCrossWindowBlurEnabledListener : Java.Util.Functions.IConsumer -&gt; unit" Usage="iWindowManager.RemoveCrossWindowBlurEnabledListener listener" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("removeCrossWindowBlurEnabledListener", "(Ljava/util/function/Consumer;)V", "GetRemoveCrossWindowBlurEnabledListener_Ljava_util_function_Consumer_Handler:Android.Views.IWindowManager, Mono.Android, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null", ApiSince=31)]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("removeCrossWindowBlurEnabledListener", "(Ljava/util/function/Consumer;)V", "GetRemoveCrossWindowBlurEnabledListener_Ljava_util_function_Consumer_Handler:Android.Views.IWindowManager, Mono.Android, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null", ApiSince=31)&gt;]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[System.Runtime.Versioning.SupportedOSPlatform("android31.0")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Runtime.Versioning.SupportedOSPlatform("android31.0")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="listener" Type="Java.Util.Functions.IConsumer" />
      </Parameters>
      <Docs>
        <param name="listener">the listener to be removed</param>
        <summary>Removes a listener, previously added with <c>#addCrossWindowBlurEnabledListener</c></summary>
        <remarks>
          <para>Removes a listener, previously added with <c>#addCrossWindowBlurEnabledListener</c></para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/android/view/WindowManager#removeCrossWindowBlurEnabledListener(java.util.function.Consumer%3Cjava.lang.Boolean%3E)" title="Reference documentation">Java documentation for <code>android.view.WindowManager.removeCrossWindowBlurEnabledListener(java.util.function.Consumer&lt;java.lang.Boolean&gt;)</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="RemoveProposedRotationListener">
      <MemberSignature Language="C#" Value="public virtual void RemoveProposedRotationListener (Java.Util.Functions.IIntConsumer listener);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void RemoveProposedRotationListener(class Java.Util.Functions.IIntConsumer listener) cil managed" />
      <MemberSignature Language="DocId" Value="M:Android.Views.IWindowManager.RemoveProposedRotationListener(Java.Util.Functions.IIntConsumer)" />
      <MemberSignature Language="F#" Value="abstract member RemoveProposedRotationListener : Java.Util.Functions.IIntConsumer -&gt; unit&#xA;override this.RemoveProposedRotationListener : Java.Util.Functions.IIntConsumer -&gt; unit" Usage="iWindowManager.RemoveProposedRotationListener listener" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("removeProposedRotationListener", "(Ljava/util/function/IntConsumer;)V", "GetRemoveProposedRotationListener_Ljava_util_function_IntConsumer_Handler:Android.Views.IWindowManager, Mono.Android, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null", ApiSince=34)]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("removeProposedRotationListener", "(Ljava/util/function/IntConsumer;)V", "GetRemoveProposedRotationListener_Ljava_util_function_IntConsumer_Handler:Android.Views.IWindowManager, Mono.Android, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null", ApiSince=34)&gt;]</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName Language="C#">[System.Runtime.Versioning.SupportedOSPlatform("android34.0")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Runtime.Versioning.SupportedOSPlatform("android34.0")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="listener" Type="Java.Util.Functions.IIntConsumer" />
      </Parameters>
      <Docs>
        <param name="listener">The listener to be removed.</param>
        <summary>Removes a listener, previously added with <c>#addProposedRotationListener</c>.</summary>
        <remarks>
          <para>Removes a listener, previously added with <c>#addProposedRotationListener</c>. It is
            recommended to call when the associated context no longer has visible components. No-op if
            the provided listener is not registered.</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/android/view/WindowManager#removeProposedRotationListener(java.util.function.IntConsumer)" title="Reference documentation">Java documentation for <code>android.view.WindowManager.removeProposedRotationListener(java.util.function.IntConsumer)</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="RemoveScreenRecordingCallback">
      <MemberSignature Language="C#" Value="public virtual void RemoveScreenRecordingCallback (Java.Util.Functions.IConsumer callback);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void RemoveScreenRecordingCallback(class Java.Util.Functions.IConsumer callback) cil managed" />
      <MemberSignature Language="DocId" Value="M:Android.Views.IWindowManager.RemoveScreenRecordingCallback(Java.Util.Functions.IConsumer)" />
      <MemberSignature Language="F#" Value="abstract member RemoveScreenRecordingCallback : Java.Util.Functions.IConsumer -&gt; unit&#xA;override this.RemoveScreenRecordingCallback : Java.Util.Functions.IConsumer -&gt; unit" Usage="iWindowManager.RemoveScreenRecordingCallback callback" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="net-android-35.0;net-android-36.0">
          <AttributeName Language="C#">[Android.Runtime.Register("removeScreenRecordingCallback", "(Ljava/util/function/Consumer;)V", "GetRemoveScreenRecordingCallback_Ljava_util_function_Consumer_Handler:Android.Views.IWindowManager, Mono.Android, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null", ApiSince=35)]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("removeScreenRecordingCallback", "(Ljava/util/function/Consumer;)V", "GetRemoveScreenRecordingCallback_Ljava_util_function_Consumer_Handler:Android.Views.IWindowManager, Mono.Android, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null", ApiSince=35)&gt;]</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="net-android-35.0;net-android-36.0">
          <AttributeName Language="C#">[Android.Runtime.RequiresPermission("android.permission.DETECT_SCREEN_RECORDING")]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.RequiresPermission("android.permission.DETECT_SCREEN_RECORDING")&gt;]</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="net-android-35.0;net-android-36.0">
          <AttributeName Language="C#">[System.Runtime.Versioning.SupportedOSPlatform("android35.0")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Runtime.Versioning.SupportedOSPlatform("android35.0")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="callback" Type="Java.Util.Functions.IConsumer" Index="0" FrameworkAlternate="net-android-35.0;net-android-36.0" />
      </Parameters>
      <Docs>
        <param name="callback">The callback to remove.</param>
        <summary>Removes a screen recording callback.</summary>
        <remarks>
          <para>Removes a screen recording callback.</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/android/view/WindowManager#removeScreenRecordingCallback(java.util.function.Consumer%3Cjava.lang.Integer%3E)" title="Reference documentation">Java documentation for <code>android.view.WindowManager.removeScreenRecordingCallback(java.util.function.Consumer&lt;java.lang.Integer&gt;)</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="RemoveViewImmediate">
      <MemberSignature Language="C#" Value="public void RemoveViewImmediate (Android.Views.View? view);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void RemoveViewImmediate(class Android.Views.View view) cil managed" />
      <MemberSignature Language="DocId" Value="M:Android.Views.IWindowManager.RemoveViewImmediate(Android.Views.View)" />
      <MemberSignature Language="F#" Value="abstract member RemoveViewImmediate : Android.Views.View -&gt; unit" Usage="iWindowManager.RemoveViewImmediate view" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName Language="C#">[Android.Runtime.Register("removeViewImmediate", "(Landroid/view/View;)V", "GetRemoveViewImmediate_Landroid_view_View_Handler:Android.Views.IWindowManagerInvoker, Mono.Android, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null")]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("removeViewImmediate", "(Landroid/view/View;)V", "GetRemoveViewImmediate_Landroid_view_View_Handler:Android.Views.IWindowManagerInvoker, Mono.Android, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="view" Type="Android.Views.View" />
      </Parameters>
      <Docs>
        <param name="view">The view to be removed.</param>
        <summary>Special variation of <c>#removeView</c> that immediately invokes
            the given view hierarchy's <c>View#onDetachedFromWindow()
            View.onDetachedFromWindow()</c> methods before returning.</summary>
        <remarks>
          <para>Special variation of <c>#removeView</c> that immediately invokes
            the given view hierarchy's <c>View#onDetachedFromWindow()
            View.onDetachedFromWindow()</c> methods before returning.  This is not
            for normal applications; using it correctly requires great care.</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/android/view/WindowManager#removeViewImmediate(android.view.View)" title="Reference documentation">Java documentation for <code>android.view.WindowManager.removeViewImmediate(android.view.View)</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
        <since version="Added in API level 1" />
      </Docs>
    </Member>
    <Member MemberName="TransferTouchGesture">
      <MemberSignature Language="C#" Value="public virtual bool TransferTouchGesture (Android.Window.InputTransferToken transferFromToken, Android.Window.InputTransferToken transferToToken);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool TransferTouchGesture(class Android.Window.InputTransferToken transferFromToken, class Android.Window.InputTransferToken transferToToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Android.Views.IWindowManager.TransferTouchGesture(Android.Window.InputTransferToken,Android.Window.InputTransferToken)" />
      <MemberSignature Language="F#" Value="abstract member TransferTouchGesture : Android.Window.InputTransferToken * Android.Window.InputTransferToken -&gt; bool&#xA;override this.TransferTouchGesture : Android.Window.InputTransferToken * Android.Window.InputTransferToken -&gt; bool" Usage="iWindowManager.TransferTouchGesture (transferFromToken, transferToToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="net-android-35.0;net-android-36.0">
          <AttributeName Language="C#">[Android.Runtime.Register("transferTouchGesture", "(Landroid/window/InputTransferToken;Landroid/window/InputTransferToken;)Z", "GetTransferTouchGesture_Landroid_window_InputTransferToken_Landroid_window_InputTransferToken_Handler:Android.Views.IWindowManager, Mono.Android, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null", ApiSince=35)]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("transferTouchGesture", "(Landroid/window/InputTransferToken;Landroid/window/InputTransferToken;)Z", "GetTransferTouchGesture_Landroid_window_InputTransferToken_Landroid_window_InputTransferToken_Handler:Android.Views.IWindowManager, Mono.Android, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null", ApiSince=35)&gt;]</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="net-android-35.0;net-android-36.0">
          <AttributeName Language="C#">[System.Runtime.Versioning.SupportedOSPlatform("android35.0")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Runtime.Versioning.SupportedOSPlatform("android35.0")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="transferFromToken" Type="Android.Window.InputTransferToken" Index="0" FrameworkAlternate="net-android-35.0;net-android-36.0" />
        <Parameter Name="transferToToken" Type="Android.Window.InputTransferToken" Index="1" FrameworkAlternate="net-android-35.0;net-android-36.0" />
      </Parameters>
      <Docs>
        <param name="transferFromToken">the InputTransferToken for the currently active gesture</param>
        <param name="transferToToken">the InputTransferToken to transfer the gesture to.</param>
        <summary>Transfer the currently in progress touch gesture from the transferFromToken to the
            transferToToken.</summary>
        <returns>Whether the touch stream was transferred.</returns>
        <remarks>
          <para>Transfer the currently in progress touch gesture from the transferFromToken to the
            transferToToken.</para>
          <para>&lt;br&gt;
            This requires that the fromToken and toToken are associated with each other. The association
            can be done different ways, depending on how the embedded window is created.
            &lt;ul&gt;
            &lt;li&gt;
            Creating a <c>SurfaceControlViewHost</c> and passing the host's
            <c>InputTransferToken</c> for
            <c>SurfaceControlViewHost#SurfaceControlViewHost(Context, Display, InputTransferToken)</c>.
            &lt;/li&gt;
            &lt;li&gt;
            Registering a SurfaceControl for input and passing the host's token to either
            <c>#registerBatchedSurfaceControlInputReceiver(InputTransferToken, SurfaceControl,
            Choreographer, SurfaceControlInputReceiver)</c> or
            <c>#registerUnbatchedSurfaceControlInputReceiver(InputTransferToken,
            SurfaceControl, Looper, SurfaceControlInputReceiver)</c>.
            &lt;/li&gt;
            &lt;/ul&gt;</para>
          <para>The host is likely to be an <c>AttachedSurfaceControl</c> so the host token can be
            retrieved via <c>AttachedSurfaceControl#getInputTransferToken()</c>.</para>
          <para>&lt;br&gt;
            When the host wants to transfer touch gesture to the embedded, it can retrieve the embedded
            token via <c>SurfaceControlViewHost.SurfacePackage#getInputTransferToken()</c> or use the
            value returned from either
            <c>#registerBatchedSurfaceControlInputReceiver(InputTransferToken, SurfaceControl,
            Choreographer, SurfaceControlInputReceiver)</c> or
            <c>#registerUnbatchedSurfaceControlInputReceiver(InputTransferToken, SurfaceControl,
            Looper, SurfaceControlInputReceiver)</c> and pass its own token as the transferFromToken.</para>
          <para>When the embedded wants to transfer touch gesture to the host, it can pass in its own
            token as the transferFromToken and use the associated host's <c>InputTransferToken</c> as
            the transferToToken</para>
          <para>&lt;br&gt;
            When the touch is transferred, the window currently receiving touch gets an ACTION_CANCEL
            and does not receive any further input events for this gesture.</para>
          <para>The transferred-to window receives an ACTION_DOWN event and then the remainder of the input
            events for this gesture. It does not receive any of the previous events of this gesture that
            the originating window received.</para>
          <para>The transferTouchGesture API only works for the current gesture. When a new gesture
            arrives, input dispatcher will do a new round of hit testing. So, if the host window is
            still the first thing that's being touched, then it will receive the new gesture again. It
            will again be up to the host to transfer this new gesture to the embedded.</para>
          <para>&lt;br&gt;
            The call can fail for the following reasons:
            &lt;ul&gt;
            &lt;li&gt;
            Caller attempts to transfer touch gesture from a token that doesn't have an active gesture.
            &lt;/li&gt;
            &lt;li&gt;
            The gesture is transferred to a token that is not associated with the transferFromToken. For
            example, if the caller transfers to a <c>SurfaceControlViewHost</c> not attached to the
            host window via <c>SurfaceView#setChildSurfacePackage(SurfacePackage)</c>.
            &lt;/li&gt;
            &lt;li&gt;
            The active gesture completes before the transfer is complete, such as in the case of a
            fling.
            &lt;/li&gt;
            &lt;/ul&gt;</para>
          <para />
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/android/view/WindowManager#transferTouchGesture(android.window.InputTransferToken,%20android.window.InputTransferToken)" title="Reference documentation">Java documentation for <code>android.view.WindowManager.transferTouchGesture(android.window.InputTransferToken, android.window.InputTransferToken)</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="UnregisterSurfaceControlInputReceiver">
      <MemberSignature Language="C#" Value="public virtual void UnregisterSurfaceControlInputReceiver (Android.Views.SurfaceControl surfaceControl);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void UnregisterSurfaceControlInputReceiver(class Android.Views.SurfaceControl surfaceControl) cil managed" />
      <MemberSignature Language="DocId" Value="M:Android.Views.IWindowManager.UnregisterSurfaceControlInputReceiver(Android.Views.SurfaceControl)" />
      <MemberSignature Language="F#" Value="abstract member UnregisterSurfaceControlInputReceiver : Android.Views.SurfaceControl -&gt; unit&#xA;override this.UnregisterSurfaceControlInputReceiver : Android.Views.SurfaceControl -&gt; unit" Usage="iWindowManager.UnregisterSurfaceControlInputReceiver surfaceControl" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="net-android-35.0;net-android-36.0">
          <AttributeName Language="C#">[Android.Runtime.Register("unregisterSurfaceControlInputReceiver", "(Landroid/view/SurfaceControl;)V", "GetUnregisterSurfaceControlInputReceiver_Landroid_view_SurfaceControl_Handler:Android.Views.IWindowManager, Mono.Android, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null", ApiSince=35)]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("unregisterSurfaceControlInputReceiver", "(Landroid/view/SurfaceControl;)V", "GetUnregisterSurfaceControlInputReceiver_Landroid_view_SurfaceControl_Handler:Android.Views.IWindowManager, Mono.Android, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null", ApiSince=35)&gt;]</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="net-android-35.0;net-android-36.0">
          <AttributeName Language="C#">[System.Runtime.Versioning.SupportedOSPlatform("android35.0")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Runtime.Versioning.SupportedOSPlatform("android35.0")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="surfaceControl" Type="Android.Views.SurfaceControl" Index="0" FrameworkAlternate="net-android-35.0;net-android-36.0" />
      </Parameters>
      <Docs>
        <param name="surfaceControl">The SurfaceControl to remove and unregister the input channel for.</param>
        <summary>Unregisters and cleans up the registered <c>SurfaceControlInputReceiver</c> for the
            specified token.</summary>
        <remarks>
          <para>Unregisters and cleans up the registered <c>SurfaceControlInputReceiver</c> for the
            specified token.</para>
          <para>Must be called on the same <c>Looper</c> thread to which was passed to the
            <c>#registerBatchedSurfaceControlInputReceiver(InputTransferToken, SurfaceControl,
            Choreographer, SurfaceControlInputReceiver)</c> or
            <c>#registerUnbatchedSurfaceControlInputReceiver(InputTransferToken, SurfaceControl,
            Looper, SurfaceControlInputReceiver)</c></para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/android/view/WindowManager#unregisterSurfaceControlInputReceiver(android.view.SurfaceControl)" title="Reference documentation">Java documentation for <code>android.view.WindowManager.unregisterSurfaceControlInputReceiver(android.view.SurfaceControl)</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="UnregisterTrustedPresentationListener">
      <MemberSignature Language="C#" Value="public virtual void UnregisterTrustedPresentationListener (Java.Util.Functions.IConsumer listener);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void UnregisterTrustedPresentationListener(class Java.Util.Functions.IConsumer listener) cil managed" />
      <MemberSignature Language="DocId" Value="M:Android.Views.IWindowManager.UnregisterTrustedPresentationListener(Java.Util.Functions.IConsumer)" />
      <MemberSignature Language="F#" Value="abstract member UnregisterTrustedPresentationListener : Java.Util.Functions.IConsumer -&gt; unit&#xA;override this.UnregisterTrustedPresentationListener : Java.Util.Functions.IConsumer -&gt; unit" Usage="iWindowManager.UnregisterTrustedPresentationListener listener" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Mono.Android</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="net-android-35.0;net-android-36.0">
          <AttributeName Language="C#">[Android.Runtime.Register("unregisterTrustedPresentationListener", "(Ljava/util/function/Consumer;)V", "GetUnregisterTrustedPresentationListener_Ljava_util_function_Consumer_Handler:Android.Views.IWindowManager, Mono.Android, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null", ApiSince=35)]</AttributeName>
          <AttributeName Language="F#">[&lt;Android.Runtime.Register("unregisterTrustedPresentationListener", "(Ljava/util/function/Consumer;)V", "GetUnregisterTrustedPresentationListener_Ljava_util_function_Consumer_Handler:Android.Views.IWindowManager, Mono.Android, Version=0.0.0.0, Culture=neutral, PublicKeyToken=null", ApiSince=35)&gt;]</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="net-android-35.0;net-android-36.0">
          <AttributeName Language="C#">[System.Runtime.Versioning.SupportedOSPlatform("android35.0")]</AttributeName>
          <AttributeName Language="F#">[&lt;System.Runtime.Versioning.SupportedOSPlatform("android35.0")&gt;]</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="listener" Type="Java.Util.Functions.IConsumer" Index="0" FrameworkAlternate="net-android-35.0;net-android-36.0" />
      </Parameters>
      <Docs>
        <param name="listener">To be added.</param>
        <summary>Removes a presentation listener associated with a window.</summary>
        <remarks>
          <para>Removes a presentation listener associated with a window. If the listener was not previously
            registered, the call will be a noop.</para>
          <para>
            <format type="text/html">
              <a href="https://developer.android.com/reference/android/view/WindowManager#unregisterTrustedPresentationListener(java.util.function.Consumer%3Cjava.lang.Boolean%3E)" title="Reference documentation">Java documentation for <code>android.view.WindowManager.unregisterTrustedPresentationListener(java.util.function.Consumer&lt;java.lang.Boolean&gt;)</code>.</a>
            </format>
          </para>
          <para>
                    Portions of this page are modifications based on work created and shared by the 
                    <format type="text/html"><a href="https://developers.google.com/terms/site-policies" title="Android Open Source Project">Android Open Source Project</a></format>
                     and used according to terms described in the 
                    <format type="text/html"><a href="https://creativecommons.org/licenses/by/2.5/" title="Creative Commons 2.5 Attribution License">Creative Commons 2.5 Attribution License.</a></format></para>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>
